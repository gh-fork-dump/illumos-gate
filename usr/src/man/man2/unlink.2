.\"
.\" Sun Microsystems, Inc. gratefully acknowledges The Open Group for
.\" permission to reproduce portions of its copyrighted documentation.
.\" Original documentation from The Open Group can be obtained online at
.\" http://www.opengroup.org/bookstore/.
.\"
.\" The Institute of Electrical and Electronics Engineers and The Open
.\" Group, have given us permission to reprint portions of their
.\" documentation.
.\"
.\" In the following statement, the phrase ``this text'' refers to portions
.\" of the system documentation.
.\"
.\" Portions of this text are reprinted and reproduced in electronic form
.\" in the SunOS Reference Manual, from IEEE Std 1003.1, 2004 Edition,
.\" Standard for Information Technology -- Portable Operating System
.\" Interface (POSIX), The Open Group Base Specifications Issue 6,
.\" Copyright (C) 2001-2004 by the Institute of Electrical and Electronics
.\" Engineers, Inc and The Open Group.  In the event of any discrepancy
.\" between these versions and the original IEEE and The Open Group
.\" Standard, the original IEEE and The Open Group Standard is the referee
.\" document.  The original Standard can be obtained online at
.\" http://www.opengroup.org/unix/online.html.
.\"
.\" This notice shall appear on any product containing this material.
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\"
.\" Copyright 1989 AT&T
.\" Portions Copyright (c) 1992, X/Open Company Limited  All Rights Reserved.
.\" Copyright (c) 2007, Sun Microsystems, Inc.  All Rights Reserved.
.\"
.Dd May 18, 2007
.Dt UNLINK 2
.Os
.Sh NAME
.Nm unlink , unlinkat
.Nd remove directory entry
.Sh SYNOPSIS
.In unistd.h
.Ft int
.Fn unlink "const char *path"
.Ft int
.Fn unlinkat "int dirfd" "const char *path" "int flag"
.Sh DESCRIPTION
The
.Fn unlink
function removes a link to a file.
If
.Fa path
names a symbolic link,
.Fn unlink
removes the symbolic link named by
.Fa path
and
does not affect any file or directory named by the contents of the symbolic
link.
Otherwise,
.Fn unlink
removes the link named by the pathname pointed
to by
.Fa path
and decrements the link count of the file referenced by the link.
.Pp
The
.Fn unlinkat
function also removes a link to a file.
See
.Xr fsattr 5 .
If the
.Fa flag
argument is 0, the behavior of
.Fn unlinkat
is the same as
.Fn unlink
except in the processing of its
.Fa path
argument.
If
.Fa path
is absolute,
.Fn unlinkat
behaves the same as
.Fn unlink
and the
.Fa dirfd
argument is unused.
If
.Fa path
is
relative and
.Fa dirfd
has the value
.Dv AT_FDCWD ,
defined in
.In fcntl.h , Fn unlinkat
also behaves the same as
.Fn unlink .
Otherwise,
.Fa path
is resolved relative to the directory referenced by the
.Fa dirfd
argument.
.Pp
If the
.Fa flag
argument is set to the value
.Dv AT_REMOVEDIR ,
defined in
.In fcntl.h , Fn unlinkat
behaves the same as
.Xr rmdir 2
except in the processing of the
.Fa path
argument as described above.
.Pp
When the file's link count becomes 0 and no process has the file open, the
space occupied by the file will be freed and the file is no longer accessible.
If one or more processes have the file open when the last link is removed, the
link is removed before
.Fn unlink
or
.Fn unlinkat
returns, but the removal of the file contents is postponed until all references
to the file are closed.
.Pp
If the
.Fa path
argument is a directory and the filesystem supports
.Fn unlink
and
.Fn unlinkat
on directories, the directory is unlinked from its parent with no cleanup being
performed.
In UFS, the disconnected directory will be found the next time the filesystem
is checked with
.Xr fsck 1M .
The
.Fn unlink
and
.Fn unlinkat
functions will not fail simply because a directory is not empty.
The user with appropriate privileges can orphan a non-empty directory without
generating an error message.
.Pp
If the
.Fa path
argument is a directory and the filesystem does not support
.Fn unlink
and
.Fn unlink
on directories (for example, ZFS), the call will fail with
.Va errno
set to
.Er EPERM .
.Pp
Upon successful completion,
.Fn unlink
and
.Fn unlinkat
will mark for
update the
.Va st_ctime
and
.Va st_mtime
fields of the parent directory.
If the file's link count is not 0, the
.Va st_ctime
field of the file will be marked for update.
.Sh RETURN VALUES
Upon successful completion, the value 0 is returned; otherwise the value -1 is
returned, the file is not unlinked and the global variable
.Va errno
is set to indicate the error.
.Sh ERRORS
The
.Fn unlink
and
.Fn unlinkat
functions will fail if:
.Bl -tag -width Er
.It Bq Er EACCES
Search permission is denied for a component of the path prefix, or write
permission is denied on the directory containing the link to be removed.
.Pp
The parent directory has the sticky bit set and the file is not writable by the
user, the user does not own the parent directory, the user does not own the
file, and the user is not a privileged user.
.It Bq Er EBUSY
The entry to be unlinked is the mount point for a mounted file system.
.It Bq Er EFAULT
The
.Fa path
argument points to an illegal address.
.It Bq Er EILSEQ
The
.Fa path
argument includes non-UTF8 characters and the file system accepts only file
names where all characters are part of the UTF-8 character codeset.
.It Bq Er EINTR
A signal was caught during the execution of the
.Fn unlink
function.
.It Bq Er ELOOP
Too many symbolic links were encountered in translating
.Fa path .
.It Bq Er ENAMETOOLONG
The length of the
.Fa path
argument exceeds
.Dv PATH_MAX ,
or the length of a
.Fa path
component exceeds
.Dv NAME_MAX
while
.Dv _POSIX_NO_TRUNC
is in effect.
.It Bq Er ENOENT
The named file does not exist or is a null pathname.
.It Bq Er ENOLINK
The
.Fa path
argument points to a remote machine and the link to that machine is no longer
active.
.It Bq Er ENOTDIR
A component of the
.Fa path
prefix is not a directory or the provided directory descriptor for
.Fn unlinkat
is not
.Dv AT_FDCWD
or does not reference a directory.
.It Bq Er EPERM
The named file is a directory and
.Brq Dv PRIV_SYS_LINKDIR
is not asserted in the effective set of the calling process, or the filesystem
implementation does not support
.Fn unlink
or
.Fn unlinkat
on directories.
.It Bq Er EROFS
The directory entry to be unlinked is part of a read-only file system.
.El
.Pp
The
.Fn unlink
and
.Fn unlinkat
functions may fail if:
.Bl -tag -width Er
.It Bq Er ENAMETOOLONG
Pathname resolution of a symbolic link produced an intermediate result whose
length exceeds
.Brq Dv PATH_MAX .
.It Bq Er ETXTBSY
The entry to be unlinked is the last directory entry to a pure procedure
(shared text) file that is being executed.
.El
.Sh USAGE
Applications should use
.Xr rmdir 2
to remove a directory.
.Sh INTERFACE STABILITY
.Fn unlink
is
.Sy Standard ;
.Fn unlinkat
is
.Sy Evolving .
.Sh MT-LEVEL
.Sy Async-Signal-Safe
.Sh SEE ALSO
.Xr rm 1 ,
.Xr close 2 ,
.Xr link 2 ,
.Xr open 2 ,
.Xr rmdir 2 ,
.Xr remove 3C ,
.Xr attributes 5 ,
.Xr fsattr 5 ,
.Xr privileges 5
