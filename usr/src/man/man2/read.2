.\"
.\" Sun Microsystems, Inc. gratefully acknowledges The Open Group for
.\" permission to reproduce portions of its copyrighted documentation.
.\" Original documentation from The Open Group can be obtained online at
.\" http://www.opengroup.org/bookstore/.
.\"
.\" The Institute of Electrical and Electronics Engineers and The Open
.\" Group, have given us permission to reprint portions of their
.\" documentation.
.\"
.\" In the following statement, the phrase ``this text'' refers to portions
.\" of the system documentation.
.\"
.\" Portions of this text are reprinted and reproduced in electronic form
.\" in the SunOS Reference Manual, from IEEE Std 1003.1, 2004 Edition,
.\" Standard for Information Technology -- Portable Operating System
.\" Interface (POSIX), The Open Group Base Specifications Issue 6,
.\" Copyright (C) 2001-2004 by the Institute of Electrical and Electronics
.\" Engineers, Inc and The Open Group.  In the event of any discrepancy
.\" between these versions and the original IEEE and The Open Group
.\" Standard, the original IEEE and The Open Group Standard is the referee
.\" document.  The original Standard can be obtained online at
.\" http://www.opengroup.org/unix/online.html.
.\"
.\" This notice shall appear on any product containing this material.
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\"
.\" Copyright 1989 AT&T
.\" Portions Copyright (c) 1992, X/Open Company Limited.  All Rights Reserved.
.\" Copyright (c) 2007, Sun Microsystems, Inc.  All Rights Reserved.
.\" Copyright (c) 2018, Joyent, Inc.
.\"
.Dd September 10, 2018
.Dt READ 2
.Os
.Sh NAME
.Nm read , readv , pread , preadv
.Nd read from file
.Sh SYNOPSIS
.In unistd.h
.Ft ssize_t
.Fo read
.Fa "int fildes"
.Fa "void *buf"
.Fa "size_t nbyte"
.Fc
.Ft ssize_t
.Fo pread
.Fa "int fildes"
.Fa "void *buf"
.Fa "size_t nbyte"
.Fa "off_t offset"
.Fc
.In sys/uio.h
.Ft ssize_t
.Fo readv
.Fa "int fildes"
.Fa "const struct iovec *iov"
.Fa "int iovcnt"
.Fc
.Ft ssize_t
.Fo preadv
.Fa "int fildes"
.Fa "const struct iovec *iov"
.Fa "int iovcnt"
.Fa "off_t offset"
.Fc
.Sh DESCRIPTION
The
.Fn read
function attempts to read
.Fa nbyte
bytes from the file associated with the open file descriptor,
.Fa fildes ,
into the buffer pointed to by
.Fa buf .
.Pp
If
.Fa nbyte
is 0,
.Fn read
returns 0 and has no other results.
.Pp
On files that support seeking (for example, a regular file), the
.Fn read
starts at a position in the file given by the file offset associated with
.Fa fildes .
The file offset is incremented by the number of bytes actually read.
.Pp
Files that do not support seeking (for example, terminals) always read from the
current position.
The value of a file offset associated with such a file is undefined.
.Pp
If
.Fa fildes
refers to a socket,
.Fn read
is equivalent to
.Xr recv 3SOCKET
with no flags set.
.Pp
No data transfer will occur past the current end-of-file.
If the starting position is at or after the end-of-file, 0 will be returned.
If the file refers to a device special file, the result of subsequent
.Fn read
requests is implementation-dependent.
.Pp
When attempting to read from a regular file with mandatory file/record locking
set
.Pq see Xr chmod 2 ,
and there is a write lock owned by another process on the segment of the file
to be read:
.Pp
.Bl -dash -compact
.It
If
.Dv O_NDELAY
or
.Dv O_NONBLOCK
is set,
.Fn read
returns the value -1 and sets
.Va errno
to
.Er EAGAIN .
.It
If
.Dv O_NDELAY
and
.Dv O_NONBLOCK
are clear,
.Fn read
sleeps until the blocking record lock is removed.
.El
.Pp
When attempting to read from an empty pipe (or FIFO):
.Pp
.Bl -dash -compact
.It
If no process has the pipe open for writing,
.Fn read
returns 0 to indicate end-of-file.
.It
If some process has the pipe open for writing and
.Dv O_NDELAY
is set,
.Fn read
returns 0.
.It
If some process has the pipe open for writing and
.Dv O_NONBLOCK
is set,
.Fn read
returns -1 and sets
.Va errno
to
.Er EAGAIN .
.It
If
.Dv O_NDELAY
and
.Dv O_NONBLOCK
are clear,
.Fn read
blocks until data is written to the pipe or the pipe is closed by all processes
that had opened the pipe for writing.
.El
.Pp
When attempting to read a file associated with a terminal that has no data
currently available:
.Pp
.Bl -dash -compact
.It
If
.Dv O_NDELAY
is set,
.Fn read
returns 0.
.It
If
.Dv O_NONBLOCK
is set,
.Fn read
returns -1 and sets
.Va errno
to
.Er EAGAIN .
.It
If
.Dv O_NDELAY
and
.Dv O_NONBLOCK
are clear,
.Fn read
blocks until data become available.
.El
.Pp
When attempting to read a file associated with a socket or a stream that is not
a pipe, a FIFO, or a terminal, and the file has no data currently available:
.Pp
.Bl -dash -compact
.It
If
.Dv O_NDELAY
or
.Dv O_NONBLOCK
is set,
.Fn read
returns -1 and sets
.Va errno
to
.Er EAGAIN .
.It
If O_NDELAY and O_NONBLOCK are clear,
.Fn read
blocks until data becomes available.
.El
.Pp
The
.Fn read
function reads data previously written to a file.
If any portion of a regular file prior to the end-of-file has not been written,
.Fn read
returns bytes with value 0.
For example,
.Xr lseek 2
allows the file offset to be set beyond the end of existing data in the file.
If data is later written at this point, subsequent reads in the gap between the
previous end of data and the newly written data will return bytes with value 0
until data is written into the gap.
.Pp
For regular files, no data transfer will occur past the offset maximum
established in the open file description associated with
.Fa fildes .
.Pp
Upon successful completion, where
.Fa nbyte
is greater than 0,
.Fn read
will mark for update the
.Va st_atime
field of the file, and return the number of bytes read.
This number will never be greater than
.Fa nbyte .
The
value returned may be less than
.Fa nbyte
if the number of bytes left in the file is less than
.Fa nbyte ,
if the
.Fn read
request was interrupted by a signal, or if the file is a pipe or FIFO or
special file and has fewer than
.Fa nbyte
bytes immediately available for reading.
For example, a
.Fn read
from a file associated with a terminal may return one typed line of data.
.Pp
If a
.Fn read
is interrupted by a signal before it reads any data, it will
return -1 with
.Va errno
set to
.Er EINTR .
.Pp
If a
.Fn read
is interrupted by a signal after it has successfully read some data, it will
return the number of bytes read.
.Pp
A
.Fn read
from a streams file can read data in three different modes:
byte-stream mode, message-nondiscard mode, and message-discard mode.
The
default is byte-stream mode.
This can be changed using the
.Dv I_SRDOPT Xr ioctl 2
request, and can be tested with the
.Dv I_GRDOPT Fn ioctl .
In byte-stream mode,
.Fn read
retrieves data from the stream until as many bytes as were requested are
transferred, or until there is no more data to be retrieved.
Byte-stream mode ignores message boundaries.
.Pp
In streams message-nondiscard mode,
.Fn read
retrieves data until as many bytes as were requested are transferred, or until
a message boundary is reached.
If
.Fn read
does not retrieve all the data in a message, the remaining data is left on the
stream, and can be retrieved by the next
.Fn read
call.
Message-discard mode also retrieves data until as many bytes as were requested
are transferred, or a message boundary is reached.
However, unread data remaining in a message after the
.Fn read
returns is discarded, and is not available for a subsequent
.Fn read , Fn readv
or
.Xr getmsg 2
call.
.Pp
How
.Fn read
handles zero-byte streams messages is determined by the current read mode
setting.
In byte-stream mode,
.Fn read
accepts data until it has read
.Fa nbyte
bytes, or until there is no more data to read, or until a zero-byte message
block is encountered.
The
.Fn read
function then returns the number of bytes read, and places the zero-byte
message back on the stream to be retrieved by the next
.Fn read , Fn readv
or
.Xr getmsg 2 .
In message-nondiscard or message-discard mode, a zero-byte message returns 0
and the message is removed from the stream.
When a zero-byte message is read as the first message on a stream, the message
is removed from the stream and 0 is returned, regardless of the read mode.
.Pp
A
.Fn read
from a streams file returns the data in the message at the front of the stream
head read queue, regardless of the priority band of the message.
.Pp
By default, streams are in control-normal mode, in which a
.Fn read
from a streams file can only process messages that contain a data part but do
not contain a control part.
The
.Fn read
fails if a message containing a control part is encountered at the stream head.
This default action can be changed by placing the stream in either control-data
mode or control-discard mode with the
.Dv I_SRDOPT Fn ioctl .
In control-data mode,
.Fn read
converts any control part to data and passes it to the application
before passing any data part originally present in the same message.
In control-discard mode,
.Fn read
discards message control parts but returns to the process any data part in the
message.
.Pp
In addition,
.Fn read
and
.Fn readv
will fail if the stream head had processed an asynchronous error before the
call.
In this case, the value of
.Va errno
does not reflect the result of
.Fn read
or
.Fn readv
but reflects the prior error.
If a hangup occurs on the stream being read,
.Fn read
continues to operate normally until the stream head read queue is empty.
Thereafter, it returns 0.
.Pp
If an asynchronous error occurs on a socket, it is possible for the
.Fn read
and
.Fn readv
functions to return an asynchronous error, just as in the
STREAMS case described above.
This might occur, for example, if a TCP socket that is using TCP keep-alive is
closed due to failing the keep-alive check.
.Ss Fn readv
The
.Fn readv
function is equivalent to
.Fn read ,
but places the input data into the
.Vt iovcnt
buffers specified by the members of the
.Fa iov
array:
.Fa iov[0] ,  iov[1] , \&... , iov[iovcnt\ -\ 1] .
The
.Fa iovcnt
argument is valid if greater than 0 and less than or equal to
.Brq Dv IOV_MAX .
.Pp
The
.Vt iovec
structure contains the following members:
.Bd -literal -offset indent
caddr_t   iov_base;
int       iov_len;
.Ed
.Pp
Each
.Vt iovec
entry specifies the base address and length of an area in memory where data
should be placed.
The
.Fn readv
function always fills an area completely before proceeding to the next.
.Pp
Upon successful completion,
.Fn readv
marks for update the
.Va st_atime
field of the file.
.Ss Fn pread
The
.Fn pread
function performs the same action as
.Fn read ,
except that it reads from a given position in the file without changing the
file pointer.
The first three arguments to
.Fn pread
are the same as
.Fn read
with the addition of a fourth argument
.Fa offset
for the desired position inside the file.
.Fn pread
will read up to the maximum offset value that can be represented in an
.Vt off_t
for regular files.
An attempt to perform a
.Fn pread
on a file that is incapable of seeking results in an error.
.Ss Fn preadv
The
.Fn preadv
function performs the same action as
.Fn readv
except it reads from a given position in the file without changing the file
pointer.
The first three arguments are the same as
.Fn readv
with the addition of a fourth argument
.Fa offset
for the desired position inside the file.
.Fn preadv
will read up to the maximum offset value that can be represented
in an
.Vt off_t
for regular files.
An attempt to perform a
.Fn preadv
on a file that is incapable of seeking results in an error.
.Sh RETURN VALUES
Upon successful completion,
.Fn read
and
.Fn readv
return a
non-negative integer indicating the number of bytes actually read.
Otherwise,
the functions return the value -1 the global variable
.Va errno
is set to indicate the error.
.Sh ERRORS
In addition to the errors documented below, if the
.Fa fildes
argument refers to a socket, then an asynchronous error generated by the
underlying socket protocol may be returned.
For the full list of errors, please see the corresponding socket protocol
manual page.
For example, for a list of TCP errors, please see
.Xr tcp 7P .
.Pp
The
.Fn read , Fn readv , Fn pread
and
.Fn preadv
functions will fail if:
.Bl -tag -width Er
.It Bq Er EAGAIN
Mandatory file/record locking was set,
.Dv O_NDELAY
or
.Dv O_NONBLOCK
was set, and there was a blocking record lock; total amount of system memory
available when reading using raw I/O is temporarily insufficient; no data is
waiting to be read on a file associated with a tty device and
.Dv O_NONBLOCK
was set; or no message is waiting to be read on a stream and
.Dv O_NDELAY
or
.Dv O_NONBLOCK
was set.
.It Bq Er EBADF
The
.Fa fildes
argument is not a valid file descriptor open for reading.
.It Bq Er EBADMSG
Message waiting to be read on a stream is not a data message.
.It Bq Er ECONNRESET
The
.Fa fildes
argument refers to a connection oriented socket and the connection was forcibly
closed by the peer and is no longer valid.
I/O can no longer be performed to
.Fa filedes .
.It Bq Er EDEADLK
The read was going to go to sleep and cause a deadlock to occur.
.It Bq Er EINTR
A signal was caught during the read operation and no data was transferred.
.It Bq Er EINVAL
An attempt was made to read from a stream linked to a multiplexor.
.It Bq Er EIO
A physical I/O error has occurred, or the process is in a background process
group and is attempting to read from its controlling terminal, and either the
process is ignoring or blocking the
.Dv SIGTTIN
signal or the process group of the process is orphaned.
.It Bq Er EISDIR
The
.Fa fildes
argument refers to a directory on a file system type that does not support read
operations on directories.
.It Bq Er ENOLCK
The system record lock table was full, so the
.Fn read
or
.Fn readv
could not go to sleep until the blocking record lock was removed.
.It Bq Er ENOLINK
The
.Fa fildes
argument is on a remote machine and the link to that machine is no longer
active.
.It Bq Er ENXIO
The device associated with
.Fa fildes
is a block special or character special file and the value of the file pointer
is out of range.
.El
.Pp
The
.Fn read
and
.Fn pread
functions will fail if:
.Bl -tag -width Er
.It Bq Er EFAULT
The
.Fa buf
argument points to an illegal address.
.It Bq Er EINVAL
The
.Fa nbyte
argument overflowed an
.Vt ssize_t .
.El
.Pp
The
.Fn read
and
.Fn readv
functions will fail if:
.Bl -tag -width Er
.It Bq Er EOVERFLOW
The file is a regular file,
.Fa nbyte
is greater than 0, the starting position is before the end-of-file, and the
starting position is greater than or equal to the offset maximum established in
the open file description associated with
.Fa fildes .
.El
.Pp
The
.Fn readv
and
.Fn preadv
functions may fail if:
.Bl -tag -width Er
.It Bq Er EFAULT
The
.Fa iov
argument points outside the allocated address space.
.It Bq Er EINVAL
The
.Fa iovcnt
argument was less than or equal to 0 or greater than
.Brq Dv IOV_MAX .
See
.Xr Intro 2
for a definition of
.Brq Dv IOV_MAX .
.Pp
One of the
.Va iov_len
values in the
.Fa iov
array was negative, or the sum of the
.Va iov_len
values in the
.Va iov
array overflowed an
.Vt ssize_t .
.El
.Pp
The
.Fn pread
and
.Fn preadv
functions will fail and the file pointer remain unchanged if:
.Bl -tag -width Er
.It Bq Er ESPIPE
The
.Fa fildes
argument is associated with a pipe or FIFO.
.El
.Sh USAGE
The
.Fn pread
function has a transitional interface for 64-bit file offsets.
See
.Xr lf64 5 .
.Sh INTERFACE STABILITY
.Sy Committed
.Sh MT-LEVEL
.Fn read
is
.Sy Async-Signal-Safe .
.Sh STANDARDS
See
.Xr standards 5 .
.Sh SEE ALSO
.Xr chmod 2 ,
.Xr creat 2 ,
.Xr dup 2 ,
.Xr fcntl 2 ,
.Xr getmsg 2 ,
.Xr Intro 2 ,
.Xr ioctl 2 ,
.Xr lseek 2 ,
.Xr open 2 ,
.Xr pipe 2 ,
.Xr recv 3SOCKET ,
.Xr attributes 5 ,
.Xr lf64 5 ,
.Xr standards 5 ,
.Xr streamio 7I ,
.Xr termio 7I ,
.Xr tcp 7P
