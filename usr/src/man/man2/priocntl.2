.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\"
.\" Copyright 1989 AT&T
.\" Copyright (c) 2006, Sun Microsystems, Inc. All Rights Reserved
.\"
.Dd May 11, 2006
.Dt PRIOCNTL 2
.Os
.Sh NAME
.Nm priocntl
.Nd process scheduler control
.Sh SYNOPSIS
.In sys/types.h
.In sys/priocntl.h
.In sys/rtpriocntl.h
.In sys/tspriocntl.h
.In sys/iapriocntl.h
.In sys/fsspriocntl.h
.In sys/fxpriocntl.h
.Ft long
.Fo priocntl
.Fa "idtype_t idtype"
.Fa "id_t id"
.Fa "int cmd"
.Fa "/* arg */ \&..."
.Fc
.Sh DESCRIPTION
The
.Fn priocntl
function provides for control over the scheduling of an active light weight
process (LWP).
.Pp
LWPs fall into distinct classes with a separate scheduling policy applied to
each class.
The classes currently supported are the realtime class, the time-sharing class,
the fair-share class, and the fixed-priority class.
The characteristics of these classes are described under the corresponding
headings
below.
.Pp
The class attribute of an LWP is inherited across the
.Xr fork 2
function and the
.Xr exec 2
family of functions.
The
.Fn priocntl
function can be used to dynamically change the class and other scheduling
parameters associated with a running LWP or set of LWPs given the appropriate
permissions as explained below.
.Pp
In the default configuration, a runnable realtime LWP runs before any other
LWP.
Therefore, inappropriate use of realtime LWP can have a dramatic negative
impact on system performance.
.Pp
The
.Fn priocntl
function provides an interface for specifying a process,
set of processes, or an LWP to which the function applies.
The
.Xr priocntlset 2
function provides the same functions as
.Fn priocntl ,
but allows a more general interface for specifying the set of LWPs to which the
function is to apply.
.Pp
For
.Fn priocntl ,
the
.Fa idtype
and
.Fa id
arguments are used together to specify the set of LWPs.
The interpretation of
.Fa id
depends on the value of
.Fa idtype .
The possible values for
.Fa idtype
and corresponding interpretations of
.Fa id
are as follows:
.Bl -tag -width "P_PROJID"
.It Dv P_ALL
The
.Fn priocntl
function applies to all existing LWPs.
The value of
.Fa id
is ignored.
The permission restrictions described below still apply.
.It Dv P_CID
The
.Fa id
argument is a class ID
.Po returned by the
.Dv PC_GETCID
command as explained below
.Pc .
The
.Fn priocntl
function applies to all LWPs in the specified class.
.It Dv P_GID
The
.Fa id
argument is a group ID.
The
.Fn priocntl
function applies to all LWPs with this effective group ID.
.It Dv P_LWPID
The
.Fa id
argument is an LWP ID.
The
.Fn priocntl
function applies to the LWP with the specified ID within the calling process.
.It Dv P_PGID
The
.Fa id
argument is a process group ID.
The
.Fn priocntl
function applies to all LWPs currently associated with processes in the
specified process group.
.It Dv P_PID
The
.Fa id
argument is a process ID specifying a single process.
The
.Fn priocntl
function applies to all LWPs currently associated with the specified process.
.It Dv P_PPID
The
.Fa id
argument is a parent process ID.
The
.Fn priocntl
function applies to all LWPs currently associated with processes with the
specified parent process ID.
.It Dv P_PROJID
The
.Fa id
argument is a project ID.
The
.Fn priocntl
function applies to all LWPs with this project ID.
.It Dv P_SID
The
.Fa id
argument is a session ID.
The
.Fn priocntl
function applies to all LWPs currently associated with processes in the
specified session.
.It Dv P_TASKID
The
.Fa id
argument is a task ID.
The
.Fn priocntl
function applies to all LWPs currently associated with processes in the
specified task.
.It Dv P_UID
The
.Fa id
argument is a user ID.
The
.Fn priocntl
function applies to all LWPs with this effective user ID.
.It Dv P_ZONEID
The
.Fa id
argument is a zone ID.
The
.Fn priocntl
function applies to all LWPs with this zone ID.
.It Dv P_CTID
The
.Fa id
argument is a process contract ID.
The
.Fn priocntl
function applies to all LWPs with this process contract ID.
.El
.Pp
An
.Fa id
value of
.Dv P_MYID
can be used in conjunction with the
.Fa idtype
value to specify the LWP ID, parent process ID, process group ID, session ID,
task ID, class ID, user ID, group ID, project ID, zone ID, or process contract
ID of the calling LWP.
.Pp
To change the scheduling parameters of an LWP
.Po using the
.Dv PC_SETPARMS
or
.Dv PC_SETXPARMS
command as explained below
.Pc ,
the real or effective user ID of the LWP calling
.Fn priocntl
must match the real or the calling LWP must have sufficient privileges.
These are the minimum permission requirements enforced for all classes.
An individual class might impose additional permissions requirements when
setting LWPs to that class and/or when setting class-specific scheduling
parameters.
.Pp
A special SYS scheduling class exists for the purpose of scheduling the
execution of certain special system processes (such as the swapper process).
It is not possible to change the class of any LWP to SYS.
In addition, any processes in the SYS class that are included in a specified
set of processes are disregarded by
.Fn priocntl .
For example, an
.Fa idtype
of
.Dv P_UID
and an
.Fa id
value of 0 would specify all processes with a user
ID of 0 except processes in the SYS class and
.Po if changing the parameters using
.Dv PC_SETPARMS
or
.Dv PC_SETXPARMS Pc
the
.Xr init 1M
process.
.Pp
The
.Nm init
process is a special case.
For a
.Fn priocntl
call to change the class or other scheduling parameters of the init process
(process ID 1), it must be the only process specified by
.Fa idtype
and
.Fa id .
The
.Nm init
process can be assigned to any class configured on the system, but
the time-sharing class is almost always the appropriate choice.
.Po Other choices might be highly undesirable.
See the
.%T System Administration Guide: Basic Administration
for more information.
.Pc
.Pp
The data type and value of
.Fa arg
are specific to the type of command specified by
.Fa cmd .
.Pp
A
.Vt pcinfo_t
structure with the following members, defined in
.In sys/priocntl.h ,
is used by the
.Dv PC_GETCID
and
.Dv PC_GETCLINFO
commands.
.Bd -literal -offset indent
id_t pc_cid;                 /* Class id */
char pc_clname[PC_CLNMSZ];   /* Class name */
int  pc_clinfo[PC_CLINFOSZ]; /* Class information */
.Ed
.Pp
The
.Va pc_cid
member is a class ID returned by the
.Dv PC_GETCID
command.
.Pp
The null-terminated
.Va pc_clname
member is used to hold the class name:
.Pp
.Bl -tag -compact -width "MMMMM"
.It Dq RT
Realtime.
.It Dq TS
Time-sharing.
.It Dq IA
Interactive.
.It Dq FSS
Fair-share.
.It Dq FX
Fixed-priority.
.El
.Pp
The
.Va pc_clinfo
member is used to return data describing the attributes of a specific class.
The format of this data is class-specific and is described under the class
sections below.
.Pp
A
.Vt pcparms_t
structure with the following members, defined in
.In sys/priocntl.h ,
is used by the
.Dv PC_SETPARMS
and
.Dv PC_GETPARMS
commands.
.Bd -literal -offset indent
id_t pc_cid;                  /* LWP class */
int  pc_clparms[PC_CLPARMSZ]; /* Class-specific params */
.Ed
.Pp
The
.Va pc_cid
member is a class ID returned by the
.Dv PC_GETCID
command.
The special class ID
.Dv PC_CLNULL
can also be assigned to
.Va pc_cid
when using the
.Dv PC_GETPARMS
command as explained below.
.Pp
The
.Va pc_clparms
buffer holds class-specific scheduling parameters (described under the
appropriate sections below).
.Pp
The
.Dv PC_SETXPARMS
and
.Dv PC_GETXPARMS
commands exploit the varargs declaration of
.Fn priocntl .
The argument following the command code is a class name, the usable values
being the same as the ones defined above for
.Va pc_clname .
The parameters after the class name build a chain of
.Pq Va key , value
pairs, where the
.Va key
determines the meaning of the
.Va value
within the pair.
When using
.Dv PC_GETXPARMS ,
the
.Va value
associated with the
.Va key
is always a pointer to a scheduling parameter.
In contrast, when using
.Dv PC_SETXPARMS
the scheduling parameter is given as a direct value.
A
.Va key
value of 0 terminates the sequence and all further keys or values are ignored.
A repeated specification of the same key results in an error return and
.Va errno
set to
.Er EINVAL .
.Pp
The
.Dv PC_SETXPARMS
and
.Dv PC_GETXPARMS
commands are more flexible than
.Dv PC_SETPARMS
and
.Dv PC_GETPARMS
and should replace
.Dv PC_SETPARMS
and
.Dv PC_GETPARMS
on a long-term basis.
.Sh COMMANDS
The available
.Fn priocntl
commands for
.Fa cmd
are:
.Bl -tag -width Ds
.It Dv PC_ADMIN
This command provides functionality needed for the implementation of the
.Xr dispadmin 1M
utility.
It is not intended for general use by other applications.
.It Dv PC_DONICE
Set or get the nice value of the specified LWP(s) associated with the specified
process(es).
When this command is used with the
.Fa idtype
of
.Dv P_LWPID ,
it sets the nice value of the LWP.
The
.Fa arg
argument points to a
.Vt pcnice_t
structure.
The
.Va pc_val
member specifies the nice value and the
.Va pc_op
specifies the type of the operation.
.Pp
When
.Va pc_op
is set to
.Dv PC_GETNICE , Fn priocntl
sets the
.Va pc_val
to the highest priority (lowest numerical value) pertaining to any of the
specified LWPs.
.Pp
When
.Va pc_op
is set to
.Dv PC_SETNICE , Fn priocntl
sets the nice value of all LWPs in the specified set to the value specified in
the
.Va pc_val
member of the
.Vt pcnice_t
structure.
.Pp
If the calling LWP doesn't have appropriate permissions to set/get nice
values for one or more of the target LWPs,
the value -1 is returned and
.Va errno
is set to
.Er EPERM .
If
.Fn priocntl
encounters an error other than permissions, it does not continue through the
set of target LWPs and returns the error immediately.
.It Dv PC_GETCID
Get class ID and class attributes for a specific class given the class name.
The
.Fa idtype
and
.Fa id
arguments are ignored.
If
.Fa arg
is non-null, it points to a
.Vt pcinfo_t
structure.
The
.Va pc_clname
buffer contains the name of the class whose attributes you are getting.
.Pp
On success, the class ID is returned in
.Va pc_cid ,
the class attributes are returned in the
.Va pc_clinfo
buffer, and
.Fn priocntl
returns the total number of classes configured in the system (including the sys
class).
If the class specified by
.Va pc_clname
is invalid or is not currently configured,
.Fn priocntl
returns -1 with
.Va errno
set to
.Er EINVAL .
.Pp
If
.Fa arg
is
.Dv NULL , Fn priocntl
returns the number of configured classes without the attribute data.
.It Dv PC_GETCLINFO
Get class name and attributes for a specific class given class ID.
The
.Fa idtype
and
.Fa id
arguments are ignored.
If
.Fa arg
is non-null, it points to a
.Vt pcinfo_t
structure.
The
.Fa pc_cid
member is the class ID of the class whose attributes you are getting.
.Pp
On success, the class name is returned in the
.Va pc_clname
buffer, the class attributes are returned in the
.Va pc_clinfo
buffer, and
.Fn priocntl
returns the total number of classes configured in the system (including the sys
class).
.Pp
If
.Fa arg
is
.Dv NULL , Fn priocntl
returns the number of configured classes without the attribute data.
.It Dv PC_GETPARMS
Get the class and/or class-specific scheduling parameters of an LWP.
The
.Fa arg
member points to a
.Vt pcparms_t
structure.
.Pp
If
.Va pc_cid
specifies a configured class and a single LWP belonging to that class is
specified by the
.Fa idtype
and
.Fa id
values or the
.Vt procset
structure, then the scheduling parameters of that LWP are returned in the
.Va pc_clparms
buffer.
If the LWP specified does not exist or does not belong to the specified class,
.Fn priocntl
returns -1 with
.Va errno
set to
.Er ESRCH .
.Pp
If
.Va pc_cid
specifies a configured class and a set of LWPs is specified, the scheduling
parameters of one of the specified LWP belonging to the specified class are
returned in the
.Va pc_clparms
buffer and the
.Fn priocntl
call returns the process ID of the selected LWP.
The criteria for selecting an LWP to return in this case is class-dependent.
If none of the specified LWPs exist or none of them belong to the specified
class,
.Fn priocntl
returns -1 with
.Va errno
set to
.Er ESRCH .
.Pp
If
.Va pc_cid
is
.Dv PC_CLNULL
and a single LWP is specified, the class of the specified LWP is returned in
.Va pc_cid
and its scheduling parameters are returned in the
.Va pc_clparms
buffer.
.It Dv PC_GETXPARMS
Get the class or class-specific scheduling parameters of an LWP.
The class name
.Pq first argument after Dv PC_GETXPARMS
specifies the class and the
.Pq Va key, value
pair sequence contains a pointer to the class-specific parameters.
The keys and the types of the parameter data are described in the
class-specific sections below.
If the specified class is a configured class and a single LWP belonging to that
class is specified by the
.Fa idtype
and
.Fa id
values or the
.Vt procset
structure, then the scheduling parameters
of that LWP are returned in the given
.Pq Va key , value
pair buffers.
If the LWP specified does not exist or does not belong to the specified class,
.Fn priocntl
returns -1 and
.Va errno
is set to
.Er ESRCH .
.Pp
If the class name specifies a configured class and a set of LWPs is given, the
scheduling parameters of one of the specified LWPs belonging to the specified
class are returned and the
.Fn priocntl
call returns the process ID of the selected LWP.
The criteria for selecting an LWP to return in this case is class-dependent.
If none of the specified LWPs exist or none of them belong to the specified
class,
.Fn priocntl
returns -1 and
.Va errno
is set to
.Er ESRCH .
.Pp
If the class name is
.Dv NULL ,
a single process or LWP is specified and a
.Pq Va key , value
pair for a class name request is given,
.Fn priocntl
fills the buffer pointed to by value with the class name of the specified
process or LWP.
The key for the class name request is
.Dv PC_KY_CLNAME
and the class name buffer should be declared as:
.Pp
.Dl char pc_clname[PC_CLNMSZ]; /* Class name */
.It Dv PC_SETPARMS
Set the class and class-specific scheduling parameters of the specified LWP(s)
associated with the specified process(es).
When this command is used with
.Dv P_LWPID
as
.Fa idtype ,
it will set the class and class-specific scheduling parameters of the LWP.
The
.Fa arg
argument points to a
.Vt pcparms_t
structure.
The
.Va pc_cid
member specifies the class you are setting and the
.Va pc_clparms
buffer contains the class-specific parameters you are setting.
.Pp
When setting parameters for a set of LWPs,
.Fn priocntl
acts on the LWPs in the set in an implementation-specific order.
If
.Fn priocntl
encounters an error for one or more of the target processes, it might or might
not continue through the set of LWPs, depending on the nature of the error.
If the error is related to permissions
.Po Er EPERM Pc , Fn priocntl
continues through the LWP set, resetting the parameters for all target LWPs for
which the calling LWP has appropriate permissions.
.Fn priocntl
then returns -1 with
.Va errno
set to
.Er EPERM
to indicate that the operation failed for one or more of the target LWPs.
If
.Fn priocntl
encounters an error other than permissions, it does not continue through the
set of target LWPs and returns the error immediately.
.It Dv PC_SETXPARMS
Set the class and class-specific scheduling parameters of the specified LWP(s)
associated with the specified process(es).
When this command is used with
.Dv P_LWPID
as
.Fa idtype ,
it will set the class and class-specific scheduling parameters of the LWP.
The class name
.Pq first argument after Dv PC_SETXPARMS
specifies the class to be changed and the following
.Pq Va key, value
pair sequence contains the class-specific parameters to be changed.
Only those
.Pq Va key, value
pairs whose scheduling behavior is to change must be specified.
.Pp
When setting parameters for a set of LWPs,
.Fn priocntl
acts on the LWPs in the set in an implementation-specific order.
If
.Fn priocntl
encounters an error for one or more of the target processes, it might or might
not continue through the set of LWPs, depending on the nature of the error.
If the error is related to permissions
.Po Er EPERM Pc , Fn priocntl
continues to reset the parameters for all target LWPs where the calling LWP has
appropriate permissions.
.Fn priocntl
returns -1 and
.Va errno
is set to
.Er EPERM
when the operation failed for one or more of the target LWPs.
All errors other than
.Er EPERM
result in an immediate termination of
.Fn priocntl .
.El
.Sh REALTIME CLASS
The realtime class provides a fixed priority preemptive scheduling policy for
those LWPs requiring fast and deterministic response and absolute
user/application control of scheduling priorities.
If the realtime class is configured in the system, it should have exclusive
control of the highest range of scheduling priorities on the system.
This ensures that a runnable realtime LWP is given CPU service before any LWP
belonging to any other class.
.Pp
The realtime class has a range of realtime priority
.Pq Va rt_pri
values that can be assigned to an LWP within the class.
Realtime priorities range from 0 to
.Va x ,
where the value of
.Va x
is configurable and can be determined for a specific installation by using
.Dv PC_GETCID
or
.Dv PC_GETCLINFO .
.Pp
The realtime scheduling policy is a fixed priority policy.
The scheduling priority of a realtime LWP is never changed except as the result
of an explicit request by the user/application to change the
.Va rt_pri
value of the LWP.
.Pp
For an LWP in the realtime class, the
.Va rt_pri
value is, for all practical purposes, equivalent to the scheduling priority of
the LWP.
The
.Va rt_pri
value completely determines the scheduling priority of a realtime LWP relative
to other LWPs within its class.
Numerically higher
.Va rt_pri
values represent higher priorities.
Since the realtime class controls the highest range of scheduling priorities in
the system, it is guaranteed that the runnable realtime LWP with the highest
.Va rt_pri
value is always selected to run before any other LWPs in the system.
.Pp
In addition to providing control over priority,
.Fn priocntl
provides for control over the length of the time quantum allotted to the LWP in
the realtime class.
The time quantum value specifies the maximum amount of time an LWP can run
assuming that it does not complete or enter a resource or event wait state
.Pq Em sleep .
If another LWP becomes runnable at a higher priority, the currently running LWP
might be preempted before receiving its full time quantum.
.Pp
The realtime quantum signal can be used for the notification of runaway
realtime processes about the consumption of their time quantum.
Those processes, which are monitored by the realtime time quantum signal,
receive the configured signal in the event of time quantum expiration.
The default value (0) of the time quantum signal will denote no signal delivery
and a positive value will denote the delivery of the signal specified by the
value.
The realtime quantum signal can be set with
.Dv PC_SETXPARMS
and displayed with
.Dv PC_GETXPARMS
as explained below.
.Pp
The system's process scheduler keeps the runnable realtime LWPs on a set of
scheduling queues.
There is a separate queue for each configured realtime priority and all
realtime LWPs with a given
.Va rt_pri
value are kept together on the appropriate queue.
The LWPs on a given queue are ordered in FIFO order (that is, the LWP at the
front of the queue has been waiting longest for service and receives the CPU
first).
Realtime LWPs that wake up after sleeping, LWPs that change to the realtime
class from some other class, LWPs that have used their full time quantum, and
runnable LWPs whose priority is reset by
.Fn priocntl
are all placed at the back of the appropriate queue for their priority.
An LWP that is preempted by a higher priority LWP remains at the front of the
queue (with whatever time is remaining in its time quantum) and runs before any
other LWP at this priority.
Following a
.Xr fork 2
by a realtime LWP, the parent LWP continues to run while the child LWP
(which inherits its parent's
.Va rt_pri
value) is placed at the back of the queue.
.Pp
A
.Vt rtinfo_t
structure with the following members, defined in
.In sys/rtpriocntl.h ,
defines the format used for the attribute data for the realtime class.
.Pp
.Dl short rt_maxpri; /* Maximum realtime priority */
.Pp
.Dv PC_GETCID
and
.Dv PC_GETCLINFO
return realtime class attributes in the
.Va pc_clinfo
buffer in this format.
.Pp
The
.Va rt_maxpri
member specifies the configured maximum
.Va rt_pri
value for the realtime class.
If
.Va rt_maxpri
is
.Va x ,
the valid realtime priorities range from 0 to
.Va x .
.Pp
A
.Vt rtparms_t
structure with the following members, defined in
.In sys/rtpriocntl.h ,
defines the format used to specify the realtime class-specific scheduling
parameters of an LWP.
.Bd -literal -offset indent
short  rt_pri;     /* Real-Time priority */
uint_t rt_tqsecs;  /* Seconds in time quantum */
int    rt_tqnsecs; /* Additional nanoseconds in quantum */
.Ed
.Pp
When using
.Dv PC_SETPARMS
or
.Dv PC_GETPARMS ,
if
.Va pc_cid
specifies the realtime class, the data in the
.Va pc_clparms
buffer are in this format.
.Pp
These commands can be used to set the realtime priority to the specified value
or get the current
.Va rt_pri
value.
Setting the
.Va rt_pri
value of an LWP that is currently running or runnable (not sleeping) causes the
LWP to be placed at the back of the scheduling queue for the specified
priority.
The LWP is placed at the back of the appropriate queue regardless of whether
the priority being set is different from the previous
.Va rt_pri
value of the LWP.
A running LWP can voluntarily release the CPU and go to the back of the
scheduling queue at the same priority by resetting its
.Va rt_pri
value to its current realtime priority value.
To change the time quantum of an LWP without setting the priority or affecting
the LWP's position on the queue, the
.Va rt_pri
member should be set to the special value
.Dv RT_NOCHANGE ,
defined in
.In sys/rtpriocntl.h .
Specifying
.Dv RT_NOCHANGE
when changing the class of an LWP to realtime from some other class results in
the realtime priority being set to 0.
.Pp
For
.Dv PC_GETPARMS ,
if
.Va pc_cid
specifies the realtime class and more than one realtime LWP is specified, the
scheduling parameters of the realtime LWP with the highest
.Va rt_pri
value among the specified LWPs are returned and the LWP ID of this LWP is
returned by the
.Fn priocntl
call.
If there is more than one LWP sharing the highest priority, the one returned is
implementation-dependent.
.Pp
The
.Va rt_tqsecs
and
.Va rt_tqnsecs
members are used for getting or setting the time quantum associated with an LWP
or group of LWPs.
.Va rt_tqsecs
is the number of seconds in the time quantum and
.Va rt_tqnsecs
is the number of additional nanoseconds in the quantum.
For
example, setting
.Va rt_tqsecs
to
.Va 2
and
.Va rt_tqnsecs
to 500,000,000 (decimal) would result in a time quantum of two and one-half
seconds.
Specifying a value of 1,000,000,000 or greater in the
.Va rt_tqnsecs
member results in an error return with
.Va errno
set to
.Er EINVAL .
Although the resolution of the
.Va tq_nsecs
member is very fine, the specified time quantum length is rounded up by the
system to the next integral multiple of the system clock's resolution.
The maximum time quantum that can be specified is implementation-specific and
equal to
.Dv INT_MAX1
ticks.
The
.Dv INT_MAX
value is defined in
.In limits.h .
Requesting a quantum greater than this maximum results in an error return with
.Va errno
set to
.Er ERANGE ,
although infinite quantums can be requested using a special value as explained
below.
Requesting a time quantum of 0 by setting both
.Va rt_tqsecs
and
.Va rt_tqnsecs
to 0 results in an error return with
.Va errno
set to
.Er EINVAL .
.Pp
The
.Va rt_tqnsecs
member can also be set to one of the following special values defined in
.In sys/rtpriocntl.h ,
in which case the value of
.Va rt_tqsecs
is ignored:
.Bl -tag -width "RT_NOCHANGE"
.It Dv RT_TQINF
Set an infinite time quantum.
.It Dv RT_TQDEF
Set the time quantum to the default for this priority
.Pq see Xr rt_dptbl 4 .
.It Dv RT_NOCHANGE
Do not set the time quantum.
This value is useful when you wish to change the realtime priority of an LWP
without affecting the time quantum.
Specifying this value when changing the class of an LWP to realtime from some
other class is equivalent to specifying
.Dv RT_TQDEF .
.El
.Pp
The following
.Pq Va key, value
pairs are defined in
.In sys/rtpriocntl.h
for the realtime class:
.Bl -column "RT_KY_TQNSECS" "Value Type"
.It Sy Key           Ta Sy Value Type Ta Sy Description
.It Dv RT_KY_PRI     Ta Vt pri_t      Ta Realtime priority.
.It Dv RT_KY_TQSECS  Ta Vt uint_t     Ta Seconds in time quantum.
.It Dv RT_KY_TQNSECS Ta Vt int        Ta Nanoseconds in time quantum.
.It Dv RT_KY_TQSIG   Ta Vt int        Ta Realtime time quantum signal.
.El
.Pp
When using
.Dv PC_GETXPARMS
the value associated with the key is always a pointer to a scheduling
parameter of the value type shown in the table above.
In contrast, when using
.Dv PC_SETXPARMS ,
the scheduling parameter is given as a direct value.
.Pp
Using
.Dv PC_SETXPARMS
without a following
.Pq Va key , value
pair will set or reset all realtime scheduling parameters of the target
process(es) to their default values.
Changing the class of an LWP to realtime from some other class causes the
parameters to be set to their default values.
The default realtime priority
.Pq Dv RT_KY_PRI
is 0.
A default time quantum
.Pq Dv RT_TQDEF
is assigned to each priority class
.Pq see Xr rt_dptbl 4 .
The default realtime time quantum signal
.Pq Dv RT_KY_TQSIG
is 0.
.Pp
The value associated with
.Dv RT_KY_TQSECS
is the number of seconds in the time quantum.
The value associated with
.Dv RT_KY_TQNSECS
is the number of nanoseconds in the quantum.
Specifying a value of 1,000,000,000 or greater for the number of nanoseconds
results in an error return and
.Va errno
is set to
.Dv EINVAL .
The specified time quantum is rounded up by the system to the next integral
multiple of the system clock's resolution.
The maximum time
quantum that can be specified is implementation-specific and equal to
.Dv INT_MAX
ticks, defined in
.In limits.h .
Requesting a quantum greater than this maximum results in an error return and
.Va errno
is set to
.Er ERANGE .
If seconds
.Pq Dv RT_KY_TQSECS
but no nanoseconds
.Pq Dv RT_KY_TQNSECS
are supplied, the number of nanoseconds is set to 0.
If nanoseconds
.Pq Dv RT_KY_TQNSECS
but no seconds
.Pq Dv RT_KY_TQSECS
are supplied, the number of seconds is set to 0.
A time quantum of 0 (seconds and nanoseconds are 0) results in an error return
with
.Va errno
set to
.Er EINVAL .
Special values for
.Dv RT_KY_TQSECS
are
.Dv RT_TQINF
and
.Dv RT_TQDEF
(as described above).
.Dv PC_SETXPARMS
knows no special value
.Dv RT_NOCHANGE .
.Pp
To change the class of an LWP to realtime from any other class, the LWP
invoking
.Fn priocntl
must have sufficient privileges.
To change the priority or time quantum setting of a realtime LWP, the LWP
invoking
.Fn priocntl
must have sufficient privileges or must itself be a realtime LWP whose real or
effective user ID matches the real of effective user ID of the target LWP.
.Pp
The realtime priority and time quantum are inherited across
.Xr fork 2
and the
.Xr exec 2
family of functions.
When using the time quantum signal with a user-defined signal handler across
the exec functions, the new image must install an appropriate user-defined
signal handler before the time quantum expires.
Otherwise, unpredictable behavior might result.
.Sh TIME-SHARING CLASS
The time-sharing scheduling policy provides for a fair and effective allocation
of the CPU resource among LWPs with varying CPU consumption characteristics.
The objectives of the time-sharing policy are to provide good response time to
interactive LWPs and good throughput to CPU-bound jobs, while providing a
degree of user/application control over scheduling.
.Pp
The time-sharing class has a range of time-sharing user priority
.Po see Va ts_upri
below
.Pc values that can be assigned to LWPs within the class.
A
.Va ts_upri
value of 0 is defined as the default base priority for the time-sharing class.
User priorities range from
.Va -x
to
.Va +x
where the value of
.Va x
is configurable and can be determined for a specific installation by using
.Dv PC_GETCID
or
.Dv PC_GETCLINFO .
.Pp
The purpose of the user priority is to provide some degree of user/application
control over the scheduling of LWPs in the time-sharing class.
Raising or lowering the
.Va ts_upri
value of an LWP in the time-sharing class raises or lowers the scheduling
priority of the LWP.
It is not guaranteed, however, that an LWP with a higher
.Va ts_upri
value will run before one with a lower
.Va ts_upri
value, since the
.Va ts_upri
value is just one factor used to determine the scheduling priority of a
time-sharing LWP.
The system can dynamically adjust the internal scheduling priority of a
time-sharing LWP based on other factors such as recent CPU usage.
.Pp
In addition to the system-wide limits on user priority
.Po returned by
.Dv PC_GETCID
and
.Dv PC_GETCLINFO Pc
there is a per LWP user priority limit (see
.Va ts_uprilim
below) specifying the maximum
.Va ts_upri
value that can be set for a given LWP.
By default,
.Va ts_uprilim
is 0.
.Pp
The
.Vt tsinfo_t
structure with the following members, defined in
.In sys/tspriocntl.h ,
defines the format used for the attribute data for the time-sharing class.
.Pp
.Dl short ts_maxupri; /* Limits of user priority range */
.Pp
.Dv PC_GETCID
and
.Dv PC_GETCLINFO
return time-sharing class attributes in the
.Va pc_clinfo
buffer in this format.
.Pp
The
.Va ts_maxupri
member specifies the configured maximum user priority value for the
time-sharing class.
If
.Va ts_maxupri
is
.Va x ,
the valid range for both user priorities and user priority limits is from
.Va -x
to
.Va +x .
.Pp
The
.Vt tsparms_t
structure with the following members, defined in
.In sys/tspriocntl.h ,
defines the format used to specify the time-sharing class-specific scheduling
parameters of an LWP.
.Bd -literal -offset indent
short ts_uprilim; /* Time-Sharing user priority limit */
short ts_upri;    /* Time-Sharing user priority */
.Ed
.Pp
When using
.Dv PC_SETPARMS
or
.Dv PC_GETPARMS ,
if
.Va pc_cid
specifies the time-sharing class, the data in the
.Va pc_clparms
buffer is in this format.
.Pp
For
.Dv PC_GETPARMS ,
if
.Va pc_cid
specifies the time-sharing class and more than one time-sharing LWP is
specified, the scheduling parameters of the time-sharing LWP with the highest
.Va ts_upri
value among the specified LWPs is returned and the LWP ID of this LWP is
returned by the
.Fn priocntl
call.
If there is more than one LWP sharing the highest user priority, the one
returned is implementation-dependent.
.Pp
Any time-sharing LWP can lower its own ts_uprilim (or that of another LWP with
the same user ID).
Only a time-sharing LWP with sufficient privileges can raise a
.Va ts_uprilim .
When changing the class of an LWP to time-sharing from some other class,
sufficient privileges are required to set the initial
.Va ts_uprilim
to a value greater than 0.
Attempts by an unprivileged LWP to raise a
.Va ts_uprilim
or set an initial
.Va ts_uprilim
greater than 0 fail with a return value of -1 and
.Va errno
set to
.Er EPERM .
.Pp
Any time-sharing LWP can set its own ts_upri (or that of another LWP with
the same user ID) to any value less than or equal to the LWP's
.Va ts_uprilim .
Attempts to set the
.Va ts_upri
above the
.Va ts_uprilim
.Po and/or set the Va ts_uprilim
below the
.Va ts_upri Pc
result in the
.Va ts_upri
being set equal to the
.Va ts_uprilim .
.Pp
Either of the ts_uprilim or
.Va ts_upri
members can be set to the special value
.Dv TS_NOCHANGE ,
defined in
.In sys/tspriocntl.h ,
to set one of the values without affecting the other.
Specifying
.Dv TS_NOCHANGE
for the
.Va ts_upri
when the
.Va ts_uprilim
is being set to a value below the current
.Va ts_upri
causes the
.Va ts_upri
to be set equal to the
.Va ts_uprilim
being set.
Specifying
.Dv TS_NOCHANGE
for a parameter when changing the class of an LWP to time-sharing (from some
other class) causes the parameter to be set to a default value.
The default value for the
.Va ts_uprilim
is 0 and the default for the
.Va ts_upri
is to set it equal to the
.Va ts_uprilim
that is being set.
.Pp
The following
.Pq Va key, value
pairs are defined in
.In sys/tspriocntl.h
for the time-sharing class:
.Bl -column "RT_KY_TQNSECS" "Value Type"
.It Sy Key           Ta Sy Value Type Ta Sy Description
.It Dv TS_KY_UPRILIM Ta Vt pri_t      Ta User priority limit.
.It Dv TS_KY_UPRI    Ta Vt pri_t      Ta User priority.
.El
.Pp
When using
.Dv PC_GETXPARMS ,
the value associated with the key is always a pointer to a scheduling parameter
of the value type in the table above.
In contrast, when using
.Dv PC_SETXPARMS
the scheduling parameter is given as a direct value.
.Pp
Using
.Dv PC_SETXPARMS
and without a following
.Pq Va key , value
pair will set or reset all time-sharing scheduling parameters of the target
.Xr process es
to their default values.
Changing the class of an LWP to time-sharing from some other class causes the
parameters to be set to their default values.
The default value for the user priority limit
.Pq Dv TS_KY_UPRILIM
is 0.
The default value for the user priority
.Pq Dv TS_KY_UPRI
is equal to the user priority limit
.Pq Dv TS_KY_UPRILIM
that is being set.
.Pp
.Dv PC_SETXPARMS
knows no special value
.Dv TS_NOCHANGE .
.Pp
The time-sharing user priority and user priority limit are inherited across
.Xr fork 2
and the
.Xr exec 2
family of functions.
.Sh INTERACTIVE CLASS
The interactive scheduling policy is a variation on the time-sharing scheduling
policy.
All that can be said about the time-sharing scheduling policy is also
true for the interactive scheduling policy, with one addition: An LWP in the
interactive class with its
.Va ia_mode
value set to
.Dv IA_SET_INTERACTIVE
has its time-sharing priority boosted by
.Dv IA_BOOST Pq 10 .
.Pp
An
.Vt iainfo_t
structure with the following members, defined in
.In sys/iapriocntl.h ,
defines the format used for the attribute data for the interactive class.
.Pp
.Dl short ia_maxupri; /* Limits of user priority range */
.Pp
.Dv PC_GETCID
and
.Dv PC_GETCLINFO
return interactive class attributes in the
.Va pc_clinfo
buffer in this format.
.Pp
The
.Va ia_maxupri
member specifies the configured maximum user priority value for the interactive
class.
If
.Va ia_maxupri
is
.Va x ,
the valid range for both user priorities and user priority limits is from
.Va -x
to
.Va +x .
.Pp
A iaparms_t structure with the following members, defined in
.In sys/iapriocntl.h ,
defines the format used to specify the interactive class-specific scheduling
parameters of an LWP.
.Bd -literal -offset indent
short ia_uprilim; /* Interactive user priority limit */
short ia_upri;    /* Interactive user priority */
int   ia_mode;    /* interactive on/off */
.Ed
.Pp
When using
.Dv PC_SETPARMS
or
.Dv PC_GETPARMS ,
if
.Va pc_cid
specifies the interactive class, the data in the
.Va pc_clparms
buffer is in this format.
.Pp
For
.Dv PC_GETPARMS ,
if
.Va pc_cid
specifies the interactive class and more than one interactive LWP is specified,
the scheduling parameters of the interactive LWP with the highest
.Va ia_upri
value among the specified LWPs is returned and the LWP ID of this LWP is
returned by the
.Fn priocntl
call.
If there is more than one LWP sharing the highest user priority, the one
returned is implementation-dependent.
.Pp
All that is said above in the
.Sx TIME-SHARING CLASS
section concerning manipulation of
.Va ts_uprilim
and
.Va ts_upri
applies equally to manipulations of
.Va ia_uprilim
and
.Va ia_upri
in the interactive class.
.Pp
When using
.Dv PC_SETPARMS ,
the
.Va ia_mode
member must be set to one of the values
.Dv IA_SET_INTERACTIVE , IA_INTERACTIVE_OFF
or
.Dv IA_NOCHANGE ,
defined in
.In sys/iapriocntl.h ,
to set the interactive mode on or off or to make no change to the interactive
mode.
.Pp
The following
.Pq Va key, value
pairs are defined in
.In sys/iapriocntl.h
for the interactive class:
.Bl -column "RT_KY_TQNSECS" "Value Type"
.It Sy Key           Ta Sy Value Type Ta Sy Description
.It Dv IA_KY_UPRILIM Ta Vt pri_t      Ta User priority limit.
.It Dv IA_KY_UPRI    Ta Vt pri_t      Ta User priority.
.It Dv IA_KY_MODE    Ta Vt int        Ta Interactive mode.
.El
.Pp
When using
.Dv PC_GETXPARMS ,
the value associated with the key is always a pointer to a scheduling parameter
of the value type in the table above.
In contrast, when using
.Dv PC_SETXPARMS ,
the scheduling parameter is given as a direct value.
.Pp
Using
.Dv PC_SETXPARMS
and without a following
.Pq Va key , value
pair will set or reset all interactive scheduling parameters of the target
process(es) to their default values.
Changing the class of an LWP to interactive from some other class causes the
parameters to be set to their default values.
The default value for the user priority limit
.Pq Dv IA_KY_UPRILIM
is 0.
The default value for the user priority
.Pq Dv IA_KY_UPRI
is equal to the user priority limit
.Pq Dv IA_KY_UPRILIM
that is being set.
The default value for the interactive mode
.Pq Dv IA_KY_MODE
is
.Dv IA_SET_INTERACTIVE .
.Pp
.Dv PC_SETXPARMS
knows no special value
.Dv IA_NOCHANGE .
.Sh FAIR-SHARE CLASS
The fair-share scheduling policy provides a fair allocation of CPU resources
among projects, independent of the number of processes they contain.
Projects are given "shares" to control their quota of CPU resources.
See
.Xr FSS 7
for more information about how to configure shares.
.Pp
The fair share class supports the notion of per-LWP user priority
.Po see Va fss_upri
below
.Pc
values for compatibility with the time-sharing scheduling class.
An
.Va fss_upri
value of 0 is defined as the default base priority for
the fair-share class.
User priorities range from
.Va -x
to
.Va +x
where the value of
.Va x
is configurable and can be determined for a specific installation by using
.Dv PC_GETCID
or
.Dv PC_GETCLINFO .
.Pp
The purpose of the user priority is to provide some degree of user/application
control over the scheduling of LWPs in the fair-share class.
Raising the
.Va fss_upri
value of an LWP in the fair-share class tells the scheduler to give this LWP
more CPU time slices, while lowering the
.Va fss_upri
value tells the scheduler to give it less CPU slices.
It is not guaranteed, however, that an LWP with a higher
.Va fss_upri
value will run before one with a lower
.Va fss_upri
value.
This is because the
.Va fss_upri
value is just one
factor used to determine the scheduling priority of a fair-share LWP.
The system can dynamically adjust the internal scheduling priority of a
fair-share LWP based on other factors such as recent CPU usage.
The fair-share scheduler attempts to provide an evenly graded effect across the
whole range of user priority values.
.Pp
User priority values do not interfere with project shares.
That is, changing a user priority value of a process does not have any effect
on its project CPU entitlement, which is based on the number of shares it is
allocated in comparison with other projects.
.Pp
In addition to the system-wide limits on user priority
.Po returned by
.Dv PC_GETCID
and
.Dv PC_GETCLINFO Pc ,
there is a per-LWP user priority limit
.Po see
.Va fss_uprilim
below
.Pc
that specifies the maximum
.Va fss_upri
value that can be set for a given LWP.
By default,
.Va fss_uprilim
is 0.
.Pp
A
.Vt fssinfo_t
structure with the following members, defined in
.In sys/fsspriocntl.h ,
defines the format used for the attribute data for the fair-share class.
.Pp
.Dl short fss_maxupri; /* Limits of user priority range */
.Pp
.Dv PC_GETCID
and
.Dv PC_GETCLINFO
return fair-share class attributes in the
.Va pc_clinfo
buffer in this format.
.Pp
.Va fss_maxupri
specifies the configured maximum user priority value for the fair-share class.
If
.Va fss_maxupri
is
.Va x ,
the valid range for both user priorities and user priority limits is from
.Va -x
to
.Va +x .
.Pp
A
.Vt fssparms_t
structure with the following members, defined in
.In sys/fsspriocntl.h ,
defines the format used to specify the fair-share class-specific scheduling
parameters of an LWP.
.Bd -literal -offset indent
short fss_uprilim; /* Fair-share user priority limit */
short fss_upri;    /* Fair-share user priority */
.Ed
.Pp
When using
.Dv PC_SETPARMS
or
.Dv PC_GETPARMS ,
if
.Va pc_cid
specifies the fair-share class, the data in the
.Va pc_clparms
buffer is in this format.
.Pp
For
.Dv PC_GETPARMS ,
if
.Va pc_cid
specifies the fair-share class and more than one fair-share LWP is specified,
the scheduling parameters of the fair-share LWP with the highest
.Va fss_upri
value among the specified LWPs is returned and the LWP ID of this LWP is
returned by the
.Fn priocntl
call.
If there is more than one LWP sharing the highest user priority, the one
returned is implementation-dependent.
.Pp
Any fair-share LWP can lower its own fss_uprilim (or that of another LWP with
the same user ID).
Only a fair-share LWP with sufficient privileges can raise an
.Va fss_uprilim .
When changing the class of an LWP to fair-share from some other class,
sufficient privileges are required to enter the FSS class or to set the initial
fss_uprilim to a value greater than 0.
Attempts by an unprivileged LWP to raise an fss_uprilim or set an initial
.Va fss_uprilim
greater than 0 fail with a return value of -1 and
.Va errno
set to
.Er EPERM .
.Pp
Any fair-share LWP can set its own
.Va fss_upri
(or that of another LWP with the same user ID) to any value less than or equal
to the LWP's
.Va fss_uprilim .
Attempts to set the
.Va fss_upri
above the
.Va fss_uprilim
.Po and/or set the Va fss_uprilim
below the
.Va fss_upri
.Pc
result in the
.Va fss_upri
being set equal to the
.Va fss_uprilim .
.Pp
Either of the
.Va fss_uprilim
or
.Va fss_upri
members can be set to the special value
.Dv FSS_NOCHANGE Pq defined in In sys/fsspriocntl.h
to set one of the values without affecting the other.
Specifying
.Dv FSS_NOCHANGE
for the
.Va fss_upri
when the
.Va fss_uprilim
is being set to a value below
the current
.Va fss_upri
causes the
.Va fss_upri
to be set equal to the
.Va fss_uprilim
being set.
Specifying
.Dv FSS_NOCHANGE
for a parameter when changing the class of an LWP to fair-share (from some
other class) causes the parameter to be set to a default value.
The default value for the
.Va fss_uprilim
is 0 and the default for the
.Va fss_upri
is to set it equal to the
.Va fss_uprilim
which is being set.
.Pp
The fair-share user priority and user priority limit are inherited across
.Xr fork 2
and the
.Xr exec 2
family of functions.
.Sh FIXED-PRIORITY CLASS
The fixed-priority class provides a fixed-priority preemptive scheduling policy
for those LWPs requiring that the scheduling priorities do not get dynamically
adjusted by the system and that the user/application have control of the
scheduling priorities.
.Pp
The fixed-priority class has a range of fixed-priority user priority
.Po see
.Va fx_upri
below
.Pc values that can be assigned to LWPs within the class.
A
.Va fx_upri
value of 0 is defined as the default base priority for the fixed-priority
class.
User priorities range from 0 to
.Va x
where the value of
.Va x
is configurable and can be determined for a specific installation by using
.Dv PC_GETCID
or
.Dv PC_GETCLINFO .
.Pp
The purpose of the user priority is to provide user/application control over
the scheduling of processes in the fixed-priority class.
For processes in the fixed-priority class, the
.Va fx_upri
value is, for all practical purposes, equivalent to the scheduling priority of
the process.
The
.Va fx_upri
value completely determines the scheduling priority of a fixed-priority process
relative to other processes within its class.
Numerically higher
.Va fx_upri
values represent higher priorities.
.Pp
In addition to the system-wide limits on user priority
.Po returned by
.Dv PC_GETCID
and
.Dv PC_GETCLINFO Pc ,
there is a per-LWP user priority limit
.Po
see
.Dv fx_uprilim
below
.Pc that specifies the maximum
.Va fx_upri
value that can be set for a given LWP.
By default,
.Va fx_uprilim
is 0.
.Pp
A structure with the following member
.Pq defined in In sys/fxpriocntl.h
defines the format used for the attribute data for the fixed-priority class.
.Pp
.Dl pri_t fx_maxupri; /* Maximum user priority */
.Pp
.Dv PC_GETCID
and
.Dv PC_GETCLINFO
return fixed-priority class attributes in the
.Va pc_clinfo
buffer in this format.
.Pp
The
.Va fx_maxupri
member specifies the configured maximum user priority value for the
fixed-priority class.
If
.Va fx_maxupri
is
.Va x ,
the valid range for both user priorities and user priority limits is from 0 to
.Va x .
.Pp
A structure with the following members
.Pq defined in In sys/fxpriocntl.h
defines the format used to specify the fixed-priority class-specific scheduling
parameters of an LWP.
.Bd -literal -offset indent
pri_t  fx_upri;    /* Fixed-priority user priority */
pri_t  fx_uprilim; /* Fixed-priority user priority limit */
uint_t fx_tqsecs;  /* seconds in time quantum */
int    fx_tqnsecs; /* additional nanosecs in time quant */
.Ed
.Pp
When using
.Dv PC_SETPARMS
or
.Dv PC_GETPARMS ,
if
.Va pc_cid
specifies the fixed-priority class, the data in the
.Va pc_clparms
buffer is in this format.
.Pp
For
.Dv PC_GETPARMS
if
.Va pc_cid
specifies the fixed-priority class and more than one fixed-priority LWP is
specified, the scheduling parameters of the fixed-priority LWP with the highest
.Va fx_upri
value among the specified LWPs is returned and the LWP ID of this LWP is
returned by the
.Fn priocntl
call.
If there is more than one LWP sharing the highest user priority, the one
returned is implementation-dependent.
.Pp
Any fixed-priority LWP can lower its own
.Va fx_uprilim
(or that of another LWP with the same user ID).
Only a fixed-priority LWP with sufficient privileges can raise a
.Va fx_uprilim .
When changing the class of an LWP to fixed-priority from some other class,
sufficient privileges are required to set the initial
.Va fx_uprilim
to a value greater than 0.
Attempts by an unprivileged LWP to raise a
.Va fx_uprilim
or set an initial
.Va fx_uprilim
greater than 0 fail with a return value of -1 and
.Va errno
set to
.Er EPERM .
.Pp
Any fixed-priority LWP can set its own
.Va fx_upri
(or that of another LWP with the same user ID) to any value less than or equal
to the LWP's
.Va fx_uprilim .
Attempts to set the
.Va fx_upri
above the
.Va fx_uprilim
.Po and/or set the
.Va fx_uprilim
below the
.Va fx_upri Pc
result in the
.Va fx_upri
being set equal to the
.Va fx_uprilim .
.Pp
Either of the
.Va fx_uprilim
or
.Va fx_upri
members can be set to the special value
.Dv FX_NOCHANGE Pq defined in In <sys/fxpriocntl.h
to set one of the values without affecting the other.
Specifying
.Dv FX_NOCHANGE
for
the
.Va fx_upri
when the
.Va fx_uprilim
is being set to a value below the
current
.Va fx_upri
causes the
.Va fx_upri
to be set equal to the
.Va fx_uprilim
being set.
Specifying
.Dv FX_NOCHANGE
for a parameter when changing the class of an LWP to fixed-priority (from some
other class) causes the parameter to be set to a default value.
The default value for the
.Va fx_uprilim
is 0 and the default for the
.Va fx_upri
is to set it equal to the
.Va fx_uprilim
that is being set.
The default for time quantum is dependent on the
.Va fx_upri
and on the system configuration; see
.Xr fx_dptbl 4 .
.Pp
The
.Va fx_tqsecs
and
.Va fx_tqnsecs
members are used for getting or
setting the time quantum associated with an LWP or group of LWPs.
.Va fx_tqsecs
is the number of seconds in the time quantum and
.Va fx_tqnsecs
is the number of additional nanoseconds in the quantum.
For
example, setting
.Va fx_tqsecs
to 2 and
.Va fx_tqnsecs
to 500,000,000 (decimal) would result in a time quantum of two and one-half
seconds.
Specifying a value of 1,000,000,000 or greater in the
.Va fx_tqnsecs
member
results in an error return with
.Va errno
set to
.Er EINVAL .
Although the resolution of the
.Va tq_nsecs
member is very fine, the specified time quantum length is rounded up by the
system to the next integral multiple of the system clock's resolution.
The maximum time quantum that can be specified is implementation-specific and
equal to
.Dv INT_MAX
ticks
.Pq defined in In limits.h .
Requesting a quantum greater than this maximum results in an error return with
.Va errno
set to
.Er ERANGE ,
although infinite quantums can be requested using a special value as explained
below.
Requesting a time quantum of 0
.Po setting both Va fx_tqsecs
and
.Va fx_tqnsecs
to 0
.Pc
results in an error return with
.Va errno
set to
.Dv EINVAL .
.Pp
The
.Va fx_tqnsecs
member can also be set to one of the following special values
.Pq defined in In sys/fxpriocntl.h ,
in which case the value of
.Va fx_tqsecs
is ignored:
.Bl -tag -width "FX_NOCHANGE"
.It Dv FX_TQINF
Set an infinite time quantum.
.It Dv FX_TQDEF
Set the time quantum to the default for this priority
.Pq see Xr fx_dptbl 4 .
.It Dv FX_NOCHANGE
Do not set the time quantum.
This value is useful in changing the user priority of an LWP without affecting
the time quantum.
Specifying this value when changing the class of an LWP to fixed-priority from
some other class is equivalent to specifying
.Dv FX_TQDEF .
.El
.Pp
The following
.Pq Va key, value
pairs are defined in
.In sys/fxpriocntl.h
for the fixed-priority class:
.Bl -column "RT_KY_TQNSECS" "Value Type"
.It Sy Key           Ta Sy Value Type Ta Sy Description
.It Dv FX_KY_UPRILIM Ta Vt pri_t      Ta User priority limit.
.It Dv FX_KY_UPRI    Ta Vt pri_t      Ta User priority.
.It Dv FX_KY_TQSECS  Ta Vt uint_t     Ta Seconds in time quantum.
.It Dv FX_KY_TQNSECS Ta Vt int        Ta Nanoseconds in time quantum.
.El
.Pp
When using
.Dv PC_GETXPARMS ,
the value associated with the key is always a pointer to a scheduling parameter
of the value type shown in the table above.
In contrast, when using
.Dv PC_SETXPARMS ,
the scheduling parameter is given as a direct value.
.Pp
Using
.Dv PC_SETXPARMS
and without a following
.Pq Va key , value
pair will set or reset all realtime scheduling parameters of the target
process(es) to their default values.
Changing the class of an LWP to fixed-priority from some other class causes the
parameters to be set to their default values.
The default value for the user priority limit
.Pq Dv FX_KY_UPRILIM
is 0.
The default value for the user priority
.Pq Dv FX_KY_UPRI
is equal to the user priority limit
.Pq Dv FX_KY_UPRILIM
that is being set.
A default time quantum
.Pq Dv FX_TQDEF
is assigned to each priority class
.Pq see Xr fx_dptbl 4 .
.Pp
The value associated with
.Dv FX_KY_TQSECS
is the number of seconds in the
time quantum.
The value associated with
.Dv FX_KY_TQNSECS
is the number of nanoseconds in the quantum.
Specifying a value of 1,000,000,000 or greater for the number of nanoseconds
results in an error return and
.Va errno
is set to
.Er EINVAL .
The specified time quantum is rounded up by the system to the next integral
multiple of the system clock's resolution.
The maximum time quantum that can be specified is implementation-specific and
equal to
.Dv INT_MAX
ticks, defined in
.In limits.h .
Requesting a quantum greater than this maximum results in an error return and
.Va errno
is set to
.Er ERANGE .
If seconds
.Pq Dv FX_KY_TQSECS
but no nanoseconds
.Pq Dv FX_KY_TQNSECS
are supplied, the number of nanoseconds is set to 0.
If nanoseconds
.Pq Dv FX_KY_TQNSECS
but no seconds
.Pq Dv FX_KY_TQSECS
are supplied, the number of seconds is set to 0.
A time quantum of 0 (seconds and nanoseconds are 0) results in an error return
with
.Va errno
set to
.Er EINVAL .
Special values for
.Dv FX_KY_TQSECS
are
.Dv FX_TQINF
and
.Dv FX_TQDEF Pq as described above .
.Dv PC_SETXPARMS
knows no special value
.Dv FX_NOCHANGE .
.Pp
The fixed-priority user priority and user priority limit are inherited across
.Xr fork 2
and the
.Xr exec 2
family of functions.
.Sh RETURN VALUES
Unless otherwise noted above,
.Fn priocntl
returns 0 on success.
On failure,
.Fn priocntl
returns -1 and sets the global variabl
.Va errno
to indicate the error.
.Sh ERRORS
The
.Fn priocntl
function will fail if:
.Bl -tag -width Er
.It Er EAGAIN
An attempt to change the class of an LWP failed because of insufficient
resources other than memory (for example, class-specific kernel data
structures).
.It Er EFAULT
One of the arguments points to an illegal address.
.It Er EINVAL
The argument
.Fa cmd
was invalid, an invalid or unconfigured class was specified, or one of the
parameters specified was invalid.
.It Er ENOMEM
An attempt to change the class of an LWP failed because of insufficient memory.
.It Er EPERM
The
.Brq Dv PRIV_PROC_PRIOCNTL
privilege is not asserted in the effective set of the calling LWP.
.Pp
The calling LWP does not have sufficient privileges to affect the target LWP.
.It Er ERANGE
The requested time quantum is out of range.
.It Er ESRCH
None of the specified LWPs exist.
.El
.Sh SEE ALSO
.Xr priocntl 1 ,
.Xr dispadmin 1M ,
.Xr init 1M ,
.Xr exec 2 ,
.Xr fork 2 ,
.Xr nice 2 ,
.Xr priocntlset 2 ,
.Xr fx_dptbl 4 ,
.Xr process 4 ,
.Xr rt_dptbl 4 ,
.Xr privileges 5
.Rs
.%T System Administration Guide: Basic Administration
.Re
.Rs
.%T Programming Interfaces Guide
.Re
