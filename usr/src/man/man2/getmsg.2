.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\"
.\" Copyright 1989 AT&T
.\" Copyright (c) 2003, Sun Microsystems, Inc. All Rights Reserved
.\"
.Dd November 1, 2001
.Dt GETMSG 2
.Os
.Sh NAME
.Nm getmsg , getpmsg
.Nd get next message off a stream
.Sh SYNOPSIS
.In stropts.h
.Ft int
.Fo getmsg
.Fa "int fildes"
.Fa "struct strbuf *restrict ctlptr"
.Fa "struct strbuf *restrict dataptr"
.Fa "int *restrict flagsp"
.Fc
.Ft int
.Fo getpmsg
.Fa "int fildes"
.Fa "struct strbuf *restrict ctlptr"
.Fa "struct strbuf *restrict dataptr"
.Fa "int *restrict bandp"
.Fa "int *restrict flagsp"
.Fc
.Sh DESCRIPTION
The
.Fn getmsg
function retrieves the contents of a message
.Pq see Xr Intro 2
located at the stream head read queue from a STREAMS file, and places the
contents into user specified buffer(s).
The message must contain either a data part, a control part, or both.
The data and control parts of the message are placed into separate buffers, as
described below.
The semantics of each part is defined by the STREAMS module that generated the
message.
.Pp
The
.Fn getpmsg
function behaved like
.Fn getmsg ,
but provides finer control over the priority of the messages received.
Except where noted, all information pertaining to
.Fn getmsg
also pertains to
.Fn getpmsg .
.Pp
The
.Fa fildes
argument specifies a file descriptor referencing an open
stream.
The
.Fa ctlptr
and
.Fa dataptr
arguments each point to a strbuf structure, which contains the following
members:
.Bd -literal -offset indent
int    maxlen;      /* maximum buffer length */
int    len;         /* length of data */
char   *buf;        /* ptr to buffer */
.Ed
.Pp
The
.Va buf
member points to a buffer into which the data or control
information is to be placed, and the
.Va maxlen
member indicates the maximum number of bytes this buffer can hold.
On return, the
.Va len
member contains the number of bytes of data or control information actually
received; 0 if there is a zero-length control or data part; or -1 if no data or
control information is present in the message.
The
.Fa flagsp
argument should point to an integer that indicates the type of message the user
is able to receive, as described below.
.Pp
The
.Fa ctlptr
argument holds the control part from the message and the
.Fa dataptr
argument  holds the data part from the message.
If
.Fa ctlptr Pq or Fa dataptr
is
.Dv NULL
or the maxlen member is -1, the control (or data) part of the message is not
processed and is left on the stream head read queue.
If
.Fa ctlptr Pq or Fa dataptr
is not
.Dv NULL
and there is no corresponding control (or data) part of the messages on the
stream head read queue,
.Va len
is set to -1.
If the
.Va maxlen
member
is set to 0 and there is a zero-length control (or data)  part, that
zero-length part is removed from the read queue and
.Fa len
is set to 0.
If the
.Va maxlen
member is set to 0 and there are more than zero bytes of
control (or data) information, that information is left on the read queue and
.Va len
is set to 0.
If the
.Va maxlen
member in
.Fa ctlptr
or
.Fa dataptr
is less than, respectively, the control or data part of the message,
.Va maxlen
bytes are retrieved.
In this case, the remainder of the message is left on the stream head read
queue and a non-zero return value is provided, as described in
.Sx RETURN VALUES .
.Pp
By default,
.Fn getmsg
processes the first available message on the stream head read queue.
A user may, however, choose to retrieve only high priority messages by setting
the integer pointed to by
.Fa flagsp
to
.Dv RS_HIPRI .
In this case,
.Fn getmsg
processes the next message only if it is a high priority message.
.Pp
If the integer pointed to by
.Fa flagsp
is 0,
.Fn getmsg
retrieves any message available on the stream head read queue.
In this case, on return, the integer pointed to by
.Fa flagsp
will be set to
.Dv RS_HIPRI
if a high priority message was retrieved, or to 0 otherwise.
.Pp
For
.Fn getpmsg ,
the
.Fa flagsp
argument points to a bitmask with the following mutually-exclusive flags
defined:
.Dv MSG_HIPRI , MSG_BAND
and
.Dv MSG_ANY .
Like
.Fn getmsg ,
.Fn getpmsg
processes the first available message on the stream head read queue.
A user may choose to retrieve only high-priority messages by setting the
integer pointed to by
.Fa flagsp
to
.Dv MSG_HIPRI
and the integer pointed to by
.Fa bandp
to 0.
In this case,
.Fn getpmsg
will only process the next message if it is a high-priority message.
In a similar manner, a user may choose to retrieve a message from a particular
priority band by setting the integer pointed to by
.Fa flagsp
to
.Dv MSG_BAND
and the integer pointed to by
.Fa bandp
to the priority band of interest.
In this case,
.Fn getpmsg
will only process the next message if it is in a priority band equal to, or
greater than, the integer pointed to by
.Fa bandp ,
or if it is a high-priority message.
If a user just wants to get the first message off the queue, the integer
pointed to by
.Fa flagsp
should be set to
.Dv MSG_ANY
and the integer pointed to by
.Fa bandp
should be set to 0.
On return, if the message retrieved was a high-priority message, the integer
pointed to by
.Fa flagsp
will be set to
.Dv MSG_HIPRI
and the integer pointed to by
.Fa bandp
will be set to 0.
Otherwise, the integer pointed to by
.Fa flagsp
will be set to
.Dv MSG_BAND
and the integer pointed to by
.Fa bandp
will be set to the priority band of the message.
.Pp
If
.Dv O_NDELAY
and
O_NONBLOCK
are clear,
.Fn getmsg
blocks until a message of the type specified by
.Fa flagsp
is available on the stream head read queue.
If
.Dv O_NDELAY
or
.Dv O_NONBLOCK
has been set and a message of the specified type is not present on the read
queue,
.Fn getmsg
fails and sets
.Va errno
to
.Er EAGAIN .
.Pp
If a hangup occurs on the stream from which messages are to be retrieved,
.Fn getmsg
continues to operate normally, as described above, until the stream head read
queue is empty.
Thereafter, it returns 0 in the
.Va len
member of
.Fa ctlptr
and
.Fa dataptr .
.Sh RETURN VALUES
Upon successful completion, a non-negative value is returned.
A return value of 0 indicates that a full message was read successfully.
A return value of
.Dv MORECTL
indicates that more control information is waiting for retrieval.
A return value of
.Dv MOREDATA
indicates that more data are waiting for retrieval.
A return value of
.Dv MORECTL | MOREDATA
indicates that both types of information remain.
Subsequent
.Fn getmsg
calls retrieve the remainder of the message.
However, if a message of higher priority has been received by the stream head
read queue, the next call to
.Fn getmsg
will retrieve that higher priority message before retrieving the remainder of
the previously received partial message.
.Sh ERRORS
The
.Fn getmsg
and
.Fn getpmsg
functions will fail if:
.Bl -tag -width Er
.It Bq Er EAGAIN
The O_NDELAY or O_NONBLOCK flag is set and no messages are
available.
.It Bq Er EBADF
The
.Fa fildes
argument is not a valid file descriptor open for reading.
.It Bq Er EBADMSG
Queued message to be read is not valid for
.Fn getmsg .
.It Bq Er EFAULT
The
.Fa ctlptr , dataptr , bandp
or
.Fa flagsp
argument points to an illegal address.
.It Bq Er EINTR
A signal was caught during the execution of the
.Fn getmsg
function.
.It Bq Er EINVAL
An illegal value was specified in
.Fa flagsp ,
or the stream referenced by
.Fa fildes
is linked under a multiplexor.
.It Bq Er ENOSTR
A stream is not associated with
.Fa fildes .
.El
.Pp
The
.Fn getmsg
function can also fail if a STREAMS error message had been received at the
stream head before the call to
.Fn getmsg .
The error returned is the value contained in the STREAMS error message.
.Sh INTERFACE STABILITY
.Sy Standard
.Sh SEE ALSO
.Xr Intro 2 ,
.Xr poll 2 ,
.Xr putmsg 2 ,
.Xr read 2 ,
.Xr write 2 ,
.Xr attributes 5 ,
.Xr standards 5
.Pp
.Rs
.%T STREAMS Programming Guide
.Re
