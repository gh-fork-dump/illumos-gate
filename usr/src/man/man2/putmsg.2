.\"
.\" Sun Microsystems, Inc. gratefully acknowledges The Open Group for
.\" permission to reproduce portions of its copyrighted documentation.
.\" Original documentation from The Open Group can be obtained online at
.\" http://www.opengroup.org/bookstore/.
.\"
.\" The Institute of Electrical and Electronics Engineers and The Open
.\" Group, have given us permission to reprint portions of their
.\" documentation.
.\"
.\" In the following statement, the phrase ``this text'' refers to portions
.\" of the system documentation.
.\"
.\" Portions of this text are reprinted and reproduced in electronic form
.\" in the SunOS Reference Manual, from IEEE Std 1003.1, 2004 Edition,
.\" Standard for Information Technology -- Portable Operating System
.\" Interface (POSIX), The Open Group Base Specifications Issue 6,
.\" Copyright (C) 2001-2004 by the Institute of Electrical and Electronics
.\" Engineers, Inc and The Open Group.  In the event of any discrepancy
.\" between these versions and the original IEEE and The Open Group
.\" Standard, the original IEEE and The Open Group Standard is the referee
.\" document.  The original Standard can be obtained online at
.\" http://www.opengroup.org/unix/online.html.
.\"
.\" This notice shall appear on any product containing this material.
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\"
.\" Copyright 1989 AT&T
.\" Portions Copyright (c) 1992, X/Open Company Limited.  All Rights Reserved.
.\" Copyright (c) 1996, Sun Microsystems, Inc.  All Rights Reserved.
.\"
.Dd November 1, 2003
.Dt PUTMSG 2
.Os
.Sh NAME
.Nm putmsg , putpmsg
.Nd send a message on a stream
.Sh SYNOPSIS
.In stropts.h
.Ft int
.Fo putmsg
.Fa "int fildes"
.Fa "const struct strbuf *ctlptr"
.Fa "const struct strbuf *dataptr"
.Fa "int flags"
.Fc
.Ft int
.Fo putpmsg
.Fa "int fildes"
.Fa "const struct strbuf *ctlptr"
.Fa "const struct strbuf *dataptr"
.Fa "int band"
.Fa "int flags"
.Fc
.Sh DESCRIPTION
The
.Fn putmsg
function creates a message from user-specified buffer(s) and sends the message
to a streams file.
The message may contain either a data part, a control part, or both.
The data and control parts to be sent are distinguished by placement in
separate buffers, as described below.
The semantics of each part is defined by the streams module that receives the
message.
.Pp
The
.Fn putpmsg
function does the same thing as
.Fn putmsg ,
but provides the user the ability to send messages in different priority bands.
Except where noted, all information pertaining to
.Fn putmsg
also pertains to
.Fn putpmsg .
.Pp
The
.Fa fildes
argument specifies a file descriptor referencing an open
stream.
The
.Fa ctlptr
and
.Fa dataptr
arguments each point to a
.Vt strbuf
structure, which contains the following
members:
.Bd -literal -offset indent
int      maxlen;     /* not used here */
int      len;        /* length of data */
void     *buf;       /* ptr to buffer */
.Ed
.Pp
The
.Fa ctlptr
argument points to the structure describing the control part,
if any, to be included in the message.
The
.Va buf
member in the
.Vt strbuf
structure points to the buffer where the control information resides, and the
.Va len
member indicates the number of bytes to be sent.
The
.Va maxlen
member is not used in
.Fn putmsg Pq see Xr getmsg 2 .
In a similar
manner,
.Fa dataptr
specifies the data, if any, to be included in the message.
The
.Fa flags
argument indicates what type of message should be sent, and is described later.
.Pp
To send the data part of a message,
.Fa dataptr
must not be
.Dv NULL ,
and
the
.Va len
member of
.Fa dataptr
must have a value of 0 or greater.
To send the control part of a message, the corresponding values must be set for
.Fa ctlptr .
No data (control) part is sent if either
.Fa dataptr Pq Fa ctlptr
is
.Dv NULL
or the
.Va len
member of
.Fa dataptr Pq Fa ctlptr
is negative.
.Pp
For
.Fn putmsg ,
if a control part is specified, and
.Fa flags
is set to
.Dv RS_HIPRI ,
a high priority message is sent.
If no control part is specified, and
.Fa flags
is set to
.Dv RS_HIPRI , Fn putmsg
fails and sets
.Va errno
to
.Dv EINVAL .
If
.Fa flags
is set to 0, a normal (non-priority) message is sent.
If no control part and no data part are specified, and
.Fa flags
is set to 0, no message is sent, and 0 is returned.
.Pp
The stream head guarantees that the control part of a message generated by
.Fn putmsg
is at least 64 bytes in length.
.Pp
For
.Fn putpmsg ,
the
.Fa flags
are different.
The
.Fa flags
argument is a
bitmask with the following mutually-exclusive
.Fa flags
defined:
.Dv MSG_HIPRI
and
.Dv MSG_BAND .
If
.Fa flags
is set to 0,
.Fn putpmsg
fails and sets
.Va errno
to
.Dv EINVAL .
If a control part is specified and
.Fa flags
is set to
.Dv MSG_HIPRI
and
.Fa band
is set to 0, a high-priority message is sent.
If
.Fa flags
is set to
.Dv MSG_HIPRI
and either no control part is specified or
.Fa band
is set to a non-zero value,
.Fn putpmsg
fails and sets
.Va errno
to
.Fa EINVAL .
If
.Fa flags
is set to
.Dv MSG_BAND ,
then a message is sent in the priority band specified by
.Fa band .
If a control part
and data part are not specified and
.Fa flags
is set to
.Dv MSG_BAND ,
no message is sent and 0 is returned.
.Pp
Normally,
.Fn putmsg
will block if the stream write queue is full due to internal flow control
conditions.
For high-priority messages,
.Fn putmsg
does not block on this condition.
For other messages,
.Fn putmsg
does not block when the write queue is full and
.Dv O_NDELAY
or
.Dv O_NONBLOCK
is set.
Instead, it fails and sets
.Va errno
to
.Dv EAGAIN .
.Pp
The
.Fn putmsg
or
.Fn putpmsg
function also blocks, unless prevented by lack of internal resources, waiting
for the availability of message blocks in the stream, regardless of priority or
whether
.Dv O_NDELAY
or
.Dv O_NONBLOCK
has been specified.
No partial message is sent.
.Sh RETURN VALUES
.Rv -std
.Sh ERRORS
The
.Fn putmsg
and
.Fn putpmsg
functions will fail if:
.Bl -tag -width Er
.It Bq Er EAGAIN
A non-priority message was specified, the
.Dv O_NDELAY
or
.Dv O_NONBLOCK
flag is set and the stream write queue is full due to internal flow control
conditions.
.It Bq Er EBADF
The
.Fa fildes
argument is not a valid file descriptor open for writing.
.It Bq Er EFAULT
The
.Fa ctlptr
or
.Fa dataptr
argument points to an illegal address.
.It Bq Er EINTR
A signal was caught during the execution of the
.Fn putmsg
function.
.It Bq Er EINVAL
An undefined value was specified in
.Fa flags ; flags
is set to
.Dv RS_HIPRI
and no control part was supplied; or the stream referenced by
.Fa fildes
is linked below a multiplexor.
.It Bq Er ENOSR
Buffers could not be allocated for the message that was to be created due to
insufficient streams memory resources.
.It Bq Er ENOSTR
The
.Fa fildes
argument is not associated with a stream.
.It Bq Er ENXIO
A hangup condition was generated downstream for the specified stream, or the
other end of the pipe is closed.
.It Bq Er EPIPE
.It Bq Er EIO
The
.Fa fildes
argument refers to a streams-based pipe and the other end of
the pipe is closed.
A
.Dv SIGPIPE
signal is generated for the calling thread.
This error condition occurs only with SUS-conforming applications.
See
.Xr standards 5 .
.It Bq Er ERANGE
The size of the data part of the message does not fall within the range
specified by the maximum and minimum packet sizes of the topmost stream module.
This value is also returned if the control part of the message is larger than
the maximum configured size of the control part of a message, or if the data
part of a message is larger than the maximum configured size of the data part
of a message.
.El
.Pp
In addition,
.Fn putmsg
and
.Fn putpmsg
will fail if the stream head had processed an asynchronous error before the
call.
In this case, the value of
.Va errno
does not reflect the result of
.Fn putmsg
or
.Fn putpmsg
but reflects the prior error.
.Pp
The
.Fn putpmsg
function will fail if:
.Bl -tag -width Er
.It Bq Er EINVAL
The
.Fa flags
argument is set to
.Dv MSG_HIPRI
and
.Fa band
is non-zero.
.El
.Sh INTERFACE STABILITY
.Sy Standard
.Sh SEE ALSO
.Xr getmsg 2 ,
.Xr Intro 2 ,
.Xr poll 2 ,
.Xr read 2 ,
.Xr write 2 ,
.Xr attributes 5 ,
.Xr standards 5
.Rs
.%T STREAMS Programming Guide
.Re
