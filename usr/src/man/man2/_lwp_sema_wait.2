.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\"
.\" Copyright (c) 1997, Sun Microsystems, Inc. All Rights Reserved
.\"
.Dd May 8, 1998
.Dt _LWP_SEMA_WAIT 2
.Os
.Sh NAME
.Nm _lwp_sema_wait , _lwp_sema_trywait , _lwp_sema_init , _lwp_sema_post
.Nd semaphore operations
.Sh SYNOPSIS
.In sys/lwp.h
.Ft int
.Fn _lwp_sema_wait "lwp_sema_t *sema"
.Ft int
.Fn _lwp_sema_trywait "lwp_sema_t *sema"
.Ft int
.Fn _lwp_sema_init "lwp_sema_t *sema" "int count"
.Ft int
.Fn _lwp_sema_post "lwp_sema_t *sema"
.Sh DESCRIPTION
Conceptually, a semaphore is an non-negative integer count that is atomically
incremented and decremented.
Typically this represents the number of resources
available.
The
.Fn _lwp_sema_init
function initializes the count,
.Fn _lwp_sema_post
atomically increments the count, and
.Fn _lwp_sema_wait
waits for the count to become greater than 0 and then atomically decrements it.
.Pp
LWP semaphores must be initialized before use.
The
.Fn _lwp_sema_init
function initializes the count associated with the LWP semaphore pointed to by
.Fa sema
to
.Fa count .
.Pp
The
.Fn _lwp_sema_wait
function blocks the calling LWP until the semaphore count becomes greater than
0 and then atomically decrements it.
.Pp
The
.Fn _lwp_sema_trywait
function atomically decrements the count if it is greater than zero.
Otherwise it returns an error.
.Pp
The
.Fn _lwp_sema_post
function atomically increments the semaphore count.
If there are any LWPs blocked on the semaphore, one is unblocked.
.Sh RETURN VALUES
Upon successful completion, the valueÂ 0 is returned;
otherwise an error value is returned.
.Pp
The
.Fn _lwp_sema_init ,
.Fn _lwp_sema_trywait ,
.Fn _lwp_sema_wait
and
.Fn _lwp_sema_post
functions will fail if:
.Bl -tag -width Er
.It Bq Er EINVAL
The
.Fa sema
argument points to an invalid semaphore.
.It Bq Er EFAULT
The
.Fa sema
argument points to an illegal address.
.El
.Pp
The
.Fn _lwp_sema_wait
function will fail if:
.Bl -tag -width Er
.It Bq Er EINTR
The function execution was interrupted by a signal or
.Xr fork 2 .
.El
.Pp
The
.Fn _lwp_sema_trywait
function will fail if:
.Bl -tag -width Er
.It Bq Er EBUSY
The function was called on a semaphore with a zero count.
.El
.Pp
The
.Fn _lwp_sema_post
function will fail if:
.Bl -tag -width Er
.It Bq Er EOVERFLOW
The value of the
.Fa sema
argument exceeds
.Dv SEM_VALUE_MAX .
.El
.Sh SEE ALSO
.Xr fork 2
