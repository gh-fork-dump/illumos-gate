.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\"
.\" Copyright 1989 AT&T
.\" Copyright (c) 2007, Sun Microsystems, Inc. All Rights Reserved
.\"
.Dd June 13, 2021
.Dt STAT 2
.Os
.Sh NAME
.Nm stat , lstat , fstat , fstatat
.Nd get file status
.Sh SYNOPSIS
.In fcntl.h
.In sys/types.h
.In sys/stat.h
.Ft int
.Fo stat
.Fa "const char *restrict path"
.Fa "struct stat *restrict buf"
.Fc
.Ft int
.Fo lstat
.Fa "const char *restrict path"
.Fa "struct stat *restrict buf"
.Fc
.Ft int
.Fo fstat
.Fa "int fildes"
.Fa "struct stat *buf"
.Fc
.Ft int
.Fo fstatat
.Fa "int fildes"
.Fa "const char *path"
.Fa "struct stat *buf"
.Fa "int flag"
.Fc
.Sh DESCRIPTION
The
.Fn stat
function obtains information about the file pointed to by
.Fa path .
Read, write, or execute permission of the named file is not required, but all
directories listed in the path name leading to the file must be searchable.
.Pp
The
.Fn lstat
function obtains file attributes similar to
.Fn stat ,
except when the named file is a symbolic link; in that case
.Fn lstat
returns information about the link, while
.Fn stat
returns information about the file the link references.
.Pp
The
.Fn fstat
function obtains information about an open file known by the file descriptor
.Fa fildes ,
obtained from a successful
.Xr open 2 , Xr creat 2 , Xr dup 2 , Xr fcntl 2 or Xr pipe 2
function.
If
.Fa fildes
references a shared memory object, the system updates in the
stat structure pointed to by the
.Fa buf
argument only the
.Va st_uid , st_gid , st_size
and
.Va st_mode
fields, and only
the
.Dv S_IRUSR , S_IWUSR , S_IRGRP , S_IWGRP , S_IROTH
and
.Dv S_IWOTH
file permission bits need be valid.
The system can update other fields and flags.
The
.Fn fstat
function updates any pending time-related fields before writing to the stat
structure.
.Pp
The
.Fn fstatat
function obtains file attributes similar to the
.Fn stat , Fn lstat
and
.Fn fstat
functions.
If the
.Fa path
argument is a relative
.Fa path ,
it is resolved relative to the
.Fa fildes
argument rather than the current working directory.
If
.Fa path
is absolute, the
.Fa fildes
argument is unused.
If the
.Fa fildes
argument has the special value
.Dv AT_FDCWD ,
relative paths are resolved from the current working directory.
If
.Dv AT_SYMLINK_NOFOLLOW
is set in the
.Fa flag
argument, the function behaves like
.Fn lstat
and does not automatically follow symbolic links.
See
.Xr fsattr 5 .
If
.Dv _ATTR_TRIGGER
is set in the
.Fa flag
argument and the vnode is a trigger mount point, the mount is performed and the
function returns the attributes of the root of the mounted filesystem.
.Pp
The
.Fa buf
argument is a pointer to a
.Vt stat
structure into which information is placed concerning the file.
The
.Vt stat
structure includes the following members:
.Bd -literal -offset indent
mode_t   st_mode;    /* File mode (see mknod(2)) */
ino_t    st_ino;     /* Inode number */
dev_t    st_dev;     /* ID of device containing */
                     /* a directory entry for this file */
dev_t    st_rdev;    /* ID of device */
                     /* This entry is defined only for */
                     /* char special or block special files */
nlink_t  st_nlink;   /* Number of links */
uid_t    st_uid;     /* User ID of the file's owner */
gid_t    st_gid;     /* Group ID of the file's group */
off_t    st_size;    /* File size in bytes */
time_t   st_atime;   /* Time of last access */
time_t   st_mtime;   /* Time of last data modification */
time_t   st_ctime;   /* Time of last file status change */
                     /* Times measured in seconds since */
                     /* 00:00:00 UTC, Jan. 1, 1970 */
long     st_blksize; /* Preferred I/O block size */
blkcnt_t st_blocks;  /* Number of 512 byte blocks allocated*/
char     st_fstype[_ST_FSTYPSZ];
                     /* Null-terminated type of filesystem */
.Ed
.Pp
Descriptions of structure members are as follows:
.Bl -tag -width "st_blksize"
.It Va st_mode
The mode of the file as described for the
.Fn mknod
function.
In addition
to the modes described in
.Xr mknod 2 ,
the mode of a file
can also be
.Dv S_IFSOCK
if the file is a socket,
.Dv S_IFDOOR
if the file is a door,
.Dv S_IFPORT
if the file is an event port or
.Dv S_IFLNK
if the file is a symbolic link.
.Dv S_IFLNK
can be returned either by
.Fn lstat
or by
.Fn fstatat
when the
.Dv AT_SYMLINK_NOFOLLOW
flag is set.
.It Va st_ino
This field uniquely identifies the file in a given file system.
The pair
.Va st_ino
and
.Va st_dev
uniquely identifies regular files.
.It Va st_dev
This field uniquely identifies the file system that contains the file.
Its value may be used as input to the
.Fn ustat
function to determine more information about this file system.
No other meaning is associated with this value.
.It Va st_rdev
This field should be used only by administrative commands.
It is valid only for block special or character special files and only has
meaning on the system where the file was configured.
.It Va st_nlink
This field should be used only by administrative commands.
.It Va st_uid
The user ID of the file's owner.
.It Va st_gid
The group ID of the file's group.
.It Va st_size
For regular files, this is the address of the end of the file.
For block special or character special, this is not defined.
See also
.Xr pipe 2 .
.It Va st_atime
Time when file data was last accessed.
Some of the functions that change this member are:
.Fn creat , Fn mknod , Fn pipe , Xr utime 2 and Xr read 2 .
.It Va st_mtime
Time when data was last modified.
Some of the functions that change this member are:
.Fn creat , Fn mknod , Fn pipe , Fn utime
and
.Xr write 2 .
.It Va st_ctime
Time when file status was last changed.
Some of the functions that change this
member are:
.Xr chmod 2 , Xr chown 2 , Xr creat 2 , Xr link 2 , Xr mknod 2 , Xr pipe 2 ,
.Xr rename 2 , Xr unlink 2 , Xr utime 2 and Xr write 2 .
.It Va st_blksize
A hint as to the "best" unit size for I/O operations.
This field is not defined for block special or character special files.
.It Va st_blocks
The total number of physical blocks of size 512 bytes actually allocated on
disk.
This field is not defined for block special or character special files.
.It Va st_fstype
A null-terminated string that uniquely identifies the type of the filesystem
that contains the file.
.El
.Sh RETURN VALUES
.Rv -std
.Sh ERRORS
The
.Fn stat , Fn fstat , Fn lstat
and
.Fn fstatat
functions will fail if:
.Bl -tag -width Er
.It Bq Er EIO
An error occurred while reading from the file system.
.It Bq Er EOVERFLOW
The file size in bytes or the number of blocks allocated to the file or the
file serial number cannot be represented correctly in the structure pointed to
by
.Fa buf .
.El
.Pp
The
.Fn stat , Fn lstat
and
.Fn fstatat
functions will fail if:
.Bl -tag -width Er
.It Bq Er EACCES
Search permission is denied for a component of the path prefix.
.It Bq Er EFAULT
The
.Fa buf
or
.Fa path
argument points to an illegal address.
.It Bq Er EINTR
A signal was caught during the execution of the
.Fn stat
or
.Fn lstat
function.
.It Bq Er ELOOP
A loop exists in symbolic links encountered during the resolution of the
.Fa path
argument.
.It Bq Er ENAMETOOLONG
The length of the
.Fa path
argument exceeds
.Brq Dv PATH_MAX ,
or the length of a path component exceeds
.Brq Dv NAME_MAX
while
.Dv _POSIX_NO_TRUNC
is in effect.
.It Bq Er ENOENT
A component of
.Fa path
does not name an existing file or
.Fa path
is an empty string.
.It Bq Er ENOLINK
The
.Fa path
argument points to a remote machine and the link to that machine
is no longer active.
.It Bq Er ENOTDIR
A component of the path prefix is not a directory, or the
.Fa fildes
argument does not refer to a valid directory when given a non-null relative
path.
.El
.Pp
The
.Fn fstat
and
.Fn fstatat
functions will fail if:
.Bl -tag -width Er
.It Bq Er EBADF
The
.Fa fildes
argument is not a valid open file descriptor.
.It Bq Er EFAULT
The buf argument points to an illegal address.
.It Bq Er EINTR
A signal was caught during the execution of the
.Fn fstat
function.
.It Bq Er ENOLINK
The
.Fa fildes
argument points to a remote machine and the link to that machine is no longer
active.
.El
.Pp
The
.Fn stat , Fn fstat
and
.Fn lstat
functions may fail if:
.Bl -tag -width Er
.It Bq Er EOVERFLOW
One of the members is too large to store in the stat structure pointed to
by
.Fa buf .
.El
.Pp
The
.Fn stat
and
.Fn lstat
functions may fail if:
.Bl -tag -width Er
.It Bq Er ELOOP
More than
.Brq Dv SYMLOOP_MAX
symbolic links were encountered during the resolution of the
.Fa path
argument.
.It Bq Er ENAMETOOLONG
As a result of encountering a symbolic link in resolution of the
.Fa path
argument, the length of the substituted pathname strings exceeds
.Brq Dv PATH_MAX .
.El
.Pp
The
.Fn stat
and
.Fn fstatat
functions may fail if:
.Bl -tag -width Er
.It Bq Er ENXIO
The
.Fa path
argument names a character or block device special file and the corresponding
I/O device has been retired by the fault management framework.
.El
.Sh EXAMPLES
The following example shows how to obtain file status information for a file
named
.Pa /home/cnd/mod1 .
The structure variable
.Va buffer
is defined for the
.Vt stat
structure.
.Bd -literal
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
struct stat buffer;
int         status;
\&...
status = stat("/home/cnd/mod1", &buffer);
.Ed
.Pp
The following example fragment gets status information for each entry in a
directory.
The call to the
.Fn stat
function stores file information in the
.Vt stat
structure pointed to by
.Va statbuf .
The lines that follow the
.Fn stat
call format the fields in the
.Vt stat
structure for presentation to the user of the program.
.Bd -literal
#include <sys/types.h>
#include <sys/stat.h>
#include <dirent.h>
#include <pwd.h>
#include <grp.h>
#include <time.h>
#include <locale.h>
#include <langinfo.h>
#include <stdio.h>
#include <stdint.h>

struct dirent *dp;
struct stat   statbuf;
struct passwd *pwd;
struct group  *grp;
struct tm     *tm;
char          datestring[256];
\&...
/* Loop through directory entries */
while ((dp = readdir(dir)) != NULL) {
    /* Get entry's information. */
    if (stat(dp->d_name, &statbuf) == -1)
    continue;

     /* Print out type, permissions, and number of links. */
     printf("%10.10s", sperm (statbuf.st_mode));
     printf("%4d", statbuf.st_nlink);

     /* Print out owners name if it is found using getpwuid(). */
     if ((pwd = getpwuid(statbuf.st_uid)) != NULL)
        printf(" %-8.8s", pwd->pw_name);
     else
        printf(" %-8d", statbuf.st_uid);

     /* Print out group name if it's found using getgrgid(). */
     if ((grp = getgrgid(statbuf.st_gid)) != NULL)
        printf(" %-8.8s", grp->gr_name);
     else
        printf(" %-8d", statbuf.st_gid);

     /* Print size of file. */
     printf(" %9jd", (intmax_t)statbuf.st_size);
     tm = localtime(&statbuf.st_mtime);

     /* Get localized date string. */
     strftime(datestring, sizeof(datestring),
     	nl_langinfo(D_T_FMT), tm);

     printf(" %s %s\en", datestring, dp->d_name);
}
.Ed
.Pp
The following example shows how to obtain file status information for a file
named
.Pa /home/cnd/mod1 .
The structure variable
.Va buffer
is defined for the
.Vt stat
structure.
The
.Pa /home/cnd/mod1
file is opened with read/write privileges and is passed to the open file
descriptor
.Va fildes .
.Bd -literal
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
struct stat buffer;
int         status;
\&...
fildes = open("/home/cnd/mod1", O_RDWR);
status = fstat(fildes, &buffer);
.Ed
.Pp
The following example shows how to obtain status information for a symbolic
link named
.Pa /modules/pass1 .
The structure variable
.Va buffer
is defined for the
.Vt stat
structure.
If the path argument specified the filename for the file pointed to by the
symbolic link
.Pq Pa /home/cnd/mod1 ,
the results of calling the function would be the same as those returned by a
call to the
.Fn stat
function.
.Bd -literal
#include <sys/stat.h>
struct stat buffer;
int         status;
\&...
status = lstat("/modules/pass1", &buffer);
.Ed
.Sh USAGE
If
.Fn chmod
or
.Fn fchmod
is used to change the file group owner permissions on a file with non-trivial
ACL entries, only the ACL mask is set to the new permissions and the group
owner permission bits in the file's mode field
.Pq defined in Xr mknod 2
are unchanged.
A non-trivial ACL entry is one whose meaning cannot be represented in the
file's mode field alone.
The new ACL mask permissions  might change the effective permissions for
additional users and groups that have ACL entries on the file.
.Pp
The
.Fn stat , Fn fstat
and
.Fn lstat
functions have transitional
interfaces for 64-bit file offsets.
See
.Xr lf64 5 .
.Sh INTERFACE STABILITY
.Sy Committed
.Sh MT-LEVEL
.Sy Async-Signal-Safe
.Sh STANDARDS
For
.Fn stat , Fn fstat
and
.Fn lstat
see standards(5).
.Sh SEE ALSO
.Xr access 2 ,
.Xr chmod 2 ,
.Xr chown 2 ,
.Xr creat 2 ,
.Xr dup 2 ,
.Xr link 2 ,
.Xr mknod 2 ,
.Xr pipe 2 ,
.Xr read 2 ,
.Xr time 2 ,
.Xr unlink 2 ,
.Xr utime 2 ,
.Xr write 2 ,
.Xr fattach 3C ,
.Xr stat.h 3HEAD ,
.Xr attributes 5 ,
.Xr fsattr 5 ,
.Xr lf64 5 ,
.Xr standards 5
