.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\"
.\" Copyright 1989 AT&T
.\" Copyright (c) 2007, Sun Microsystems, Inc. All Rights Reserved
.\"
.Dd April 10, 2007
.Dt SHMCTL 2
.Os
.Sh NAME
.Nm shmctl
.Nd shared memory control operations
.Sh SYNOPSIS
.In sys/types.h
.In sys/ipc.h
.In sys/shm.h
.Ft int
.Fn shmctl "int shmid" "int cmd" "struct shmid_ds *buf"
.Sh DESCRIPTION
The
.Fn shmctl
function provides a variety of shared memory control
operations as specified by
.Fa cmd .
The permission required for a shared
memory control operation is given as
.Brq Va token ,
where
.Va token
is the
type of permission needed.
The types of permission are interpreted as follows:
.Bd -literal -offset indent
00400	READ by user
00200	WRITE by user
00040	READ by group
00020	WRITE by group
00004	READ by others
00002	WRITE by others
.Ed
.Pp
See the
.Sy Shared Memory Operation Permissions
section of
.Xr Intro 2
for more information.
.Pp
The following operations require the specified tokens:
.Bl -tag -width "SHM_UNLOCK"
.It Dv IPC_STAT
Place the current value of each member of the data structure associated with
.Fa shmid
into the structure pointed to by
.Fa buf .
The contents of this
structure are defined in
.Xr Intro 2 . Brq Dv READ
.It Dv IPC_SET
Set the value of the following members of the data structure associated with
.Fa shmid
to the corresponding value found in the structure pointed to by
.Fa buf :
.Bd -literal -offset -indent
shm_perm.uid
shm_perm.gid
shm_perm.mode	/* access permission bits only */
.Ed
.Pp
This command can be executed only by a process that has appropriate privileges
or an effective user ID equal to the value of
.Va shm_perm.cuid
or
.Va shm_perm.uid
in the data structure associated with
.Fa shmid .
.It Dv IPC_RMID
Remove the shared memory identifier specified by
.Fa shmid
from the system.
The segment referenced by the identifier will be destroyed when all processes
with the segment attached have either detached the segment or exited.
If the segment is not attached to any process when
.Dv IPC_RMID
is invoked, it will be destroyed immediately.
This command can be executed only by a process that has appropriate privileges
or an effective user ID equal to the value of
.Va shm_perm.cuid
or
.Va shm_perm.ui
in
the data structure associated with
.Fa shmid .
.It Dv SHM_LOCK
Lock the shared memory segment specified by
.Fa shmid
in memory.
This command can be executed only by a process that has appropriate privileges.
.It Dv SHM_UNLOCK
Unlock the shared memory segment specified by
.Fa shmid .
This command can be executed only by a process that has appropriate privileges.
.El
.Pp
A shared memory segment must be explicitly removed using
.Dv IPC_RMID
before the system can deallocate it and the resources it uses.
.Sh RETURN VALUES
.Rv -std
.Sh ERRORS
The
.Fn shmctl
function will fail if:
.Bl -tag -width Er
.It Bq Er EACCES
The
.Fa cmd
argument is equal to
.Dv IPC_STAT
and
.Brq Dv READ
operation
permission is denied to the calling process.
.It Bq Er EFAULT
The
.Fa buf
argument points to an illegal address.
.It Bq Er EINVAL
The
.Fa shmid
argument is not a valid shared memory identifier; or the
.Fa cmd
argument is not a valid command or is
.Dv IPC_SET
and
.Va shm_perm.uid
or
.Va shm_perm.gid
is not valid.
.It Bq Er ENOMEM
The
.Fa cmd
argument is equal to
.Dv SHM_LOCK
and there is not enough
memory, or the operation would exceed a limit or resource control on locked
memory.
.It Bq Er EOVERFLOW
The
.Fa cmd
argument is
.Dv IPC_STAT
and
.Va uid
or
.Va gid
is too
large to be stored in the structure pointed to by
.Fa buf .
.It Bq Er EPERM
The
.Fa cmd
argument is equal to
.Dv IPC_RMID
or
.Dv IPC_SET ,
the effective user ID of the calling process is not equal to the value of
.Va shm_perm.cuid
or
.Va shm_perm.uid
in the data structure associated with
.Fa shmid ,
and
.Brq Dv PRIV_IPC_OWNER
is not asserted in the effective set of the calling process.
.Pp
The
.Fa cmd
argument is equal to
.Dv SHM_LOCK
or
.Dv SHM_UNLOCK
and
.Brq Dv PRIV_PROC_LOCK_MEMORY
is not asserted in the effective set of the calling process.
.El
.Sh INTERFACE STABILITY
.Sy Standard
.Sh SEE ALSO
.Xr ipcs 1 ,
.Xr Intro 2 ,
.Xr shmget 2 ,
.Xr shmop 2 ,
.Xr attributes 5 ,
.Xr privileges 5 ,
.Xr standards 5
