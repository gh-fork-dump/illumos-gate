.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\"
.\" Copyright 1989 AT&T
.\" Copyright (c) 2008, Sun Microsystems, Inc. All Rights Reserved
.\"
.Dd April 1, 2008
.Dt PRIOCNTLSET 2
.Os
.Sh NAME
.Nm priocntlset
.Nd generalized process scheduler control
.Sh SYNOPSIS
.In sys/types.h
.In sys/procset.h
.In sys/priocntl.h
.In sys/rtpriocntl.h
.In sys/tspriocntl.h
.In sys/iapriocntl.h
.In sys/fsspriocntl.h
.In sys/fxpriocntl.h
.Ft long
.Fo priocntlset
.Fa "procset_t *psp"
.Fa "int cmd" ,
.No "/* arg */" Fa ...
.Fc
.Sh DESCRIPTION
The
.Fn priocntlset
function changes the scheduling properties of running processes.
.Fn priocntlset
has the same functions as
.Xr priocntl 2 ,
but a more general way of specifying the set of processes whose scheduling
properties are to be changed.
.Pp
.Fa cmd
specifies the function to be performed.
.Fa arg
is a pointer to a structure whose type depends on
.Fa cmd .
See
.Xr priocntl 2
for the valid values of
.Fa cmd
and the corresponding
.Fa arg
structures.
.Pp
.Fa psp
is a pointer to a
.Vt procset
structure, which
.Fn priocntlset
uses to specify the set of processes whose scheduling properties are to be
changed.
The procset structure contains the following members:
.Bd -literal -offset indent
idop_t    p_op;        /* operator connecting left/right sets */
idtype_t  p_lidtype;   /* left set ID type */
id_t      p_lid;       /* left set ID */
idtype_t  p_ridtype;   /* right set ID type */
id_t      p_rid;       /* right set ID */
.Ed
.Pp
The
.Va p_lidtype
and
.Va p_lid
members specify the ID type and ID of one ("left") set of processes; the
.Va p_ridtype
and
.Va p_rid
members specify the ID type and ID of a second ("right") set of processes.
ID types and IDs are specified just as for the
.Fn priocntl
function.
The
.Va p_op
member specifies the operation to be performed on the two sets of processes to
get the set of processes the function is to apply to.
The valid values for
.Va p_op
and the processes they specify
are:
.Bl -tag -width "POP_DIFF"
.It Dv POP_DIFF
Set difference: processes in left set and not in right set.
.It Dv POP_AND
Set intersection: processes in both left and right sets.
.It Dv POP_OR
Set union: processes in either left or right sets or both.
.It Dv POP_XOR
Set exclusive-or: processes in left or right set but not in both.
.El
.Pp
The following macro, which is defined in
.In procset.h ,
offers a convenient way to initialize a procset structure:
.Bd -literal -offset indent
#define  setprocset(psp, op, ltype, lid, rtype, rid) \e
(psp)->p_op       = (op), \e
(psp)->p_lidtype  = (ltype), \e
(psp)->p_lid      = (lid), \e
(psp)->p_ridtype  = (rtype), \e
(psp)->p_rid      = (rid),
.Ed
.Sh RETURN VALUES
Unless otherwise noted above, the
.Fn priocntlset
function returns the value 0 if successful; otherwise, it returns the value -1
and sets the global variable
.Va errno
to indicate the error.
.Sh ERRORS
The
.Fn priocntlset
function will fail if:
.Bl -tag -width Er
.It Bq Er EAGAIN
An attempt to change the class of a process failed because of insufficient
resources other than memory (for example, class-specific kernel data
structures).
.It Bq Er EFAULT
One of the arguments points to an illegal address.
.It Bq Er EINVAL
The argument
.Fa cmd
was invalid, an invalid or unconfigured class was specified, or one of the
parameters specified was invalid.
.It Bq Er ENOMEM
An attempt to change the class of a process failed because of insufficient
memory.
.It Bq Er EPERM
The
.Brq Dv PRIV_PROC_PRIOCNTL
privilege is not asserted in the effective set of the calling LWP.
.Pp
The calling LWP does not have sufficient privileges to affect the target LWP.
.It Bq Er ERANGE
The requested time quantum is out of range.
.It Bq Er ESRCH
None of the specified processes exist.
.El
.Sh SEE ALSO
.Xr priocntl 1 ,
.Xr priocntl 2
