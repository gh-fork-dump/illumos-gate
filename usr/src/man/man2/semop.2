.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\"
.\" Copyright 1989 AT&T
.\" Copyright (c) 2006, Sun Microsystems, Inc. All Rights Reserved
.\"
.Dd May 12, 2006
.Dt SEMOP 2
.Os
.Sh NAME
.Nm semop , semtimedop
.Nd semaphore operations
.Sh SYNOPSIS
.In sys/types.h
.In sys/ipc.h
.In sys/sem.h
.Ft int
.Fo semop
.Fa "int semid"
.Fa "struct sembuf *sops"
.Fa "size_t nsops"
.Fc
.Ft int
.Fo semtimedop
.Fa "int semid"
.Fa "struct sembuf *sops"
.Fa "size_t nsops"
.Fa "const struct timespec *timeout"
.Fc
.Sh DESCRIPTION
The
.Fn semop
function is used to perform atomically an array of semaphore operations on the
set of semaphores associated with the semaphore identifier specified by
.Fa semid .
The
.Fa sops
argument is a pointer to the array of semaphore-operation structures.
The
.Fa nsops
argument is the number of such structures in the array.
.Pp
Each
.Vt sembuf
structure contains the following members:
.Bd -literal -offset indent
short sem_num; /* semaphore number */
short sem_op;  /* semaphore operation */
short sem_flg; /* operation flags */
.Ed
.Pp
Each semaphore operation specified by
.Va sem_op
is performed on the corresponding semaphore specified by
.Fa semid
and
.Va sem_num .
The
permission required for a semaphore operation is given as
.Brq Va token ,
where
.Va token
is the type of permission needed.
The types of permission are interpreted as follows:
.Bd -literal -offset indent
00400    READ by user
00200    ALTER by user
00040    READ by group
00020    ALTER by group
00004    READ by others
00002    ALTER by others
.Ed
.Pp
See the
.Em Semaphore Operation Permissions
section of
.Xr Intro 2
for more information.
.Pp
A process maintains a value,
.Va semadj ,
for each semaphore it modifies.
This value contains the cumulative effect of operations the process has
performed on an individual semaphore with the
.Dv SEM_UNDO
flag set (so that they can be undone if the process terminates unexpectedly).
The value of
.Va semadj
can
affect the behavior of calls to
.Fn semop , Fn semtimedop , Fn exit
and
.Fn _exit
.Pq the latter two functions documented in Xr exit 2 ,
but is otherwise unobservable.
See below for details.
.Pp
The value of the
.Va sem_op
member specifies one of three semaphore operations.
When
.Va sem_op
is a negative integer
.Brq Dv ALTER :
.Bl -dash -width Ds
.It
If
.Va semval Pq see Xr Intro 2
is greater than or equal to the absolute value of
.Va sem_op ,
the absolute value of
.Va sem_op
is subtracted from
.Va semval .
Also, if
.Ql (sem_flg\ &\ SEM_UNDO)
is true, the absolute
value of
.Va sem_op
is added to the calling process'
.Va semadj
value
.Pq see Xr exit 2
for the specified semaphore.
.It
If
.Va semval
is less than the absolute value of
.Va sem_op
and
.Ql (sem_flg\ &\ IPC_NOWAIT)
is true,
.Fn semop
returns immediately.
.It
If
.Va semval
is less than the absolute value of
.Va sem_op
and
.Ql (sem_flg\ &\ IPC_NOWAIT)
is false,
.Fn semop
increments the
.Va semncnt
associated with the specified semaphore and suspends execution of the calling
thread until one of the following conditions occur:
.Bl -dash -width Ds
.It
The value of
.Va semval
becomes greater than or equal to the absolute value of
.Va sem_op .
When this occurs, the value of
.Va semncnt
associated with the specified semaphore is decremented, the absolute value of
.Va sem_op
is subtracted from
.Va semval
and, if
.Ql (sem_flg\ &\ SEM_UNDO)
is true,
the absolute value of
.Va sem_op
is added to the calling process'
.Va semadj
value for the specified semaphore.
.It
The
.Fa semid
for which the calling thread is awaiting action is removed from the system
.Pq see Xr semctl 2 .
When this occurs -1 is returned and
.Va errno
is set to
.Er EIDRM .
.It
The calling thread receives a signal that is to be caught.
When this occurs, the value of
.Va semncnt
associated with the specified semaphore is decremented, and the calling thread
resumes execution in the manner prescribed in
.Xr sigaction 2 .
.El
.El
.Pp
When
.Va sem_op
is a positive integer
.Brq Dv ALTER ,
the value of
.Va sem_op
is added to
.Va semval
and, if
.Ql (sem_flg\ &\ SEM_UNDO)
is true, the value of
.Va sem_op
is subtracted from the calling process'
.Va semadj
value for the specified semaphore.
.Pp
When
.Va sem_op
is a positive integer
.Brq Dv READ :
.Bl -dash -width Ds
.It
If
.Va semval
is 0,
.Fn semop
returns immediately.
.It
If
.Va semval
is not equal to 0 and
.Ql (sem_flg\ &\ IPC_NOWAIT)
is true,
.Fn semop
returns immediately.
.It
If
.Va semval
is not equal to 0 and
.Ql (sem_flg\ &\ IPC_NOWAIT)
is false,
.Fn semop
increments the
.Va semzcnt
associated with the specified semaphore and suspends execution of the calling
thread until one of the following occurs:
.Bl -dash -width Ds
.It
The value of
.Va semval
becomes 0, at which time the value of
.Va semzcnt
associated with the specified semaphore is set to 0 and all processes waiting
on semval to become 0 are awakened.
.It
The
.Fa semid
for which the calling thread is awaiting action is removed from the system.
When this occurs -1 is returned and
.Va errno
is set to
.Er EIDRM .
.It
The calling thread receives a signal that is to be caught.
When this occurs, the value of
.Va semzcnt
associated with the specified semaphore is decremented, and the calling thread
resumes execution in the manner prescribed
in
.Xr sigaction 2 .
.El
.El
.Pp
Upon successful completion, the value of
.Va sempid
for each semaphore
specified in the array pointed to by
.Fa sops
is set to the process ID of the calling process.
.Pp
The
.Fn semtimedop
function behaves as
.Fn semop
except when it must suspend execution of the calling process to complete its
operation.
If
.Fn semtimedop
must suspend the calling process after the time interval specified in
.Fa timeout
expires, or if the timeout expires while the process is suspended,
.Fn semtimedop
returns with an error.
If the
.Vt timespec
structure pointed to by
.Fa timeout
is zero-valued and
.Fn semtimedop
needs to suspend the calling process to complete the requested operation(s), it
returns immediately with an error.
If
.Fa timeout
is
.Dv NULL ,
the behavior of
.Fn semtimedop
is identical to that of
.Fn semop .
.Sh RETURN VALUES
.Rv -std
.Sh ERRORS
The
.Fn semop
and
.Fn semtimedop
functions will fail if:
.Bl -tag -width Er
.It Bq Er E2BIG
The
.Fa nsops
argument is greater than the system-imposed maximum.
See
.Sx NOTES .
.It Bq Er EACCES
Operation permission is denied to the calling process
.Pq see Xr Intro 2 .
.It Bq Er EAGAIN
The operation would result in suspension of the calling process but
.Ql (sem_flg\ &\ IPC_NOWAIT)
is true.
.It Bq Er EFAULT
The
.Fa sops
argument points to an illegal address.
.It Bq Er EFBIG
The value of
.Va sem_num
is less than 0 or greater than or equal to the number of semaphores in the set
associated with
.Fa semid .
.It Bq Er EIDRM
A
.Fa semid
was removed from the system.
.It Bq Er EINTR
A signal was received.
.It Bq Er EINVAL
The
.Fa semid
argument is not a valid semaphore identifier, or the number of
individual semaphores for which the calling process requests a
.Dv SEM_UNDO
operation would exceed the system-imposed limit.
Solaris does not impose a limit on the number of individual semaphores for
which the calling process requests a
.Dv SEM_UNDO
operation.
.It Bq Er ENOSPC
The limit on the number of individual processes requesting a
.Dv SEM_UNDO
operation would be exceeded.
Solaris does not impose a limit on the number of individual processes
requesting an
.Dv SEM_UNDO
operation.
.It Bq Er ERANGE
An operation would cause a
.Va semval
or a
.Va semadj
value to overflow the system-imposed limit.
.El
.Pp
The
.Fn semtimedop
function will fail if:
.Bl -tag -width Er
.It Bq Er EAGAIN
The
.Fa timeout
expired before the requested operation could be completed.
.It Bq Er EFAULT
The
.Fa timeout
argument points to an illegal address.
.It Bq Er EINVAL
The
.Fa timeout
argument specified a
.Va tv_sec
or
.Va tv_nsec
value less than 0, or a
.Va tv_nsec
value greater than or equal to 1000 million.
.El
.Sh INTERFACE STABILITY
.Fn semop
is
.Sy Standard .
.Sh SEE ALSO
.Xr ipcs 1 ,
.Xr rctladm 1M ,
.Xr exec 2 ,
.Xr exit 2 ,
.Xr fork 2 ,
.Xr Intro 2 ,
.Xr semctl 2 ,
.Xr semget 2 ,
.Xr setrctl 2 ,
.Xr sigaction 2 ,
.Xr attributes 5 ,
.Xr standards 5
.Sh NOTES
The system-imposed maximum on
.Fa nsops
for a semaphore identifier is the
minimum enforced value of the
.Va process.max-sem-ops
resource control of the creating process at the time
.Xr semget 2
was used to allocate the identifier.
.Pp
See
.Xr rctladm 1M
and
.Xr setrctl 2
for information about using resource controls.
