.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\"
.\" Copyright 1989 AT&T
.\" Copyright (c) 2007, Sun Microsystems, Inc. All Rights Reserved
.\"
.Dd March 23, 2005
.Dt SIGACTION 2
.Os
.Sh NAME
.Nm sigaction
.Nd detailed signal management
.Sh SYNOPSIS
.In signal.h
.Ft int
.Fo sigaction
.Fa "int sig"
.Fa "const struct sigaction *restrict act"
.Fa "struct sigaction *restrict oact"
.Fc
.Sh DESCRIPTION
The
.Fn sigaction
function allows the calling process to examine or specify
the action to be taken on delivery of a specific signal.
See
.Xr signal.h 3HEAD
for an explanation of general signal concepts.
.Pp
The
.Fa sig
argument specifies the signal and can be assigned any of the signals specified
in
.Xr signal.h 3HEAD
except
.Dv SIGKILL
and
.Dv SIGSTOP .
.Pp
If the argument
.Fa act
is not
.Dv NULL ,
it points to a structure specifying the new action to be taken when delivering
.Fa sig .
If the argument
.Fa oact
is not
.Dv NULL ,
it points to a structure where the action previously associated with
.Fa sig
is to be stored on return from
.Fn sigaction .
.Pp
The sigaction structure includes the following members:
.Bd -literal -offset indent
void      (*sa_handler)();
void      (*sa_sigaction)(int, siginfo_t *, void *);
sigset_t  sa_mask;
int       sa_flags;
.Ed
.Pp
The storage occupied by
.Va sa_handler
and
.Va sa_sigaction
may overlap, and a standard-conforming application
.Pq see Xr standards 5
must not use both simultaneously.
.Pp
The
.Va sa_handler
member identifies the action to be associated with the
specified signal, if the
.Dv SA_SIGINFO
flag (see below) is cleared in the
.Va sa_flags
field of the
.Vt sigaction
structure.
It may take any of the values
specified in
.Xr signal.h 3HEAD
or that of a user specified signal handler.
If the
.Dv SA_SIGINFO
flag is set in the
.Va sa_flags
field, the
.Va sa_sigaction
field specifies a signal-catching function.
.Pp
The
.Va sa_mask
member specifies a set of signals to be blocked while the signal handler is
active.
On entry to the signal handler, that set of signals is added to the set of
signals already being blocked when the signal is delivered.
In addition, the signal that caused the handler to be executed will also be
blocked, unless the
.Dv SA_NODEFER
flag has been specified.
.Dv SIGSTOP
and
.Dv SIGKILL
cannot be blocked
(the system silently enforces this restriction).
.Pp
The
.Va sa_flags
member specifies a set of flags used to modify the delivery
of the signal.
It is formed by a logical OR of any of the following values:
.Bl -tag -width "SA_RESETHAND"
.It Dv SA_ONSTACK
If set and the signal is caught, and if the thread that is chosen to processes
a delivered signal has an alternate signal stack declared with
.Xr sigaltstack 2 ,
then it will process the signal on that stack.
Otherwise, the signal is delivered on the thread's normal stack.
.It Dv SA_RESETHAND
If set and the signal is caught, the disposition of the signal is reset to
.Er SIG_DFL
and the signal will not be blocked on entry to the signal handler
.Po Dv SIGILL , SIGTRAP
and
.Dv SIGPWR
cannot be automatically reset when delivered; the system silently enforces this
restriction
.Pc .
.It Dv SA_NODEFER
If set and the signal is caught, the signal will not be automatically blocked
by the kernel while it is being caught.
.It Dv SA_RESTART
If set and the signal is caught, functions that are interrupted by the
execution of this signal's handler are transparently restarted by the system,
namely
.Xr fcntl 2 , Xr ioctl 2 , Xr wait 3C , Xr waitid 2
and the
following functions on slow devices like terminals:
.Fn getmsg
and
.Fn getpmsg Pq see Xr getmsg 2 ;
.Fn putmsg
and
.Fn putpmsg Pq see Xr putmsg 2 ;
.Fn pread , Fn read
and
.Fn readv Pq see Xr read 2 ;
.Fn pwrite , Fn write
and
.Fn writev Pq see Xr write 2 ;
.Fn recv , Fn recvfrom
and
.Fn recvmsg Pq see Xr recv 3SOCKET ;
.Fn send , Fn sendto
and
.Fn sendmsg Pq see Xr send 3SOCKET .
Otherwise, the function returns an
.Er EINTR
error.
.It Dv SA_SIGINFO
If cleared and the signal is caught,
.Fa sig
is passed as the only argument to the signal-catching function.
If set and the signal is caught, two additional arguments are passed to the
signal-catching function.
If the second argument is not equal to
.Dv NULL ,
it points to a
.Vt siginfo_t
structure containing the reason why the signal was generated
.Pq see Xr siginfo.h 3HEAD ;
the third argument points to a
.Vt ucontext_t
structure containing the receiving process's context when the signal was
delivered
.Pq see Xr ucontext.h 3HEAD .
.It Dv SA_NOCLDWAIT
If set and
.Fa sig
equals
.Dv SIGCHLD ,
the system will not create zombie processes when children of the calling
process exit.
If the calling process subsequently issues a
.Xr wait 3C ,
it blocks until all of the calling process's child processes terminate, and
then returns -1 with errno set to
.Er ECHILD .
.It Dv SA_NOCLDSTOP
If set and
.Fa sig
equals
.Dv SIGCHLD , SIGCHLD
will not be sent to the calling process when its child processes stop or
continue.
.El
.Sh RETURN VALUES
Upon successful completion, the value 0 is returned; otherwise the value -1 is
returned, no new signal handler is installed and the global variable
.Va errno
is set to indicate the error.
is installed.
.Sh ERRORS
The
.Fn sigaction
function will fail if:
.Bl -tag -width Er
.It Bq Er EINVAL
The value of the
.Fa sig
argument is not a valid signal number or is equal to
.Dv SIGKILL
or
.Dv SIGSTOP .
In addition, if in a multithreaded process, it
is equal to
.Dv SIGWAITING , SIGCANCEL
or
.Dv SIGLWP .
.El
.Sh INTERFACE STABILITY
.Sy Committed
.Sh MT-LEVEL
.Sy Async-Signal-Safe
.Sh STANDARDS
See
.Xr standards 5 .
.Sh SEE ALSO
.Xr kill 1 ,
.Xr exit 2 ,
.Xr fcntl 2 ,
.Xr getmsg 2 ,
.Xr Intro 2 ,
.Xr ioctl 2 ,
.Xr kill 2 ,
.Xr pause 2 ,
.Xr putmsg 2 ,
.Xr read 2 ,
.Xr sigaltstack 2 ,
.Xr sigprocmask 2 ,
.Xr sigsend 2 ,
.Xr sigsuspend 2 ,
.Xr waitid 2 ,
.Xr write 2 ,
.Xr signal 3C ,
.Xr sigsetops 3C ,
.Xr wait 3C ,
.Xr siginfo.h 3HEAD ,
.Xr signal.h 3HEAD ,
.Xr ucontext.h 3HEAD ,
.Xr recv 3SOCKET ,
.Xr send 3SOCKET ,
.Xr attributes 5 ,
.Xr standards 5
.Sh NOTES
The handler routine can be declared:
.Bd -unfilled -offset indent
.Ft void
.Fn handler "int sig" "siginfo_t *sip" "ucontext_t *ucp" ;
.Ed
.Pp
The
.Fa sig
argument is the signal number.
The
.Fa sip
argument is a pointer (to space on the stack) to a
.Vt siginfo_t
structure, which provides additional detail about the delivery of the signal.
The
.Fa ucp
argument is a pointer (again to space on the stack) to a
.Vt ucontext_t
structure
.Pq defined in In sys/ucontext.h
which contains the context from before the signal.
It is not recommended that
.Fa ucp
be used by the handler to restore the context from before the signal delivery.
