.\"
.\" Sun Microsystems, Inc. gratefully acknowledges The Open Group for
.\" permission to reproduce portions of its copyrighted documentation.
.\" Original documentation from The Open Group can be obtained online at
.\" http://www.opengroup.org/bookstore/.
.\"
.\" The Institute of Electrical and Electronics Engineers and The Open
.\" Group, have given us permission to reprint portions of their
.\" documentation.
.\"
.\" In the following statement, the phrase ``this text'' refers to portions
.\" of the system documentation.
.\"
.\" Portions of this text are reprinted and reproduced in electronic form
.\" in the SunOS Reference Manual, from IEEE Std 1003.1, 2004 Edition,
.\" Standard for Information Technology -- Portable Operating System
.\" Interface (POSIX), The Open Group Base Specifications Issue 6,
.\" Copyright (C) 2001-2004 by the Institute of Electrical and Electronics
.\" Engineers, Inc and The Open Group.  In the event of any discrepancy
.\" between these versions and the original IEEE and The Open Group
.\" Standard, the original IEEE and The Open Group Standard is the referee
.\" document.  The original Standard can be obtained online at
.\" http://www.opengroup.org/unix/online.html.
.\"
.\" This notice shall appear on any product containing this material.
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\"
.\" Copyright 1989 AT&T
.\" Copyright (c) 2004 Sun Microsystems, Inc.  All Rights Reserved.
.\" Portions Copyright (c) 1992, X/Open Company Limited.  All Rights Reserved.
.\" Copyright (c) 2014, Joyent, Inc.
.\"
.Dd February 19, 2004
.Dt MKNOD 2
.Os
.Sh NAME
.Nm mknod , mknodat
.Nd make a directory, a special file, or a regular file
.Sh SYNOPSIS
.In sys/stat.h
.Ft int
.Fo mknod
.Fa "const char *path"
.Fa "mode_t mode"
.Fa "dev_t dev"
.Fc
.Ft int
.Fo mknodat
.Fa "int fd"
.Fa "const char *path"
.Fa "mode_t mode"
.Fa "dev_t dev"
.Fc
.Sh DESCRIPTION
The
.Fn mknod
and
.Fn mknodat
function creates a new file named by the
path name pointed to by
.Fa path .
The file type and permissions of the new file are initialized from
.Fa mode .
.Pp
The file type is specified in
.Fa mode
by the
.Dv S_IFMT
bits, which must be set to one of the following values:
.Bl -tag -width "S_IFDIR"
.It Dv S_IFIFO
FIFO special.
.It Dv S_IFCHR
Character special.
.It Dv S_IFDIR
Directory.
.It Dv S_IFBLK
Block special.
.It Dv S_IFREG
Ordinary file.
.El
.Pp
The file access permissions are specified in
.Fa mode
by the
.Li 0007777
bits, and may be constructed by a bitwise OR operation of the following values:
.Pp
.Bl -tag -compact -width "S_ISUID (04000) "
.It Dv S_ISUID Pq Li 04000
Set user ID on execution.
.It Dv S_ISGID Pq Li 020 Ns Ar # Ns Li 0
Set group ID on execution if
.Ar #
is 7, 5, 3, or 1.
Enable mandatory file/record locking if
.Ar #
is 6, 4, 2, or 0.
.It Dv S_ISVTX Pq Li 01000
On directories, restricted deletion flag; on regular files on a UFS file
system, do not cache flag.
.It Dv S_IRWXU Pq Li 00700
Read, write, execute by owner.
.It Dv S_IRUSR Pq Li 00400
Read by owner.
.It Dv S_IWUSR Pq Li 00200
Write by owner.
.It Dv S_IXUSR Pq Li 00100
Execute (search if a directory) by owner.
.It Dv S_IRWXG Pq Li 00070
Read, write, execute by group.
.It Dv S_IRGRP Pq Li 00040
Read by group.
.It Dv S_IWGRP Pq Li 00020
Write by group.
.It Dv S_IXGRP Pq Li 00010
Execute by group.
.It Dv S_IRWXO Pq Li 00007
Read, write, execute (search) by others.
.It Dv S_IROTH Pq Li 00004
Read by others.
.It Dv S_IWOTH Pq Li 00002
Write by others.
.It Dv S_IXOTH Pq Li 00001
Execute by others.
.El
.Pp
The owner ID of the file is set to the effective user ID of the
process.
The group ID of the file is set to the effective group ID
of the process.
However, if the
.Dv S_ISGID
bit is set in the parent directory, then the group ID of the file is inherited
from the parent.
If the group ID of the new file does not match the effective group ID or one of
the supplementary group IDs, the
.Dv S_ISGID
bit is cleared.
.Pp
The access permission bits of
.Fa mode
are modified by the process' file
mode creation mask: all bits set in the process's file mode creation mask are
cleared
.Pq see Xr umask 2 .
If
.Fa mode
indicates a block or character special file,
.Fa dev
is a configuration-dependent specification of a
character or block I/O device.
If
.Fa mode
does not indicate a block special
or character special device,
.Fa dev
is ignored.
See
.Xr makedev 3C .
.Pp
If
.Fa path
is a symbolic link, it is not followed.
.Pp
The
.Fn mknodat
function is similar to
.Fn mknod ;
however, when
.Fa path
is a relative path, it is resolved starting at the directory
represented by the file descriptor
.Fa fd .
To start at the current working directory,
.Fa fd
may be set to the special value
.Dv AT_FDCWD .
.Sh RETURN VALUES
Upon successful completion,
.Fn mknod
and
.Fn mknodat
return the value 0; otherwise the value -1 is returned, the new file is not
created and the global variable
.Va errno
is set to indicate the error.
.Sh ERRORS
The
.Fn mknod
and
.Fn mknodat
functions will fail if:
.Bl -tag -width Er
.It Bq Er EACCES
A component of the path prefix denies search permission, or write permission is
denied on the parent directory.
.It Bq Er EDQUOT
The directory where the new file entry is being placed cannot be extended
because the user's quota of disk blocks on that file system has been exhausted,
or the user's quota of inodes on the file system where the file is being
created has been exhausted.
.It Bq Er EEXIST
The named file exists.
.It Bq Er EFAULT
The
.Fa path
argument points to an illegal address.
.It Bq Er EINTR
A signal was caught during the execution of the
.Fn mknod
function.
.It Bq Er EINVAL
An invalid argument exists.
.It Bq Er EIO
An I/O error occurred while accessing the file system.
.It Bq Er ELOOP
Too many symbolic links were encountered in translating
.Fa path .
.It Bq Er ENAMETOOLONG
The length of the
.Fa path
argument exceeds
.Brq Dv PATH_MAX ,
or the length of a
.Fa path
component exceeds
.Brq Dv NAME_MAX
while
.Dv _POSIX_NO_TRUNC
is in effect.
.It Bq Er ENOENT
A component of the path prefix specified by
.Fa path
does not name an existing directory or
.Fa path
is an empty string.
.It Bq Er ENOLINK
The
.Fa path
argument points to a remote machine and the link to that machine is no longer
active.
.It Bq Er ENOSPC
The directory that would contain the new file cannot be extended or the file
system is out of file allocation resources.
.It Bq Er ENOTDIR
A component of the
.Fa path
prefix is not a directory.
In addition, when calling
.Fn mknodat ,
if
.Fa path
is a relative path and
.Fa fd
is a valid file descriptor which does not refer to a directory.
.It Bq Er EPERM
Not all privileges are asserted in the effective set of the calling process.
.It Bq Er EROFS
The directory in which the file is to be created is located on a read-only file
system.
.El
.Pp
The
.Fn mknodat
function will fail if:
.Bl -tag -width Er
.It Bq Er EBADF
The
.Fa path
argument is a relative path and
.Fa fd
is not a valid open file descriptor or the special value
.Dv AT_FDCWD .
.El
.Pp
The
.Fn mknod
function may fail if:
.Bl -tag -width Er
.It Bq Er ENAMETOOLONG
Pathname resolution of a symbolic link produced an intermediate result whose
length exceeds
.Brq Dv PATH_MAX
.El
.Sh USAGE
Applications should use the
.Xr mkdir 2
function to create a directory because appropriate permissions are not required
and because
.Fn mknod
might not establish directory entries for the directory itself
.Pq Pa \&.
and the parent directory
.Pq Pa \&..
The
.Fn mknod
function can be invoked only by a privileged user for file types other than
FIFO special.
The
.Xr mkfifo 3C
function should be used to create FIFOs.
.Pp
Doors are created using
.Xr door_create 3C
and can be attached to the file system using
.Xr fattach 3C .
Symbolic links can be created using
.Xr symlink 2 .
An endpoint for communication can be created using
.Xr socket 3SOCKET .
.Sh INTERFACE STABILITY
.Sy Standard
.Sh MT-LEVEL
.Sy Async-Signal-Safe
.Sh SEE ALSO
.Xr chmod 2 ,
.Xr creat 2 ,
.Xr exec 2 ,
.Xr mkdir 2 ,
.Xr open 2 ,
.Xr stat 2 ,
.Xr symlink 2 ,
.Xr umask 2 ,
.Xr door_create 3C ,
.Xr fattach 3C ,
.Xr makedev 3C ,
.Xr mkfifo 3C ,
.Xr stat.h 3HEAD ,
.Xr socket 3SOCKET ,
.Xr attributes 5 ,
.Xr privileges 5 ,
.Xr standards 5
