.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\"
.\" Copyright (c) David L. Mills 1992, 1993, 1994, 1995, 1996, 1997
.\" Portions Copyright (c) 2003, Sun Microsystems, Inc. All Rights Reserved.
.\"
.Dd May 13, 2017
.Dt NTP_ADJTIME 2
.Os
.Sh NAME
.Nm ntp_adjtime
.Nd adjust local clock parameters
.Sh SYNOPSIS
.In sys/timex.h
.Ft int
.Fn ntp_adjtime "struct timex *tptr"
.Sh DESCRIPTION
The
.Fn ntp_adjtime
function adjusts the parameters used to discipline the local clock, according
to the values in the
.Vt timex
structure (shown below) pointed to by
.Fa tptr .
Before returning,
.Fn ntp_adjtime
fills in the structure with the most recent values kept in the kernel.
.Bd -literal
struct timex {
	uint32_t modes;        /* clock mode bits (w) */
	int32_t  offset;       /* time offset (us) (rw) */
	int32_t  freq;         /* frequency offset (scaled ppm) (rw) */
	int32_t  maxerror;     /* maximum error (us) (rw) */
	int32_t  esterror;     /* estimated error (us) (rw) */
	int32_t  status;       /* clock status bits (rw) */
	int32_t  constant;     /* pll time constant (rw) */
	int32_t  precision;    /* clock precision (us) (r) */
	int32_t  tolerance;    /* clock frequency tolerance
				  (scaled ppm) (r) */
	int32_t  ppsfreq;      /* pps frequency (scaled ppm) (r) */
	int32_t  jitter;       /* pps jitter (us) (r) */
	int32_t  shift;        /* interval duration (s) (shift) (r) */
	int32_t  stabil;       /* pps stability (scaled ppm) (r) */
	int32_t  jitcnt;       /* jitter limit exceeded (r) */
	int32_t  calcnt;       /* calibration intervals (r) */
	int32_t  errcnt;       /* calibration errors (r) */
	int32_t  stbcnt;       /* stability limit exceeded (r) */
};
.Ed
.Pp
The adjustment is effected in part by speeding up or slowing down the clock, as
necessary, and in part by phase-locking onto a once-per second pulse (PPS)
provided by a driver, if available.
.Sh RETURN VALUES
Upon successful completion,
.Fn ntp_adjtime
returns the current clock state
.Pq see In sys/timex.h ;
otherwise it returns -1 and the global variable
.Va errno
is set to indicate the error.
.Sh ERRORS
The
.Fn ntp_adjtime
function will fail if:
.Bl -tag -width Er
.It Bq Er EFAULT
The
.Fa tptr
argument is an invalid pointer.
.It Bq Er EINVAL
The
.Va constant
member of the structure pointed to by
.Fa tptr
is less than 0 or greater than 30.
.It Bq Er EPERM
The
.Brq Dv PRIV_SYS_TIME
privilege is not asserted in the effective set of the calling process.
.El
.Sh SEE ALSO
.Xr ntp_gettime 2 ,
.Xr privileges 5
