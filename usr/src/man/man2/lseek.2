.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\"
.\" Copyright 1989 AT&T
.\" Copyright (c) 2005, Sun Microsystems, Inc. All Rights Reserved
.\"
.Dd May 4, 2005
.Dt LSEEK 2
.Os
.Sh NAME
.Nm lseek
.Nd move read/write file pointer
.Sh SYNOPSIS
.In sys/types.h
.In unistd.h
.Ft off_t
.Fn lseek "int fildes" "off_t offset" "int whence"
.Sh DESCRIPTION
The
.Fn lseek
function sets the file pointer associated with the open file
descriptor specified by
.Fa fildes
as follows:
.Bl -item -offset indent
.It
If
.Fa whence
is
.Dv SEEK_SET ,
the pointer is set to
.Fa offset
bytes.
.It
If
.Fa whence
is
.Dv SEEK_CUR ,
the pointer is set to its current location plus
.Fa offset .
.It
If
.Fa whence
is
.Dv SEEK_END ,
the pointer is set to the size of the file plus
.Fa offset .
.It
If
.Fa whence
is
.Dv SEEK_HOLE ,
the offset of the start of the next hole greater than or equal to the supplied
offset is returned.
The definition of a hole is provided near the end of this section.
.It
If
.Fa whence
is
.Dv SEEK_DATA ,
the file pointer is set to the start of the next non-hole file region greater
than or equal to the supplied offset.
.El
.Pp
The symbolic constants
.Dv SEEK_SET , SEEK_CUR , SEEK_END , SEEK_HOLE
and
.Dv SEEK_DATA
are defined in the header
.In unistd.h .
.Pp
Some devices are incapable of seeking.
The value of the file pointer associated with such a device is undefined.
.Pp
The
.Fn lseek
function allows the file pointer to be set beyond the existing data in the
file.
If data is later written at this point, subsequent reads in the gap between the
previous end of data and the newly written data will return bytes of value 0
until data is written into the gap.
.Pp
If
.Fa fildes
is a remote file descriptor and
.Fa offset
is negative,
.Fn lseek
returns the file pointer even if it is negative.
The
.Fn lseek
function will not, by itself, extend the size of a file.
.Pp
If
.Fa fildes
refers to a shared memory object,
.Fn lseek
behaves as if
.Fa fildes
referred to a regular file.
.Pp
A "hole" is defined as a contiguous range of bytes in a file, all having the
value of zero, but not all zeros in a file are guaranteed to be represented as
holes returned with
.Dv SEEK_HOLE .
Filesystems are allowed to expose ranges of zeros with
.Dv SEEK_HOLE ,
but not required to.
Applications can use
.Dv SEEK_HOLE
to optimise their behavior for ranges of zeros, but must not depend on it to
find all such ranges in a file.
The existence of a hole at the end of every data region allows for easy
programming and implies that a virtual hole exists at the end of the file.
Applications should use
.Fn fpathconf _PC_MIN_HOLE_SIZE
or
.Fn pathconf _PC_MIN_HOLE_SIZE
to determine if a filesystem supports
.Dv SEEK_HOLE .
See
.Xr pathconf 2 .
.Pp
For filesystems that do not supply information about holes, the file will be
represented as one entire data region.
.Sh RETURN VALUES
The
.Fn lseek
function returns the resulting offset, as measured in bytes from the beginning
of the file, if successful; otherwise the value
.Po Vt off_t Pc Ns -1
is returned,
the file offset remains unchanged and the global variable
.Va errno
is set to indicate the error.
.Sh ERRORS
The
.Fn lseek
function will fail if:
.Bl -tag -width Er
.It Bq Er EBADF
The
.Fa fildes
argument is not an open file descriptor.
.It Bq Er EINVAL
The
.Fa whence
argument is not
.Dv SEEK_SET , SEEK_CUR
or
.Dv SEEK_END ;
or the
.Fa fildes
argument is not a remote file descriptor and the resulting file pointer would
be negative.
.It Bq Er ENXIO
For
.Dv SEEK_DATA ,
there are no more data regions past the supplied offset.
For SEEK_HOLE, there are no more holes past the supplied offset.
.It Bq Er EOVERFLOW
The resulting file offset would be a value which cannot be represented
correctly in an object of type
.Vt off_t
for regular files.
.It Bq Er ESPIPE
The
.Fa fildes
argument is associated with a pipe, a FIFO, or a socket.
.El
.Sh USAGE
The
.Fn lseek
function has a transitional interface for 64-bit file
offsets.
See
.Xr lf64 5 .
.Pp
In multithreaded applications, using
.Fn lseek
in conjunction with a
.Xr read 2
or
.Xr write 2
call on a file descriptor shared by more than
one thread is not an atomic operation.
To ensure atomicity, use
.Fn pread
or
.Fn pwrite .
.Sh INTERFACE STABILITY
.Sy Standard
.Sh MT-LEVEL
.Sy Async-Signal-Safe
.Sh SEE ALSO
.Xr creat 2 ,
.Xr dup 2 ,
.Xr fcntl 2 ,
.Xr fpathconf 2 ,
.Xr open 2 ,
.Xr read 2 ,
.Xr write 2 ,
.Xr attributes 5 ,
.Xr lf64 5 ,
.Xr standards 5
