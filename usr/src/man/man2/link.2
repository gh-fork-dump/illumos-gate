.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\"
.\" Copyright 1989 AT&T
.\" Copyright (c) 2007, Sun Microsystems, Inc. All Rights Reserved.
.\" Copyright (c) 2014, Joyent, Inc.
.\"
.Dd May 18, 2007
.Dt LINK 2
.Os
.Sh NAME
.Nm link , linkat
.Nd link to a file
.Sh SYNOPSIS
.In unistd.h
.Ft int
.Fo link
.Fa "const char *existing"
.Fa "const char *new"
.Fc
.Ft int
.Fo linkat
.Fa "int efd"
.Fa "const char *existing"
.Fa "int nfd"
.Fa "const char *new"
.Fa "int flag"
.Fc
.Sh DESCRIPTION
The
.Fn link
and
.Fn linkat
functions create a new link (directory
entry) for the existing file and increments its link count by one.
The
.Fa existing
argument points to a path name naming an existing file.
The
.Fa new
argument points to a pathname naming the new directory entry to be created.
.Pp
To create hard links, both files must be on the same file system.
Both the old
and the new link share equal access and rights to the underlying object.
Privileged processes can make multiple links to a directory.
Unless the caller is privileged, the file named by
.Fa existing
must not be a directory.
.Pp
The
.Fn linkat
function is similar to
.Fn link .
If the path
.Fa existing
is a relative path, then the directory represented by
.Fa efd
will be used as the starting point to resolve
.Fa existing .
If the path
.Fa new
is a relative path, then the directory represented by
.Fa nfd
will
be used as the starting point to resolve
.Fa new .
Both
.Fa efd
and
.Fa nfd
may be the special value
.Dv AT_FDCWD
which causes the current working directory to be used as the starting point for
path resolution.
.Pp
By default,
.Fn linkat
does not follow symbolic links.
To cause it to follow
symbolic links, the value of
.Fa flag
should be AT_SYMLINK_FOLLOW.
.Pp
Upon successful completion,
.Fn link
and
.Fn linkat
mark for update the
.Va st_ctime
field of the file.
Also, the
.Va st_ctime
and
.Va st_mtime
fields of the directory that contains the new entry are marked for update.
.Sh RETURN VALUES
Upon successful completion, the value 0 is returned; otherwise the value -1 is
returned, no link is created and the global variable
.Va errno
is set to indicate the error.
.Sh ERRORS
The
.Fn link
and
.Fn linkat
functions will fail if:
.Bl -tag -width Er
.It Bq Er EACCES
A component of either path prefix denies search permission, or the requested
link requires writing in a directory with a mode that denies write permission.
.It Bq Er EDQUOT
The directory where the entry for the new link is being placed cannot be
extended because the user's quota of disk blocks on that file system has been
exhausted.
.It Bq Er EEXIST
The link named by
.Fa new
exists.
.It Bq Er EFAULT
The
.Fa existing
or
.Fa new
argument points to an illegal address.
.It Bq Er EILSEQ
The path argument includes non-UTF8 characters and the file system accepts only
file names where all characters are part of the UTF-8 character codeset.
.It Bq Er EINTR
A signal was caught during the execution of the
.Fn link
or
.Fn linkat
functions.
.It Bq Er ELOOP
Too many symbolic links were encountered in translating path.
.It Bq Er EMLINK
The maximum number of links to a file would be exceeded.
.It Bq Er ENAMETOOLONG
The length of the
.Fa existing
or
.Fa new
argument exceeds
.Dv PATH_MAX ,
or the length of a
.Fa existing
or
.Fa new
component exceeds
.Dv NAME_MAX
while
.Dv _POSIX_NO_TRUNC
is in effect.
.It Bq Er ENOENT
The
.Fa existing
or
.Fa new
argument is a null pathname; a component of either path prefix does not exist;
or the file named by
.Fa existing
does not exist.
.It Bq Er ENOLINK
The
.Fa existing
or
.Fa new
argument points to a remote machine and the link to that machine is no longer
active.
.It Bq Er ENOSPC
The directory that would contain the link cannot be extended.
.It Bq Er ENOTDIR
A component of either path prefix is not a directory.
.It Bq Er EPERM
The file named by
.Fa existing
is a directory and the
.Brq Dv PRIV_SYS_LINKDIR
privilege is not asserted in the effective set of the calling process.
.Pp
The effective user ID does not match the owner of the file and the
.Brq Dv PRIV_FILE_LINK_ANY
privilege is not asserted in the effective set of the calling process.
.It Bq Er EROFS
The requested link requires writing in a directory on a read-only file system.
.It Bq Er EXDEV
The link named by
.Fa new
and the file named by
.Fa existing
are on different logical devices (file systems).
.El
.Pp
The
.Fn linkat
functions will fail if:
.Bl -tag -width Er
.It Bq Er EBADF
If either
.Fa existing
or
.Fa new
is a relative path and
.Fa efd
or
.Fa nfd
respectively are not a valid file descriptor or the value
.Dv AT_FDCWD .
.It Bq Er EINVAL
An invalid value is set in
.Fa flag .
The only valid values are 0 and
.Dv AT_SYMLINK_FOLLOW .
.It Bq Er ENOTDIR
If either
.Fa existing
or
.Fa new
is a relative path and
.Fa efd
or
.Fa nfd
respectively refer to a valid descriptor which is not a directory.
.El
.Sh INTERFACE STABILITY
.Sy Standard
.Sh MT-LEVEL
.Sy Async-Signal-Safe
.Sh SEE ALSO
.Xr symlink 2 ,
.Xr unlink 2 ,
.Xr attributes 5 ,
.Xr privileges 5 ,
.Xr standards 5
