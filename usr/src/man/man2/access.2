.\"
.\" Sun Microsystems, Inc. gratefully acknowledges The Open Group for
.\" permission to reproduce portions of its copyrighted documentation.
.\" Original documentation from The Open Group can be obtained online at
.\" http://www.opengroup.org/bookstore/.
.\"
.\" The Institute of Electrical and Electronics Engineers and The Open
.\" Group, have given us permission to reprint portions of their
.\" documentation.
.\"
.\" In the following statement, the phrase ``this text'' refers to portions
.\" of the system documentation.
.\"
.\" Portions of this text are reprinted and reproduced in electronic form
.\" in the SunOS Reference Manual, from IEEE Std 1003.1, 2004 Edition,
.\" Standard for Information Technology -- Portable Operating System
.\" Interface (POSIX), The Open Group Base Specifications Issue 6,
.\" Copyright (C) 2001-2004 by the Institute of Electrical and Electronics
.\" Engineers, Inc and The Open Group.  In the event of any discrepancy
.\" between these versions and the original IEEE and The Open Group
.\" Standard, the original IEEE and The Open Group Standard is the referee
.\" document.  The original Standard can be obtained online at
.\" http://www.opengroup.org/unix/online.html.
.\"
.\" This notice shall appear on any product containing this material.
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\"
.\" Copyright 1989 AT&T
.\" Portions Copyright (c) 1992, X/Open Company Limited  All Rights Reserved
.\" Copyright (c) 2009, Sun Microsystems, Inc.  All Rights Reserved.
.\"
.Dd June 16, 2009
.Dt ACCESS 2
.Os
.Sh NAME
.Nm access , faccessat
.Nd determine accessibility of a file
.Sh SYNOPSIS
.In unistd.h
.In sys/fcntl.h
.Ft int
.Fo access
.Fa "const char *path"
.Fa "int amode"
.Fc
.Ft int
.Fo faccessat
.Fa "int fd"
.Fa "const char *path"
.Fa "int amode"
.Fa "int flag"
.Fc
.Sh DESCRIPTION
The
.Fn access
function checks the file named by the pathname pointed to by
the
.Fa path
argument for accessibility according to the bit pattern contained in
.Fa amode ,
using the real user ID in place of the effective user ID and the real group ID
in place of the effective group ID.
This allows a setuid process to verify that the user running it would have had
permission to access this file.
.Pp
The value of
.Fa amode
is either the bitwise inclusive OR of the access
permissions to be checked
.Pq Dv R_OK , W_OK , X_OK
or the existence test,
.Dv F_OK .
.Pp
These constants are defined in
.In unistd.h
as follows:
.Bl -tag -width "R_OK"
.It Dv R_OK
Test for read permission.
.It Dv W_OK
Test for write permission.
.It Dv X_OK
Test for execute or search permission.
.It Dv F_OK
Check existence of file.
.El
.Pp
See the
.Sy File Access Permission
section in
.Xr Intro 2
for additional information.
.Pp
If any access permissions are to be checked, each will be checked individually,
as described in
.Xr Intro 2 .
If the process has appropriate privileges, an implementation may indicate
success for
.Dv X_OK
even if none of the execute file permission bits are set.
.Pp
The
.Fn faccessat
function is equivalent to the
.Fn access
function, except in the case where
.Fa path
specifies a relative
.Fa path .
In this case the file whose accessibility is to be determined is located
relative to the directory associated with the file descriptor
.Fa fd
instead of the current working directory.
.Pp
If
.Fn faccessat
is passed in the
.Fa fd
parameter the special value
.Dv AT_FDCWD ,
defined in
.In fcntl.h ,
the current working directory is used and the behavior is identical to a call
to
.Fn access .
.Pp
Values for
.Fa flag
are constructed by a bitwise-inclusive OR of flags from
the following list, defined in
.In fcntl.h :
.Bl -tag -width AT_EACCESS
.It Dv AT_EACCESS
The checks for accessibility are performed using the effective user and group
IDs instead of the real user and group ID as required in a call to
.Fn access .
.El
.Sh RETURN VALUES
If the requested access is permitted,
.Fn access
and
.Fn faccessat
succeed and return the value 0; otherwise the value -1 is returned and the
global variable
.Va errno
is set to indicate the error.
.Sh ERRORS
The
.Fn access
and
.Fn faccessat
functions will fail if:
.Bl -tag -width Er
.It Bq Er EACCES
Permission bits of the file mode do not permit the requested access, or search
permission is denied on a component of the path prefix.
.It Bq Er EFAULT
The
.Fa path
argument points to an illegal address.
.It Bq Er EINTR
A signal was caught during the
.Fn access
function.
.It Bq Er ELOOP
Too many symbolic links were encountered in resolving
.Fa path ,
or loop exists in symbolic links encountered during resolution of the
.Fa path
argument.
.It Bq Er ENAMETOOLONG
The length of the
.Fa path
argument exceeds
.Brq Dv PATH_MAX ,
or a pathname component is longer than
.Brq Dv NAME_MAX
while
.Dv _POSIX_NO_TRUNC
is in effect.
.It Bq Er ENOENT
A component of
.Fa path
does not name an existing file or
.Fa path
is an empty string.
.It Bq Er ENOLINK
The
.Fa path
argument points to a remote machine and the link to that machine is no longer
active.
.It Bq Er ENOTDIR
A component of the
.Fa path
prefix is not a directory.
.It Bq Er ENXIO
The
.Fa path
argument points to a character or block device special file and the
corresponding device has been retired by the fault management framework.
.It Bq Er EROFS
Write access is requested for a file on a read-only file system.
.El
.Pp
The
.Fn faccessat
function will fail if:
.Bl -tag -width Er
.It Bq Er EBADF
The
.Fa path
argument does not specify an absolute path and the
.Fa fd
argument is neither
.Fa AT_FDCWD
nor a valid file descriptor open for reading or searching.
.El
.Pp
The
.Fn access
and
.Fn faccessat
functions may fail if:
.Bl -tag -width Er
.It Bq Er EINVAL
The value of the
.Fa amode
argument is invalid.
.It Bq Er ENAMETOOLONG
Pathname resolution of a symbolic link produced an intermediate result whose
length exceeds
.Brq Dv PATH_MAX .
.It Bq Er ETXTBSY
Write access is requested for a pure procedure (shared text) file that is being
executed.
.El
.Pp
The
.Fn faccessat
function may fail if:
.Bl -tag -width Er
.It Bq Er EINVAL
The value of the
.Fa flag
argument is not valid.
.It Bq Er ENOTDIR
The
.Fa path
argument is not an absolute path and
.Fa fd
is neither
.Dv AT_FDCWD
nor a file descriptor associated with a directory.
.El
.Sh USAGE
Additional values of
.Fa amode
other than the set defined in the description might be valid, for example, if a
system has extended access controls.
.Pp
The purpose of the
.Fn faccessat
function is to enable the checking of the accessibility of files in directories
other than the current working directory without exposure to race conditions.
Any part of the path of a file could be changed in parallel to a call to
.Fn access ,
resulting in unspecified behavior.
By opening a file descriptor for the target directory and using the
.Fn faccessat
function, it can be guaranteed that the file tested for accessibility is
located relative to the desired directory.
.Sh INTERFACE STABILITY
.Sy Committed
.Sh MT-LEVEL
.Sy Async-Signal-Safe
.Sh STANDARDS
For
.Fn access ,
see
.Xr standards 5 .
.Sh SEE ALSO
.Xr chmod 2 ,
.Xr Intro 2 ,
.Xr stat 2 ,
.Xr attributes 5 ,
.Xr standards 5
