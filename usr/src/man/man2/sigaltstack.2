.\"
.\" Sun Microsystems, Inc. gratefully acknowledges The Open Group for
.\" permission to reproduce portions of its copyrighted documentation.
.\" Original documentation from The Open Group can be obtained online at
.\" http://www.opengroup.org/bookstore/.
.\"
.\" The Institute of Electrical and Electronics Engineers and The Open
.\" Group, have given us permission to reprint portions of their
.\" documentation.
.\"
.\" In the following statement, the phrase ``this text'' refers to portions
.\" of the system documentation.
.\"
.\" Portions of this text are reprinted and reproduced in electronic form
.\" in the SunOS Reference Manual, from IEEE Std 1003.1, 2004 Edition,
.\" Standard for Information Technology -- Portable Operating System
.\" Interface (POSIX), The Open Group Base Specifications Issue 6,
.\" Copyright (C) 2001-2004 by the Institute of Electrical and Electronics
.\" Engineers, Inc and The Open Group.  In the event of any discrepancy
.\" between these versions and the original IEEE and The Open Group
.\" Standard, the original IEEE and The Open Group Standard is the referee
.\" document.  The original Standard can be obtained online at
.\" http://www.opengroup.org/unix/online.html.
.\"
.\" This notice shall appear on any product containing this material.
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\"
.\" Copyright 1989 AT&T
.\" Portions Copyright (c) 1992, X/Open Company Limited.  All Rights Reserved.
.\" Copyright (c) 2003, Sun Microsystems, Inc.  All Rights Reserved.
.\"
.Dd November 1, 2003
.Dt SIGALTSTACK 2
.Os
.Sh NAME
.Nm sigaltstack
.Nd set or get signal alternate stack context
.Sh SYNOPSIS
.In signal.h
.Ft int
.Fn sigaltstack "const stack_t *restrict ss" "stack_t *restrict oss"
.Sh DESCRIPTION
The
.Fn sigaltstack
function allows a thread to define and examine the state of an alternate stack
area on which signals are processed.
If
.Fa ss
is non-zero, it specifies a pointer to and the size of a stack area on which to
deliver signals, and informs the system whether the thread is currently
executing on that stack.
When a signal's action indicates its handler should execute on the alternate
signal stack
.Pq specified with a Xr sigaction 2 call ,
the system checks whether the thread chosen to execute the signal handler is
currently executing on that stack.
If the thread is not currently executing on the signal stack, the system
arranges a switch to the alternate signal stack for the duration of the signal
handler's execution.
.Pp
The
.Vt stack_t
structure includes the following members:
.Bd -literal -offset indent
int   *ss_sp
long  ss_size
int   ss_flags
.Ed
.Pp
If
.Fa ss
is not
.Dv NULL ,
it points to a structure specifying the alternate signal stack that will take
effect upon successful return from
.Fn sigaltstack .
The
.Va ss_sp
and
.Va ss_size
members specify the new base and size of the stack, which is automatically
adjusted for direction of growth and alignment.
The
.Va ss_flags
member specifies the new stack state and may be set to the following:
.Bl -tag -width "SS_ONSTACK"
.It Dv SS_DISABLE
The stack is to be disabled and
.Va ss_sp
and
.Va ss_size
are ignored.
If
.Dv SS_DISABLE
is not set, the stack will be enabled.
.El
.Pp
If
.Va oss
is not
.Dv NULL ,
it points to a structure specifying the alternate signal stack that was in
effect prior to the call to
.Fn sigaltstack .
The
.Va ss_sp
and
.Va ss_size
members specify the base and size of that stack.
The
.Va ss_flags
member specifies the stack's state, and may contain the following values:
.Bl -tag -width "SS_ONSTACK"
.It Dv SS_ONSTACK
The thread is currently executing on the alternate signal stack.
Attempts to modify the alternate signal stack while the thread is executing on
it will fail.
.It Dv SS_DISABLE
The alternate signal stack is currently disabled.
.El
.Sh RETURN VALUES
.Rv -std
.Sh ERRORS
The
.Fn sigaltstack
function will fail if:
.Bl -tag -width Er
.It Bq Er EFAULT
The
.Fa ss
or
.Fa oss
argument points to an illegal address.
.It Bq Er EINVAL
The
.Fa ss
argument is not a null pointer, and the
.Va ss_flags
member pointed to by
.Fa ss
contains flags other than
.Dv SS_DISABLE .
.It Bq Er ENOMEM
The size of the alternate stack area is less than
.Dv MINSIGSTKSZ .
.It Bq Er EPERM
An attempt was made to modify an active stack.
.El
.Sh INTERFACE STABILITY
.Sy Standard
.Sh MT-LEVEL
.Sy Async-Signal-Safe
.Sh SEE ALSO
.Xr getcontext 2 ,
.Xr mmap 2 ,
.Xr sigaction 2 ,
.Xr ucontext.h 3HEAD ,
.Xr attributes 5 ,
.Xr standards 5
.Sh NOTES
The value
.Dv SIGSTKSZ
is defined to be the number of bytes that would be used to cover the usual case
when allocating an alternate stack area.
The value
.Dv MINSIGSTKSZ
is defined to be the minimum stack size for a signal handler.
In computing an alternate stack size, a program should add that amount to its
stack requirements to allow for the operating system overhead.
.Pp
The following code fragment is typically used to allocate an alternate stack
with an adjacent red zone (an unmapped page) to guard against stack overflow,
as with default stacks:
.Bd -literal -offset indent
#include <signal.h>
#include <sys/mman.h>

stack_t sigstk;
sigstk.ss_sp = mmap(NULL, SIGSTKSZ, PROT_READ | PROT_WRITE,
	MAP_PRIVATE | MAP_ANON, -1, 0);
if (sigstk.ss_sp == MAP_FAILED)
	/* error return */;
sigstk.ss_size = SIGSTKSZ;
sigstk.ss_flags = 0;
if (sigaltstack(&sigstk, NULL) < 0)
	perror("sigaltstack");
.Ed
