.\"
.\" Sun Microsystems, Inc. gratefully acknowledges The Open Group for
.\" permission to reproduce portions of its copyrighted documentation.
.\" Original documentation from The Open Group can be obtained online at
.\" http://www.opengroup.org/bookstore/.
.\"
.\" The Institute of Electrical and Electronics Engineers and The Open
.\" Group, have given us permission to reprint portions of their
.\" documentation.
.\"
.\" In the following statement, the phrase ``this text'' refers to portions
.\" of the system documentation.
.\"
.\" Portions of this text are reprinted and reproduced in electronic form
.\" in the SunOS Reference Manual, from IEEE Std 1003.1, 2004 Edition,
.\" Standard for Information Technology -- Portable Operating System
.\" Interface (POSIX), The Open Group Base Specifications Issue 6,
.\" Copyright (C) 2001-2004 by the Institute of Electrical and Electronics
.\" Engineers, Inc and The Open Group.  In the event of any discrepancy
.\" between these versions and the original IEEE and The Open Group
.\" Standard, the original IEEE and The Open Group Standard is the referee
.\" document.  The original Standard can be obtained online at
.\" http://www.opengroup.org/unix/online.html.
.\"
.\" This notice shall appear on any product containing this material.
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\"
.\" Copyright 1989 AT&T.
.\" Copyright (c) 2001, The IEEE and The Open Group.  All Rights Reserved.
.\" Copyright (c) 2005, Sun Microsystems, Inc.  All Rights Reserved.
.\" Copyright (c) 2014, Joyent, Inc.
.\"
.Dd December 22, 2014
.Dt CHMOD 2
.Os
.Sh NAME
.Nm chmod , fchmod , fchmodat
.Nd change access permission mode of file
.Sh SYNOPSIS
.In sys/types.h
.In sys/stat.h
.Ft int
.Fo chmod
.Fa "const char *path"
.Fa "mode_t mode"
.Fc
.Ft int
.Fo fchmod
.Fa "int fildes"
.Fa "mode_t mode"
.Fc
.Ft int
.Fo fchmodat
.Fa "int fildes"
.Fa "const char *path"
.Fa "mode_t mode"
.Fa "int flag"
.Fc
.Sh DESCRIPTION
The
.Fn chmod , Fn fchmod
and
.Fn fchmodat
functions set the access permission portion of the mode of the file whose name
is given by
.Fa path
or referenced by the open file descriptor
.Fa fildes
to the bit pattern contained in
.Fa mode .
Access permission bits are interpreted as follows:
.Pp
.Bl -tag -compact -width "S_ISUID (04000) "
.It Dv S_ISUID Pq Li 04000
Set user ID on execution.
.It Dv S_ISGID Pq Li 020 Ns Ar # Ns Li 0
Set group ID on execution if
.Ar #
is 7, 5, 3, or 1.
Enable mandatory file/record locking if
.Ar #
is 6, 4, 2, or 0.
.It Dv S_ISVTX Pq Li 01000
Sticky Bit.
.It Dv S_IRWXU Pq Li 00700
Read, write, execute by owner.
.It Dv S_IRUSR Pq Li 00400
Read by owner.
.It Dv S_IWUSR Pq Li 00200
Write by owner.
.It Dv S_IXUSR Pq Li 00100
Execute (search if a directory) by owner.
.It Dv S_IRWXG Pq Li 00070
Read, write, execute by group.
.It Dv S_IRGRP Pq Li 00040
Read by group.
.It Dv S_IWGRP Pq Li 00020
Write by group.
.It Dv S_IXGRP Pq Li 00010
Execute by group.
.It Dv S_IRWXO Pq Li 00007
Read, write, execute (search) by others.
.It Dv S_IROTH Pq Li 00004
Read by others.
.It Dv S_IWOTH Pq Li 00002
Write by others.
.It Dv S_IXOTH Pq Li 00001
Execute by others.
.El
.Pp
Modes are constructed by the bitwise OR operation of the access permission
bits.
.Pp
The effective user ID of the process must match the owner of the file or the
process must have the appropriate privilege to change the mode of a file.
.Pp
If the process is not a privileged process and the file is not a directory,
mode bit
.Li 01000 Pq save text image on execution
is cleared.
.Pp
If neither the process is privileged nor the file's group is a member of the
process's supplementary group list, and the effective group ID of the process
does not match the group ID of the file, mode bit
.Li 02000 Pq set group ID on execution
is cleared.
.Pp
If a directory is writable and has
.Dv S_ISVTX Pq the sticky bit
set, files
within that directory can be removed or renamed only if one or more of the
following is true
.Pq see Xr unlink 2 and Xr rename 2 :
.Pp
.Bl -dash -compact
.It
The user owns the file.
.It
The user owns the directory.
.It
The file is writable by the user.
.It
The user is a privileged user.
.El
.Pp
If a regular file is not executable and has
.Dv S_ISVTX
set, the file is assumed to be a swap file.
In this case, the system's page cache will not be used to hold the file's data.
If the
.Dv S_ISVTX
bit is set on any other file, the results are unspecified.
.Pp
If a directory has the set group ID bit set, a given file created within that
directory will have  the same group ID as the directory.
Otherwise, the newly created file's group ID will be set to the effective group
ID of the creating process.
.Pp
If the mode bit
.Li 02000 Pq set group ID on execution
is set and the mode bit
.Li 00010 Pq execute or search by group
is not set, mandatory file/record locking will exist on a regular file,
possibly affecting future calls to
.Xr open 2 , Xr creat 2 , Xr read 2
and
.Xr write 2
on this file.
.Pp
If
.Fa fildes
references a shared memory object,
.Fn fchmod
need only affect the
.Dv S_IRUSR , S_IRGRP , S_IROTH , S_IWUSR , S_IWGRP , S_IWOTH , S_IXUSR , S_IXGRP
and
.Dv S_IXOTH
file permission bits.
.Pp
If
.Fa fildes
refers to a socket,
.Fn fchmod
does not fail but no action is taken.
.Pp
If
.Fa fildes
refers to a stream that is attached to an object in the file system name space
with
.Xr fattach 3C ,
the
.Fn fchmod
call performs no action and returns successfully.
.Pp
The
.Fn fchmodat
function behaves similarly to
.Fn chmod ,
except when
.Fa path
is a relative path, it is resolved relative to the directory specified by
.Fa fildes .
If
.Fa fildes
has the value
.Dv AT_FDCWD ,
then
.Fa path
will be resolved relative to the current working directory.
The argument
.Fa flag
should be zero, but may include the value
.Dv AT_SYMLINK_NOFOLLOW ,
which indicates that if
.Fa path
refers to a symbolic link, then permissions should be changed on the symbolic
link itself.
However, changing permissions of symbolic links is not supported on Illumos,
and will result in an error.
.Pp
Upon successful completion,
.Fn chmod , Fn fchmod
and
.Fn fchmodat
mark for update the
.Va st_ctime
field of the file.
.Sh RETURN VALUES
Upon successful completion, the value 0 is returned; otherwise the value -1 is
returned, the file mode is unchanged and the global variable
.Va errno
is set to indicate the error.
.Sh ERRORS
The
.Fn chmod , Fn fchmod
and
.Fn fchmodat
functions will fail if:
.Bl -tag -width Er
.It Bq Er EIO
An I/O error occurred while reading from or writing to the file system.
.It Bq Er EPERM
The effective user ID does not match the owner of the file and the process does
not have appropriate privilege.
.Pp
The
.Brq Dv PRIV_FILE_OWNER
privilege overrides constraints on ownership when changing permissions on a
file.
.Pp
The
.Brq Dv PRIV_FILE_SETID
privilege overrides constraints on ownership when adding the setuid or setgid
bits to an executable file or a directory.
When adding the setuid bit to a root owned executable, additional restrictions
apply.
See
.Xr privileges 5 .
.El
.Pp
The
.Fn chmod
and
.Fn fchmodat
functions will fail if:
.Bl -tag -width Er
.It Bq Er EACCES
Search permission is denied on a component of the path prefix of
.Fa path
and for
.Fn fchmodat , Fa fildes
was not opened with
.Dv O_SEARCH
requested.
The privilege
.Brq Dv FILE_DAC_SEARCH
overrides file permissions restrictions in that case.
.It Bq Er EFAULT
The
.Fa path
argument points to an illegal address.
.It Bq Er ELOOP
A loop exists in symbolic links encountered during the resolution of the
.Fa path
argument.
.It Bq Er ENAMETOOLONG
The length of the
.Fa path
argument exceeds
.Dv PATH_MAX ,
or the length of
a path component exceeds
.Dv NAME_MAX
while
.Dv _POSIX_NO_TRUNC
is in effect.
.It Bq Er ENOENT
Either a component of the path prefix or the file referred to by
.Fa path
does not exist or is
.Dv NULL .
.It Bq Er ENOLINK
The
.Fa fildes
argument points to a remote machine and the link to that machine is no longer
active.
.It Bq Er ENOTDIR
A component of the prefix of
.Fa path
is not a directory.
.It Bq Er EROFS
The file referred to by
.Fa path
resides on a read-only file system.
.El
.Pp
The
.Fn fchmod
function will fail if:
.Bl -tag -width Er
.It Bq Er EBADF
The
.Fa fildes
argument is not an open file descriptor
.It Bq Er ENOLINK
The
.Fa path
argument points to a remote machine and the link to that machine
is no longer active.
.It Bq Er EROFS
The file referred to by
.Fa fildes
resides on a read-only file system.
.El
.Pp
The
.Fn chmod
and
.Fn fchmod
functions may fail if:
.Bl -tag -width Er
.It Bq Er EINTR
A signal was caught during execution of the function.
.It Bq Er EINVAL
The value of the
.Fa mode
argument is invalid.
.El
.Pp
The
.Fn fchmodat
will fail if:
.Bl -tag -width Er
.It Bq Er EBADF
The argument
.Fa path
is a relative path and
.Fa fildes
is not an open file descriptor or the value
.Dv AT_FDCWD .
.It Bq Er EINVAL
The argument flags has a non-zero value other than
AT_SYMLINK_NOFOLLOW.
.It Bq Er ENOTDIR
The argument
.Fa path
is a relative
path and
.Fa fildes
is a valid file descriptor which does not refer to a file.
.It Bq Er EOPNOTSUPP
The
.Dv AT_SYMLINK_NOFOLLOW
bit is set in the flags argument.
.El
.Pp
The
.Fn chmod
and
.Fn fchmodat
functions may fail if:
.Bl -tag -width Er
.It Bq Er ELOOP
More than
.Brq Dv SYMLOOP_MAX
symbolic links were encountered during the resolution of the
.Fa path
argument.
.It Bq Er ENAMETOOLONG
As a result of encountering a symbolic link in resolution of the
.Fa path
argument, the length of the substituted pathname strings exceeds
.Brq Dv PATH_MAX .
.El
.Pp
The
.Fn fchmod
function may fail if:
.Bl -tag -width Er
.It Bq Er EINVAL
The
.Fa fildes
argument refers to a pipe and the system disallows execution of this function
on a pipe.
.El
.Sh EXAMPLES
The following example sets read permissions for the owner, group, and others:
.Bd -literal
#include <sys/stat.h>
const char *path;
\&...
chmod(path, S_IRUSR|S_IRGRP|S_IROTH);
.Ed
.Pp
The following example sets read, write, and execute permissions for the owner,
and no permissions for group and others:
.Bd -literal
#include <sys/stat.h>
const char *path;
\&...
chmod(path, S_IRWXU);
.Ed
.Pp
The following example sets owner permissions for
.Dv CHANGEFILE
to read, write, and execute, group permissions to read and execute, and other
permissions to read:
.Bd -literal
#include <sys/stat.h>
#define CHANGEFILE "/etc/myfile"
\&...
chmod(CHANGEFILE, S_IRWXU|S_IRGRP|S_IXGRP|S_IROTH);
.Ed
.Pp
The following example sets the file permission bits for a file named
.Pa /home/cnd/mod1 ,
then calls the
.Xr stat 2
function to verify the permissions:
.Bd -literal
#include <sys/types.h>
#include <sys/stat.h>
int status;
struct stat buffer
\&...
chmod("home/cnd/mod1", S_IRWXU|S_IRWXG|S_IROTH|S_IWOTH);
status = stat("home/cnd/mod1", &buffer);
.Ed
.Sh USAGE
If
.Fn chmod
or
.Fn fchmod
is used to change the file group owner permissions on a file with non-trivial
ACL entries, only the ACL mask is set to the new permissions and the group
owner permission bits in the file's mode field
.Pq defined in Xr mknod 2
are unchanged.
A non-trivial ACL entry is one whose meaning cannot be represented in the
file's mode field alone.
The new ACL mask permissions might change the effective permissions for
additional users and groups that have ACL entries on the file.
.Sh INTERFACE STABILITY
.Sy Committed
.Sh MT-LEVEL
.Sy MT-Safe
.Sh SEE ALSO
.Xr chmod 1 ,
.Xr chown 2 ,
.Xr creat 2 ,
.Xr fcntl 2 ,
.Xr mknod 2 ,
.Xr open 2 ,
.Xr read 2 ,
.Xr rename 2 ,
.Xr stat 2 ,
.Xr write 2 ,
.Xr fattach 3C ,
.Xr mkfifo 3C ,
.Xr stat.h 3HEAD ,
.Xr attributes 5 ,
.Xr privileges 5 ,
.Xr standards 5
.Rs
.%T Programming Interfaces Guide
.Re
