.\"
.\" Sun Microsystems, Inc. gratefully acknowledges The Open Group for
.\" permission to reproduce portions of its copyrighted documentation.
.\" Original documentation from The Open Group can be obtained online at
.\" http://www.opengroup.org/bookstore/.
.\"
.\" The Institute of Electrical and Electronics Engineers and The Open
.\" Group, have given us permission to reprint portions of their
.\" documentation.
.\"
.\" In the following statement, the phrase ``this text'' refers to portions
.\" of the system documentation.
.\"
.\" Portions of this text are reprinted and reproduced in electronic form
.\" in the SunOS Reference Manual, from IEEE Std 1003.1, 2004 Edition,
.\" Standard for Information Technology -- Portable Operating System
.\" Interface (POSIX), The Open Group Base Specifications Issue 6,
.\" Copyright (C) 2001-2004 by the Institute of Electrical and Electronics
.\" Engineers, Inc and The Open Group.  In the event of any discrepancy
.\" between these versions and the original IEEE and The Open Group
.\" Standard, the original IEEE and The Open Group Standard is the referee
.\" document.  The original Standard can be obtained online at
.\" http://www.opengroup.org/unix/online.html.
.\"
.\" This notice shall appear on any product containing this material.
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\"
.\" Copyright 1989 AT&T
.\" Portions Copyright (c) 1994, X/Open Company Limited.  All Rights Reserved.
.\" Copyright (c) 2006, Sun Microsystems, Inc.  All Rights Reserved.
.\"
.Dd August 21, 2006
.Dt GETRLIMIT 2
.Os
.Sh NAME
.Nm getrlimit , setrlimit
.Nd control maximum system resource consumption
.Sh SYNOPSIS
.In sys/resource.h
.Ft int
.Fn getrlimit "int resource" "struct rlimit *rlp"
.Ft int
.Fn setrlimit "int resource" "ronst struct rlimit *rlp"
.Sh DESCRIPTION
Limits on the consumption of a variety of system resources by a process and
each process it creates may be obtained with the
.Fn getrlimit
and set with
.Fn setrlimit
functions.
.Pp
Each call to either
.Fn getrlimit
or
.Fn setrlimit
identifies a specific resource to be operated upon as well as a resource limit.
A resource limit is a pair of values: one specifying the current (soft) limit,
the other a maximum (hard) limit.
Soft limits may be changed by a process to any value that is less than or equal
to the hard limit.
A process may (irreversibly) lower its hard limit to any value that is greater
than or equal to the soft limit.
Only a process with
.Brq Dv PRIV_SYS_RESOURCE
asserted in the effective set can raise a hard limit.
Both hard and soft limits can be changed in a single call to
.Fn setrlimit
subject to the constraints described above.
Limits may have an "infinite" value of
.Dv RLIM_INFINITY .
The
.Fa rlp
argument is a pointer to
.Vt struct rlimit
that includes the following members:
.Bd -literal -offset indent
rlim_t    rlim_cur;     /* current (soft) limit */
rlim_t    rlim_max;     /* hard limit */
.Ed
.Pp
The type
.Vt rlim_t
is an arithmetic data type to which objects of type
.Vt int , size_t
and
.Vt off_t
can be cast without loss of information.
.Pp
The possible resources, their descriptions, and the actions taken when the
current limit is exceeded are summarized as follows:
.Bl -tag -width "RLIMIT_NOFILE"
.It Dv RLIMIT_CORE
The maximum size of a core file in bytes that may be created by a process.
A limit of 0 will prevent the creation of a core file.
The writing of a core file will terminate at this size.
.It Dv RLIMIT_CPU
The maximum amount of CPU time in seconds used by a process.
This is a soft limit only.
The
.Dv SIGXCPU
signal is sent to the process.
If the process is holding or ignoring
.Dv SIGXCPU ,
the behavior is scheduling class defined.
.It Dv RLIMIT_DATA
The maximum size of a process' heap in bytes.
The
.Xr brk 2
function will fail with
.Va errno
set to
.Er ENOMEM .
.It Dv RLIMIT_FSIZE
The maximum size of a file in bytes that may be created by a process.
A limit of 0 will prevent the creation of a file.
The
.Dv SIGXFSZ
signal is sent to the process.
If the process is holding or ignoring
.Dv SIGXFSZ ,
continued attempts to increase the size of a file beyond the limit will fail
with
.Va errno
set to
.Er EFBIG .
.It Dv RLIMIT_NOFILE
One more than the maximum value that the system may assign to a newly created
descriptor.
This limit constrains the number of file descriptors that a process may create.
.It Dv RLIMIT_STACK
The maximum size of a process' stack in bytes.
The system will not automatically grow the stack beyond this limit.
.Pp
Within a process,
.Fn setrlimit
will increase the limit on the size of your stack, but will not move current
memory segments to allow for that growth.
To guarantee that the process stack can grow to the limit, the limit must be
altered prior to the execution of the process in which the new stack size is to
be used.
.Pp
Within a multithreaded process,
.Fn setrlimit
has no impact on the stack size limit for the calling thread if the calling
thread is not the main thread.
A call to
.Fn setrlimit
for
.Dv RLIMIT_STACK
impacts only the main thread's stack, and should be made only from the main
thread, if at all.
.Pp
The
.Dv SIGSEGV
signal is sent to the process.
If the process is holding or ignoring
.Dv SIGSEGV ,
or is catching
.Dv SIGSEGV
and has not made arrangements to use an alternate stack
.Pq see Xr sigaltstack 2 ,
the disposition of
.Dv SIGSEGV
will be set to
.Dv SIG_DFL
before it is sent.
.It Dv RLIMIT_VMEM
The maximum size of a process's mapped address space in bytes.
If this limit is exceeded, the
.Xr brk 2
and
.Xr mmap 2
functions will fail with errno set to
.Er ENOMEM .
In addition, the automatic stack growth will fail with the effects outlined
above.
.It Dv RLIMIT_AS
This is the maximum size of a process's total available memory, in bytes.
If
this limit is exceeded, the
.Xr brk 2 , Xr malloc 3C , Xr mmap 2 and Xr sbrk 2
functions will fail with
.Va errno
set to
.Er ENOMEM .
In addition, the automatic stack growth will fail with the effects outlined
above.
.El
.Pp
Because limit information is stored in the per-process information, the shell
builtin
.Nm ulimit
command must directly execute this system call if it is to affect all future
processes created by the shell.
.Pp
The value of the current limit of the following resources affect these
implementation defined parameters:
.Bl -column -offset indent "RLIMIT_NOFILE"
.It Sy Limit Ta Sy Implementation Defined Constant
.It Dv RLIMIT_FSIZE Ta Dv FCHR_MAX
.It Dv RLIMIT_NOFILE Ta Dv OPEN_MAX
.El
.Pp
When using the
.Fn getrlimit
function, if a resource limit can be represented correctly in an object of type
.Vt rlim_t ,
then its representation is returned; otherwise, if the value of the resource
limit is equal to that of the corresponding saved hard limit, the value
returned is
.Dv RLIM_SAVED_MAX ;
otherwise the value returned is
.Dv RLIM_SAVED_CUR .
.Pp
When using the
.Fn setrlimit
function, if the requested new limit is
.Dv RLIM_INFINITY ,
the new limit will be
.Dq no limit ;
otherwise if the requested new limit is
.Dv RLIM_SAVED_MAX ,
the new limit will be the corresponding saved hard limit; otherwise, if the
requested new limit is
.Dv RLIM_SAVED_CUR ,
the new limit will be the corresponding saved soft limit; otherwise, the new
limit will be the requested value.
In addition, if the corresponding saved limit can be represented correctly in
an object of type
.Vt rlim_t ,
then it will be overwritten with the new limit.
.Pp
The result of setting a limit to
.Dv RLIM_SAVED_MAX
or
.Dv RLIM_SAVED_CUR
is unspecified unless a previous call to
.Fn getrlimit
returned that value as the soft or hard limit for the corresponding resource
limit.
.Pp
A limit whose value is greater than
.Dv RLIM_INFINITY
is permitted.
.Pp
The
.Xr exec 2
family of functions also cause resource limits to be saved.
.Sh RETURN VALUES
.Rv -std
.Sh ERRORS
The
.Fn getrlimit
and
.Fn setrlimit
functions will fail if:
.Bl -tag -width Er
.It Bq Er EFAULT
The
.Fa rlp
argument points to an illegal address.
.It Bq Er EINVAL
An invalid
.Fa resource
was specified; or in a
.Fn setrlimit
call, the new
.Va rlim_cur
exceeds the new
.Va rlim_max .
.It Bq Er EPERM
The limit specified to
.Fn setrlimit
would have raised the maximum limit value and
.Brq Dv PRIV_SYS_RESOURCE
is not asserted in the effective set of the current process.
.El
.Pp
The
.Fn setrlimit
function may fail if:
.Bl -tag -width Er
.It Bq Er EINVAL
The limit specified cannot be lowered because current usage is already higher
than the limit.
.El
.Sh USAGE
The
.Fn getrlimit
and
.Fn setrlimit
functions have transitional interfaces for 64-bit file offsets.
See
.Xr lf64 5 .
.Pp
The rlimit functionality is now provided by the more general resource control
facility described on the
.Xr setrctl 2
manual page.
The actions associated with the resource limits described above are true at
system boot, but an administrator can modify the local configuration to modify
signal delivery or type.
Application authors that utilize rlimits for the purposes of resource awareness
should investigate the resource controls facility.
.Sh INTERFACE STABILITY
.Sy Standard
.Sh SEE ALSO
.Xr rctladm 1M ,
.Xr brk 2 ,
.Xr exec 2 ,
.Xr fork 2 ,
.Xr open 2 ,
.Xr setrctl 2 ,
.Xr sigaltstack 2 ,
.Xr ulimit 2 ,
.Xr getdtablesize 3C ,
.Xr malloc 3C ,
.Xr signal 3C ,
.Xr sysconf 3C ,
.Xr signal.h 3HEAD ,
.Xr attributes 5 ,
.Xr lf64 5 ,
.Xr privileges 5 ,
.Xr resource_controls 5 ,
.Xr standards 5
