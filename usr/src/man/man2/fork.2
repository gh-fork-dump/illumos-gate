.\"
.\" Sun Microsystems, Inc. gratefully acknowledges The Open Group for
.\" permission to reproduce portions of its copyrighted documentation.
.\" Original documentation from The Open Group can be obtained online at
.\" http://www.opengroup.org/bookstore/.
.\"
.\" The Institute of Electrical and Electronics Engineers and The Open
.\" Group, have given us permission to reprint portions of their
.\" documentation.
.\"
.\" In the following statement, the phrase ``this text'' refers to portions
.\" of the system documentation.
.\"
.\" Portions of this text are reprinted and reproduced in electronic form
.\" in the SunOS Reference Manual, from IEEE Std 1003.1, 2004 Edition,
.\" Standard for Information Technology -- Portable Operating System
.\" Interface (POSIX), The Open Group Base Specifications Issue 6,
.\" Copyright (C) 2001-2004 by the Institute of Electrical and Electronics
.\" Engineers, Inc and The Open Group.  In the event of any discrepancy
.\" between these versions and the original IEEE and The Open Group
.\" Standard, the original IEEE and The Open Group Standard is the referee
.\" document.  The original Standard can be obtained online at
.\" http://www.opengroup.org/unix/online.html.
.\"
.\" This notice shall appear on any product containing this material.
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\"
.\" Copyright 1989 AT&T
.\" Portions Copyright (c) 1994, X/Open Company Limited.  All Rights Reserved.
.\" Copyright (c) 2008, Sun Microsystems, Inc.  All Rights Reserved.
.\"
.Dd August 18, 2019
.Dt FORK 2
.Os
.Sh NAME
.Nm fork , fork1 , forkall , forkx , forkallx
.Nd create a new process
.Sh SYNOPSIS
.In sys/types.h
.In unistd.h
.Ft pid_t
.Fn fork void
.Ft pid_t
.Fn fork1 void
.Ft pid_t
.Fn forkall void
.In sys/fork.h
.Ft pid_t
.Fn forkx "int flags"
.Ft pid_t
.Fn forkallx "int flags"
.Sh DESCRIPTION
The
.Fn fork , Fn fork1 , Fn forkall , Fn forkx
and
.Fn forkallx
functions create a new process.
The address space of the new process (child process) is an exact copy of the
address space of the calling process (parent process).
The child process inherits the following attributes from the parent process:
.Pp
.Bl -dash -compact
.It
Real user ID, real group ID, effective user ID, effective group ID.
.It
Environment.
.It
Open file descriptors.
.It
Close-on-exec flags
.Pq see Xr exec 2 .
.It
Signal handling settings
.Po that is, Dv SIG_DFL , SIG_IGN , SIG_HOLD ,
function address
.Pc .
.It
Supplementary group IDs.
.It
Set-user-ID mode bit.
.It
Set-group-ID mode bit.
.It
Profiling on/off status.
.It
Nice value
.Pq see Xr nice 2 .
.It
Scheduler class
.Pq see Xr priocntl 2 .
.It
All attached shared memory segments
.Pq see Xr shmop 2 .
.It
Process group ID \(em memory mappings
.Pq see Xr mmap 2 .
.It
Session ID
.Pq see Xr exit 2 .
.It
Current working directory.
.It
Root directory.
.It
File mode creation mask
.Pq see Xr umask 2 .
.It
Resource limits
.Pq see Xr getrlimit 2 .
.It
Controlling terminal.
.It
Saved user ID and group ID.
.It
Task ID and project ID.
.It
Processor bindings
.Pq see Xr processor_bind 2 .
.It
Processor set bindings
.Pq see Xr pset_bind 2 .
.It
Process privilege sets
.Pq see Xr getppriv 2 .
.It
Process flags
.Pq see Xr getpflags 2 .
.It
Active contract templates
.Pq see Xr contract 4 .
.El
.Pp
Scheduling priority and any per-process scheduling parameters that are specific
to a given scheduling class might or might not be inherited according to the
policy of that particular class
.Pq see Xr priocntl 2 .
The child process
might or might not be in the same process contract as the parent
.Pq see Xr process 4 .
The child process differs from the parent process in the following ways:
.Bl -dash
.It
The child process has a unique process ID which does not match any active
process group ID.
.It
The child process has a different parent process ID (that is, the process
ID of the parent process).
.It
The child process has its own copy of the parent's file descriptors and
directory streams.
Each of the child's file descriptors shares a common file pointer with the
corresponding file descriptor of the parent.
.It
Each shared memory segment remains attached and the value of
.Va shm_nattach
is incremented by 1.
.It
All
.Va semadj
values are cleared
.Pq see Xr semop 2 .
.It
Process locks, text locks, data locks, and other memory locks are not inherited
by the child
.Pq see Xr plock 3C and Xr memcntl 2 .
.It
The child process
.Vt tms
structure is cleared:
.Va tms_utime , tms_stime , tms_cutime
and
.Va tms_cstime
are set to 0
.Pq see Xr times 2 .
.It
The child processes resource utilizations are set to 0; see
.Xr getrlimit 2 .
The
.Va it_value
and
.Va it_interval
values for the
.Dv ITIMER_REAL
timer are reset to 0; see
.Xr getitimer 2 .
.It
The set of signals pending for the child process is initialized to the empty
set.
.It
Timers created by
.Xr timer_create 3C
are not inherited by the child process.
.It
No asynchronous input or asynchronous output operations are inherited by the
child.
.It
Any preferred hardware address translation sizes
.Pq see Xr memcntl 2
are inherited by the child.
.It
The child process holds no contracts
.Pq see Xr contract 4 .
.El
.Pp
Record locks set by the parent process are not inherited by the child process
.Pq see Xr fcntl 2 .
.Pp
Although any open door descriptors in the parent are shared by the child, only
the parent will receive a door invocation from clients even if the door
descriptor is open in the child.
If a descriptor is closed in the parent, attempts to operate on the door
descriptor will fail even if it is still open in the child.
.Ss Threads
A call to
.Fn forkall
or
.Fn forkallx
replicates in the child process
all of the threads
.Pq see Xr thr_create 3C and Xr pthread_create 3C
in the parent process.
A call to
.Fn fork1
or
.Fn forkx
replicates only the calling thread in the child process.
.Pp
A call to
.Fn fork
is identical to a call to
.Fn fork1 ;
only the
calling thread is replicated in the child process.
This is the POSIX-specified behavior for
.Fn fork .
.Pp
In releases of Solaris prior to Solaris 10, the behavior of
.Fn fork
depended on whether or not the application was linked with the
.Lb libpthread .
When linked with
.Fl l Ns Cm thread
but not linked with
.Fl l Ns Cm pthread , Fn fork
was the same as
.Fn forkall .
When linked with
.Fl l Ns Cm pthread ,
whether or not also linked with
.Fl l Ns Cm thread , Fn fork
was the same as
.Fn fork1 .
.Pp
Prior to Solaris 10, either
.Fl l Ns Cm thread
or
.Fl l Ns Cm pthread
was required for multithreaded applications.
This is no longer the case.
The standard C library
provides all threading support for both sets of application programming
interfaces.
Applications that require replicate-all fork semantics must call
.Fn forkall
or
.Fn forkallx .
.Ss Fork Extensions
The
.Fn forkx
and
.Fn forkallx
functions accept a
.Fa flags
argument
consisting of a bitwise inclusive-OR of zero or more of the following flags,
which are defined in the header
.In sys/fork.h :
.Bl -tag -width "FORK_NOSIGCHLD"
.It Dv FORK_NOSIGCHLD
Do not post a
.Dv SIGCHLD
signal to the parent process when the child process
terminates, regardless of the disposition of the
.Dv SIGCHLD
signal in the parent.
.Dv SIGCHLD
signals are still possible for job control stop and continue actions if the
parent has requested them.
.It Dv FORK_WAITPID
Do not allow wait-for-multiple-pids by the parent, as in
.Fn wait , Fn waitid P_ALL
or
.Fn waitid P_PGID ,
to reap the child and do not allow the child to be reaped automatically due the
disposition of the
.Dv SIGCHLD
signal being set to be ignored in the parent.
Only a specific wait for the child, as in
.Fn waitid P_PID , pid ,
is allowed and it is required, else when the child exits it will remain a
zombie until the parent exits.
.El
.Pp
If the flags argument is 0,
.Fn forkx
is identical to
.Fn fork
and
.Fn forkallx
is identical to
.Fn forkall .
.Ss Fork Safety
If a multithreaded application calls
.Fn fork , Fn fork1
or
.Fn forkx ,
and the child does more than simply call one of the
.Xr exec 2
functions, there is a possibility of deadlock occurring in the child.
The application should use
.Xr pthread_atfork 3C
to ensure safety with respect to this deadlock.
Should there be any outstanding mutexes throughout the process, the application
should call
.Fn pthread_atfork
to wait for and acquire those mutexes prior to calling
.Fn fork , Fn fork1
or
.Fn forkx .
See the
.Em MT-Level
section in
.Xr attributes 5 .
.Pp
The
.Fn pthread_atfork
mechanism is used to protect the locks that
.Xr libc 3LIB
uses to implement interfaces such as
.Xr malloc 3C .
All interfaces provided by libc are safe to use in a child process following a
.Fn fork ,
except when
.Fn fork
is executed within a signal handler.
.Pp
The POSIX standard
.Pq see Xr standards 5
requires
.Fn fork
to be
.Sy Async-Signal-Safe Pq see Xr attributes 5 .
This cannot be made to happen with fork handlers in place, because they acquire
locks.
To be in nominal compliance, no fork handlers are called when
.Fn fork
is executed within a
signal context.
This leaves the child process in a questionable state with respect to its
locks, but at least the calling thread will not deadlock itself attempting to
acquire a lock that it already owns.
In this situation, the application should strictly adhere to the advice given
in the POSIX specification: "To avoid errors, the child process may only
execute Async-Signal-Safe operations until such time as one of the
.Xr exec 2
functions is called."
.Sh RETURN VALUES
Upon successful completion,
.Fn fork , Fn fork1 , Fn forkall , Fn forkx
and
.Fn forkallx
return the value 0 to the child process and the process ID of the child process
to the parent process;
otherwise the value
.Po Vt pid_t Pc Ns -1
is returned to the parent process, no child process is created and the global
variable
.Va errno
is set to indicate the error.
.Sh ERRORS
The
.Fn fork , Fn fork1 , Fn forkall , Fn forkx
and
.Fn forkallx
functions will fail if:
.Bl -tag -width Er
.It Bq Er EAGAIN
A resource control or limit on the total number of processes, tasks or LWPs
under execution by a single user, task, project, or zone has been exceeded, or
the total amount of system memory available is temporarily insufficient to
duplicate this process.
.It Bq Er ENOMEM
There is not enough swap space.
.It Bq Er EPERM
The
.Brq Dv PRIV_PROC_FORK
privilege is not asserted in the effective set of the calling process.
.El
.Pp
The
.Fn forkx
and
.Fn forkallx
functions will fail if:
.Bl -tag -width Er
.It Bq Er EINVAL
The
.Fa flags
argument is invalid.
.El
.Sh INTERFACE STABILITY
.Sy Committed
.Sh MT-LEVEL
.Sy Async-Signal-Safe
.Sh STANDARDS
For
.Fn fork ,
see
.Xr standards 5 .
.Sh SEE ALSO
.Xr alarm 2 ,
.Xr exec 2 ,
.Xr exit 2 ,
.Xr fcntl 2 ,
.Xr getitimer 2 ,
.Xr getrlimit 2 ,
.Xr memcntl 2 ,
.Xr mmap 2 ,
.Xr nice 2 ,
.Xr priocntl 2 ,
.Xr semop 2 ,
.Xr shmop 2 ,
.Xr times 2 ,
.Xr umask 2 ,
.Xr waitid 2 ,
.Xr door_create 3C ,
.Xr exit 3C ,
.Xr plock 3C ,
.Xr pthread_atfork 3C ,
.Xr pthread_create 3C ,
.Xr signal 3C ,
.Xr system 3C ,
.Xr thr_create 3C ,
.Xr timer_create 3C ,
.Xr wait 3C ,
.Xr contract 4 ,
.Xr process 4 ,
.Xr attributes 5 ,
.Xr privileges 5 ,
.Xr standards 5
.Sh NOTES
An application should call
.Fn _exit
rather than
.Xr exit 3C
if it cannot
.Fn execve ,
since
.Fn exit
will flush and close standard I/O channels and thereby corrupt the parent
process's standard I/O data structures.
Using
.Xr exit 3C
will flush buffered data twice.
See
.Xr exit 2 .
.Pp
The thread in the child that calls
.Fn fork , Fn fork1
or
.Fn fork1x
must not depend on any resources held by threads that no longer exist in the
child.
In particular, locks held by these threads will not be released.
.Pp
In a multithreaded process,
.Fn forkall
in one thread can cause blocking system calls to be interrupted and return with
an
.Er EINTR
error.
