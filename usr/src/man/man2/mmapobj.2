.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\"
.\" Copyright (c) 2008, Sun Microsystems, Inc. All Rights Reserved
.\"
.Dd June 20, 2021
.Dt MMAPOBJ 2
.Os
.Sh NAME
.Nm mmapobj
.Nd map a file object in the appropriate manner
.Sh SYNOPSIS
.In sys/mman.h
.Ft int
.Fo mmapobj
.Fa "int fd"
.Fa "int_t flags"
.Fa "mmapobj_result_t *storage"
.Fa "uint_t *elements"
.Fa "void *arg"
.Fc
.Sh PARAMETERS
.Bl -tag -width "elements"
.It Fa fd
The open file descriptor for the file to be mapped.
.It Fa flags
Indicates that the default behavior of
.Fn mmapobj
should be modified accordingly.
Available flags are:
.Bl -tag -width Ds
.It Dv MMOBJ_INTERPRET
Interpret the contents of the file descriptor instead of just mapping it as a
single image.
This flag can be used only with
.Dv ELF
and
.Dv AOUT
files.
.It Dv MMOBJ_PADDING
When mapping in the file descriptor, add an additional mapping before the
lowest mapping and after the highest mapping.
The size of this padding is at least as large as the amount pointed to by
.Fa arg .
These mappings will be private to the process, will not reserve any swap space
and will have no protections.
To use this address space, the protections for it will need to be changed.
This padding request will be ignored for the
.Dv AOUT
format.
.El
.It Fa storage
A pointer to the
.Vt mmapobj_result_t
array where the mapping data will be copied out after a successful mapping of
.Fa fd .
.It Fa elements
A pointer to the number of
.Vt mmapobj_result_t
elements pointed to by
.Va storage .
On return,
.Fa elements
contains the number of mappings required to fully map the requested object.
If the original value of
.Fa elements
is too small,
.Er E2BIG
is returned and
.Fa elements
is modified to contain the number of mappings necessary.
.It Fa arg
A pointer to additional information that might be associated with the specific
request.
Only the
.Dv MMOBJ_PADDING
request uses this argument.
If
.Dv MMOBJ_PADDING
is not specified,
.Fa arg
must be
.Dv NULL .
.El
.Sh DESCRIPTION
The
.Fn mmapobj
function establishes a set of mappings between a process'
address space and a file.
By default,
.Fn mmapobj
maps the whole file as a
single, private, read-only mapping.
The
.Dv MMOBJ_INTERPRET
flag instructs
.Fn mmapobj
to attempt to interpret the file and map the file according to
the rules for that file format.
The following
.Dv ELF
and
.Dv AOUT
formats are supported:
.Bl -tag -width Ds
.It Eo
.Dv ET_EXEC
and
.Dv AOUT
executables
.Ec
This format results in one or more mappings whose size, alignment and
protections are as described by the file's program header information.
The address of each mapping is explicitly defined by the file's program
headers.
.It Eo
.Dv ET_DYN
and
.Dv AOUT
shared objects
.Ec
This format results in one or more mappings whose size, alignment and
protections are as described by the file's program header information.
The base address of the initial mapping is chosen by
.Fn mmapobj .
The addresses of adjacent mappings are based off of this base address as
defined by the file's program headers.
.It Eo
.Dv ET_REL
and
.Dv ET_CORE
.Ec
This format results in a single, read-only mapping that covers the whole file.
The base address of this mapping is chosen by
.Fn mmapobj .
.El
.Pp
The
.Fn mmapobj
function will not map over any currently used mappings within the process,
except for the case of an
.Dv ELF ET_EXEC
file for which a previous reservation has been made via
.Pa /dev/null .
The most common way to make such a reservation would be with an
.Fn mmap
of
.Pa /dev/null .
.Pp
Mappings created with
.Fn mmapobj
can be processed individually by other system calls such as
.Xr munmap 2 .
.Pp
The mmapobj_result structure contains the following members:
.Bd -literal
typedef struct mmapobj_result {
      caddr_t         mr_addr;         /* mapping address */
      size_t          mr_msize;        /* mapping size */
      size_t          mr_fsize;        /* file size */
      size_t          mr_offset;       /* offset into file */
      uint_t          mr_prot;         /* the protections provided */
      uint_t          mr_flags;        /* info on the mapping */
} mmapobj_result_t;
.Ed
.Pp
The macro
.Fn MR_GET_TYPE mr_flags
must be used when looking for the
above flags in the value of
.Va mr_flags .
.Pp
Values for
.Va mr_flags
include:
.Bd -literal -offset indent
MR_PADDING   0x1  /* this mapping represents requested padding */
MR_HDR_ELF   0x2  /* the ELF header is mapped at mr_addr */
MR_HDR_AOU   0x3  /* the AOUT header is mapped at mr_addr */
.Ed
.Pp
When
.Dv MR_PADDING
is set,
.Va mr_fsize
and
.Va mr_offset
will both be 0.
.Pp
The
.Va mr_fsize
member represents the amount of the file that is mapped into memory with this
mapping.
.Pp
The
.Va mr_offset
member is the offset into the mapping where valid data begins.
.Pp
The
.Va mr_msize
member represents the size of the memory mapping starting at
.Va mr_addr .
This size may include unused data prior to
.Va mr_offset
that exists to satisfy the alignment requirements of this segment.
This size may also include any non-file data that are required to provide
.Dv NOBITS
data
(typically .bss).
The system reserves the right to map more than
.Va mr_msize
bytes of memory but only
.Va mr_msize
bytes will be available to the caller of
.Fn mmapobj .
.Sh RETURN VALUES
Upon successful completion, the value 0 is returned and
.Fa elements
contains the number of program headers that are mapped for
.Fa fd .
The data describing these elements are copied to
.Fa storage
such that the first
.Fa elements
members of the
.Fa storage
array contain valid mapping data.
Otherwise the value -1 is returned, no data is copied to
.Fa storage
and the global variable
.Va errno
is set to indicate the error.
.Sh ERRORS
The
.Fn mmapobj
function will fail if:
.Bl -tag -width Er
.It Bq Er E2BIG
The
.Fa elements
argument was not large enough to hold the number of loadable segments in
.Fa fd .
The
.Fa elements
argument will be modified to contain the number of segments required.
.It Bq Er EACCES
The file system containing the
.Fa fd
to be mapped does not allow execute access, or the file descriptor pointed to
by
.Fa fd
is not open for reading.
.It Bq Er EADDRINUSE
The mapping requirements overlap an object that is already used by the process.
.It Bq Er EAGAIN
There is insufficient room to reserve swap space for the mapping.
.Pp
The file to be mapped is already locked using advisory or mandatory record
locking.
See
.Xr fcntl 2 .
.It Bq Er EBADF
The
.Fa fd
argument is not a valid open file descriptor.
.It Bq Er EFAULT
The
.Fa storage , arg
or
.Fa elements
argument points to an invalid address.
.It Bq Er EINVAL
The
.Fa flags
argument contains an invalid flag.
.Pp
.Dv MMOBJ_PADDING
was not specified in
.Fa flags
and
.Fa arg
was non-null.
.It Bq Er ENODEV
The
.Fa fd
argument refers to an object for which
.Fn mmapobj
is meaningless, such as a terminal.
.It Bq Er ENOMEM
Insufficient memory is available to hold the program headers.
.Pp
Insufficient memory is available in the address space to create the mapping.
.It Bq Er ENOTSUP
The current user data model does not match the
.Fa fd
to be interpreted; thus, a 32-bit process that tried to use
.Fn mmapobj
to interpret a 64-bit object would return
.Er ENOTSUP .
.Pp
The
.Fa fd
argument is a file whose type can not be interpreted and
.Dv MMOBJ_INTERPRET
was specified in
.Fa flags .
.Pp
The
.Dv ELF
header contains an unaligned
.Va e_phentsize
value.
.It Bq Er ENOSYS
An unsupported filesystem operation was attempted while trying to map in the
object.
.El
.Sh INTERFACE STABILITY
.Sy Private
.Sh MT-LEVEL
.Sy Async-Signal-Safe
.Sh SEE ALSO
.Xr ld.so.1 1 ,
.Xr fcntl 2 ,
.Xr memcntl 2 ,
.Xr mmap 2 ,
.Xr mprotect 2 ,
.Xr munmap 2 ,
.Xr madvise 3C ,
.Xr mlockall 3C ,
.Xr msync 3C ,
.Xr elf 3ELF ,
.Xr a.out 4 ,
.Xr attributes 5
.Rs
.%T Linker and Libraries Guide
.Re
