.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\"
.\" Copyright 1989 AT&T
.\" Copyright (c) 2008, Sun Microsystems, Inc. All Rights Reserved
.\"
.Dd March 10, 2008
.Dt SHMOP 2
.Os
.Sh NAME
.Nm shmop , shmat , shmdt
.Nd shared memory operations
.Sh SYNOPSIS
.In sys/types.h
.In sys/shm.h
.Ft void *
.Fn shmat "int shmid" "const void *shmaddr" "int shmflg"
.Ft int
.Fn shmdt "char *shmaddr"
.Ss Standard Conforming
.Ft int
.Fn shmdt "const void *shmaddr"
.Sh DESCRIPTION
The
.Fn shmat
function attaches the shared memory segment associated with the shared memory
identifier specified by
.Fa shmid
to the data segment of the calling process.
.Pp
The permission required for a shared memory control operation is given as
.Brq Va token ,
where
.Va token
is the type of permission needed.
The types of permission are interpreted as follows:
.Bd -literal -offset indent
00400	READ by user
00200	WRITE by user
00040	READ by group
00020	WRITE by group
00004	READ by others
00002	WRITE by others
.Ed
.Pp
See the
.Sy Shared Memory Operation Permissions
section of
.Xr Intro 2
for more information.
.Pp
For shared memory segments created with the
.Dv SHM_SHARE_MMU
or
.Dv SHM_PAGEABLE
flags, the default protections cannot be changed so as to
prevent a single process from affecting other processes sharing the same shared
segment.
.Pp
When
.Ql Pq shmflg & SHM_SHARE_MMU
is true, virtual memory resources in
addition to shared memory itself are shared among processes that use the same
shared memory.
.Pp
When
.Ql Pq shmflg & SHM_PAGEABLE
is true, virtual memory resources are
shared and the dynamic shared memory (DISM) framework is created.
The dynamic shared memory can be resized dynamically within the specified size
in
.Xr shmget 2 .
The DISM shared memory is pageable unless it is locked.
.Pp
The shared memory segment is attached to the data segment of the calling
process at the address specified based on one of the following criteria:
.Bl -dash -width Ds
.It
If
.Fa shmaddr
is equal to
.Po Vt void * Pc Ns 0 ,
the segment is attached to the first available address as selected by the
system.
.It
If
.Fa shmaddr
is equal to
.Po Vt void * Pc Ns 0
and
.Ql Pq shmflg\ &\ SHM_SHARE_MMU
or
.Ql Pq shmflg\ &\ SHM_PAGEABLE
is true, then the segment is attached to the first available suitably aligned
address.
When
.Ql Pq shmflg\ &\ SHM_SHARE_MMU
or
.Ql Pq shmflg\ &\ SHM_PAGEABLE
is set, however, the permission given by
.Fn shmget
determines whether the segment is attached for reading or reading and writing.
.It
If
.Fa shmaddr
is not equal to
.Po Vt void * Pc Ns 0
and
.Ql Pq shmflg\ &\ SHM_RND
is true, the segment is attached to the address
given by
.Ql (shmaddr\ -\ (shmaddr\ %\ SHMLBA)) .
.It
If
.Fa shmaddr
is not equal to
.Po Vt void * Pc Ns 0
and
.Ql Pq shmflg\ &\ SHM_RND
is false, the segment is attached to the address given by
.Fa shmaddr .
.It
The segment is attached for reading if
.Ql Pq shmflg\ &\ SHM_RDONLY
is true
.Brq Dv READ ,
otherwise it is attached for reading and writing
.Brq Dv READ / WRITE .
.El
.Pp
The
.Fn shmdt
function detaches from the calling process's data segment the
shared memory segment located at the address specified by
.Fa shmaddr .
If the application is standard-conforming
.Pq see Xr standards 5 ,
the
.Fa shmaddr
argument is of type
.Vt const void * .
Otherwise it is of type
.Vt char * .
.Pp
Shared memory segments must be explicitly removed after the last reference to
them has been removed.
.Sh RETURN VALUES
Upon successful completion,
.Fn shmat
returns the data segment start address of the attached shared memory segment;
.Fn shmdt
returns 0; otherwise the value -1 is returned, the shared memory segment is not
attached and the global variable
.Va errno
is set to indicate the error.
.Sh ERRORS
The
.Fn shmat
function will fail if:
.Bl -tag -width Er
.It Bq Er EACCES
Operation permission is denied to the calling process (see Intro(2)).
.It Bq Er EINVAL
The
.Fa shmid
argument is not a valid shared memory identifier.
.Pp
The
.Fa shmaddr
argument is not equal to 0, and the value of
.Ql (shmaddr\ -\ (shmaddr\ %\ SHMLBA)) .
is an illegal address.
.Pp
The
.Fa shmaddr
argument is not equal to 0, is an illegal address, and
.Ql Pq shmflg\ &\ SHM_RND
is false.
.Pp
The
.Fa shmaddr
argument is not equal to 0, is not properly aligned, and
.Ql Pq shmfg\ &\ SHM_SHARE_MMU
is true.
.Pp
.Dv SHM_SHARE_MMU
is not supported in certain architectures.
.Pp
Both
.Ql Pq shmflg\ &\ SHM_SHARE_MMU
and
.Ql Pq shmflg\ &\ SHM_PAGEABLE
are true.
.Pp
.Ql Pq shmflg\ &\ SHM_SHARE_MMU
is true and the shared memory segment
specified by
.Fn shmid
had previously been attached by a call to
.Fn shmat
in which
.Ql Pq shmflg\ &\ SHM_PAGEABLE
was true.
.Pp
.Ql Pq shmflg\ &\ SHM_PAGEABLE
is true and the shared memory segment specified by
.Fn shmid
had previously been attached by a call to
.Fn shmat
in which
.Ql Pq shmflg\ &\ SHM_SHARE_MMU
was true.
.It Bq Er EMFILE
The number of shared memory segments attached to the calling process would
exceed the system-imposed limit.
.It Bq Er ENOMEM
The available data space is not large enough to accommodate the shared memory
segment.
.El
.Pp
The
.Fn shmdt
function will fail if:
.Bl -tag -width Er
.It Bq Er EINVAL
The
.Fa shmaddr
argument is not the data segment start address of a shared
memory segment.
.It Bq Er ENOMEM
.Ql Pq shmflg\ &\ SHM_SHARE_MMU
is true and attaching to the shared memory segment would exceed a limit or
resource control on locked memory.
.El
.Sh WARNINGS
Using a fixed value for the
.Fa shmaddr
argument can adversely affect performance on certain platforms due to D-cache
aliasing.
.Sh INTERFACE STABILITY
.Sy Committed
.Sh MT-LEVEL
.Sy Async-Signal-Safe
.Sh STANDARDS
See
.Xr standards 5 .
.Sh SEE ALSO
.Xr exec 2 ,
.Xr exit 2 ,
.Xr fork 2 ,
.Xr Intro 2 ,
.Xr shmctl 2 ,
.Xr shmget 2 ,
.Xr attributes 5 ,
.Xr standards 5
