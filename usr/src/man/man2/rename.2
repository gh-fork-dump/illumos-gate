.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\"
.\" Copyright 1989 AT&T
.\" Copyright (c) 2007, Sun Microsystems, Inc. All Rights Reserved
.\"
.Dd September 29, 2020
.Dt RENAME 2
.Os
.Sh NAME
.Nm rename , renameat
.Nd change the name of a file
.Sh SYNOPSIS
.In stdio.h
.Ft int
.Fo rename
.Fa "const char *old"
.Fa "const char *new"
.Fc
.In unistd.h
.Ft int
.Fo renameat
.Fa "int fromfd"
.Fa "const char *old"
.Fa "int tofd"
.Fa "const char *new"
.Fc
.Ss XPG3
.In unistd.h
.Ft int
.Fo rename
.Fa "const char *old"
.Fa "const char *new"
.Fc
.Sh DESCRIPTION
The
.Fn rename
function changes the name of a file.
The
.Fa old
argument points to the pathname of the file to be renamed.
The
.Fa new
argument points to the
.Fa new
path name of the file.
.Pp
The
.Fn renameat
function renames an entry in a directory, possibly moving the entry into a
different directory.
See
.Xr fsattr 5 .
If the
.Fa old
argument is an absolute path, the
.Fa fromfd
is ignored.
Otherwise it is resolved relative to the
.Fa fromfd
argument rather than the current working directory.
Similarly, if the
.Fa new
argument is not absolute, it is resolved relative to the
.Fa tofd
argument.
If either
.Fa fromfd
or
.Fa tofd
have the value
.Dv AT_FDCWD ,
defined in
.In fcntl.h ,
and their respective paths are relative, the path is resolved relative to the
current working directory.
.Pp
Current implementation restrictions will cause the
.Fn renameat
function to return an error if an attempt is made to rename an extended
attribute file to a regular (non-attribute) file, or to rename a regular file
to an extended attribute file.
.Pp
If
.Fa old
and
.Fa new
both refer to the same existing file, the
.Fn rename
and
.Fn renameat
functions return successfully and performs no other action.
.Pp
If
.Fa old
points to the pathname of a file that is not a directory,
.Fa new
must not point to the pathname of a directory.
If the link named by
.Fa new
exists, it will be removed and
.Fa old
will be renamed to
.Fa new .
In this case, a link named
.Fa new
must remain visible to other processes throughout the renaming operation and
will refer to either the file referred to by
.Fa new
or the file referred to as
.Fa old
before the operation began.
.Pp
If
.Fa old
points to the pathname of a directory,
.Fa new
must not point
to the pathname of a file that is not a directory.
If the directory named by
.Fa new
exists, it will be removed and
.Fa old
will be renamed to
.Fa new .
In this case, a link named
.Fa new
will exist throughout the renaming operation and will refer to either the file
referred to by
.Fa new
or the file referred to as
.Fa old
before the operation began.
Thus, if
.Fa new
names an existing directory, it must be an empty directory.
.Pp
The
.Fa new
pathname must not contain a path prefix that names
.Fa old .
Write access permission is required for both the directory containing
.Fa old
and the directory containing
.Fa new .
If
.Fa old
points to the pathname of a directory, write access permission is required for
the directory named by
.Fa old ,
and, if it exists, the directory named by
.Fa new .
.Pp
If the directory containing
.Fa old
has the sticky bit set, at least one of the following conditions listed below
must be true:
.Pp
.Bl -dash -compact
.It
The user must own
.Fa old .
.It
The user must own the directory containing
.Fa old .
.It
.Fa old
must be writable by the user.
.It
The user must be a privileged user.
.El
.Pp
If
.Fa new
exists, and the directory containing
.Fa new
is writable and has the sticky bit set, at least one of the following
conditions must be true:
.Pp
.Bl -dash -compact
.It
The user must own
.Fa new .
.It
The user must own the directory containing
.Fa new .
.It
.Fa new
must be writable by the user.
.It
The user must be a privileged user.
.El
.Pp
If the link named by
.Fa new
exists, the file's link count becomes zero when it is removed, and no process
has the file open, then the space occupied by the file will be freed and the
file will no longer be accessible.
If one or more processes have the file open when the last link is removed, the
link will be removed before
.Fn rename
or
.Fn renameat
returns, but the removal of the file contents will be postponed until all
references to the file have been closed.
.Pp
Upon successful completion, the
.Fn rename
and
.Fn renameat
functions will mark for update the
.Va st_ctime
and
.Va st_mtime
fields of the parent directory of each file.
.Sh RETURN VALUES
.Rv -std
.Sh ERRORS
The
.Fn rename
and
.Fn renameat
functions will fail if:
.Bl -tag -width Er
.It Bq Er EACCES
A component of either path prefix denies search permission; one of the
directories containing
.Fa old
and
.Fa new
denies write permissions; or write permission is denied by a directory pointed
to by
.Fa old
or
.Fa new .
.It Bq Er EBUSY
The
.Fa new
argument is a directory and the mount point for a mounted file system.
.It Bq Er EDQUOT
The directory where the
.Fa new
name entry is being placed cannot be extended because the user's quota of disk
blocks on that file system has been exhausted.
.It Bq Er EEXIST
The link named by
.Fa new
is a directory containing entries other than
.Do Pa &. Dc Pq the directory itself
and
.Do Pa \&.. Dc Pq the parent directory .
.It Bq Er EFAULT
Either
.Fa old
or
.Fa new
references an invalid address.
.It Bq Er EILSEQ
The path argument includes non-UTF8 characters and the file system accepts only
file names where all characters are part of the UTF-8 character codeset.
.It Bq Er EINVAL
The
.Fa new
argument directory pathname contains a path prefix that names the
.Fa old
directory, or an attempt was made to rename a regular file to an extended
attribute or from an extended attribute to a regular file.
.It Bq Er EIO
An I/O error occurred while making or updating a directory entry.
.It Bq Er EISDIR
The
.Fa new
argument points to a directory but
.Fa old
points to a file that is not a directory.
.It Bq Er ELOOP
Too many symbolic links were encountered in translating the pathname.
.It Bq Er ENAMETOOLONG
The length of
.Fa old
or
.Fa new
exceeds
.Dv PATH_MAX ,
or a pathname component is longer than
.Dv NAME_MAX
while
.Dv _POSIX_NO_TRUNC
is in effect.
.It Bq Er EMLINK
The file named by
.Fa old
is a directory, and the link count of the parent directory of
.Fa new
would exceed
.Dv LINK_MAX .
.It Bq Er ENOENT
The link named by
.Fa old
does not name an existing file, a component of the path prefix of
.Fa new
does not exist, or either
.Fa old
or
.Fa new
points to an empty string.
.It Bq Er ENOSPC
The directory that would contain
.Fa new
cannot be extended.
.It Bq Er ENOTDIR
A component of either path prefix is not a directory, or
.Fa old
names a directory and
.Fa new
names a file that is not a directory, or
.Fa tofd
and
.Fa dirfd
in
.Fn renameat
do not reference a directory.
.It Bq Er EROFS
The requested operation requires writing in a directory on a read-only file
system.
.It Bq Er EXDEV
The links named by
.Fa old
and
.Fa new
are on different file systems.
.El
.Pp
The
.Fn renameat
function will fail if:
.Bl -tag -width Er
.It Bq Er ENOTSUP
An attempt was made to rename a regular file as an attribute file or to rename
an attribute file as a regular file.
.El
.Sh INTERFACE STABILITY
.Sy Committed
.Sh MT-LEVEL
.Sy Async-Signal-Safe
.Sh STANDARDS
For
.Fn rename ,
see
.Xr standards 5 .
.Sh SEE ALSO
.Xr chmod 2 ,
.Xr link 2 ,
.Xr unlink 2 ,
.Xr attributes 5 ,
.Xr fsattr 5 ,
.Xr standards 5
.Sh NOTES
The system can deadlock if there is a loop in the file system graph.
Such a loop can occur if there is an entry in directory
.Pa a ,  a/name1 ,
that is a hard link to directory
.Pa b ,
and an entry in directory
.Pa b , b/name2 ,
that is a hard link to directory
.Pa a .
When such a loop exists and two separate processes attempt to rename
.Pa a/name1
to
.Pa b/name2
and
.Pa b/name2
to
.Pa a/name1 ,
the system may deadlock attempting to lock both directories for modification.
Use symbolic links instead of hard links for directories.
