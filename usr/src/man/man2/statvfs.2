.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\"
.\" Copyright 1989 AT&T
.\" Copyright (c) 2004, Sun Microsystems, Inc. All Rights Reserved
.\"
.Dd October 3, 2020
.Dt STATVFS 2
.Os
.Sh NAME
.Nm statvfs , fstatvfs
.Nd get file system information
.Sh SYNOPSIS
.In sys/types.h
.In sys/statvfs.h
.Ft int
.Fn statvfs "const char *restrict path" "struct statvfs *restrict buf"
.Ft int
.Fn fstatvfs "int fildes" "struct statvfs *buf"
.Sh DESCRIPTION
The
.Fn statvfs
function returns a "generic superblock" describing a file
system; it can be used to acquire information about mounted file systems.
The
.Fa buf
argument is a pointer to a structure (described below) that is filled
by the function.
.Pp
The
.Fa path
argument should name a file that resides on that file system.
The file system type is known to the operating system.
Read, write or execute
permission for the named file is not required, but all directories listed in
the path name leading to the file must be searchable.
.Pp
The
.Va statvfs
structure pointed to by
.Fa buf
includes the following members:
.Bd -literal
u_long      f_bsize;             /* preferred file system block size */
u_long      f_frsize;            /* fundamental filesystem block
                                    (size if supported) */
fsblkcnt_t  f_blocks;            /* total # of blocks on file system
                                    in units of f_frsize */
fsblkcnt_t  f_bfree;             /* total # of free blocks */
fsblkcnt_t  f_bavail;            /* # of free blocks avail to
                                    non-privileged user */
fsfilcnt_t  f_files;             /* total # of file nodes (inodes) */
fsfilcnt_t  f_ffree;             /* total # of free file nodes */
fsfilcnt_t  f_favail;            /* # of inodes avail to
                                    non-privileged user*/
u_long      f_fsid;              /* file system id (dev for now) */
char        f_basetype[FSTYPSZ]; /* target fs type name,
                                    null-terminated */
u_long      f_flag;              /* bit mask of flags */
u_long      f_namemax;           /* maximum file name length */
char        f_fstr[32];          /* file system specific string */
u_long      f_filler[16];        /* reserved for future expansion */
.Ed
.Pp
The
.Fa f_basetype
member contains a null-terminated FSType name of the mounted target.
.Pp
The following values can be returned in the
.Va f_flag
field:
.Bd -literal
ST_RDONLY    0x01    /* read-only file system */
ST_NOSUID    0x02    /* does not support setuid/setgid semantics */
ST_NOTRUNC   0x04    /* does not truncate file names longer than
                        NAME_MAX */
.Ed
.Pp
The
.Fn fstatvfs
function is similar to
.Fn statvfs ,
except that the file named by
.Fa path
in
.Fn statvfs
is instead identified by an open file descriptor
.Fa fildes
obtained from a successful
.Xr open 2 , Xr creat 2 , Xr dup 2 , Xr fcntl 2 or Xr pipe 2
function call.
.Sh RETURN VALUES
.Rv -std
.Sh ERRORS
The
.Fn statvfs
and
.Fn fstatvfs
functions will fail if:
.Bl -tag -width Er
.It Bq Er EOVERFLOW
One of the values to be returned cannot be represented correctly in the
structure pointed to by
.Fa buf .
.El
.Pp
The
.Fn statvfs
function will fail if:
.Bl -tag -width Er
.It Bq Er EACCES
Search permission is denied on a component of the path prefix.
.It Bq Er EFAULT
The
.Fa path
or
.Fa buf
argument points to an illegal address.
.It Bq Er EINTR
A signal was caught during the execution of the
.Fn statvfs
function.
.It Bq Er EIO
An I/O error occurred while reading the file system.
.It Bq Er ELOOP
Too many symbolic links were encountered in translating
.Fa path .
.It Bq Er ENAMETOOLONG
The length of a
.Fa path
component exceeds
.Dv NAME_MAX
characters, or the length of
.Fa path
exceeds
.Dv PATH_MAX
characters.
.It Bq Er ENOENT
Either a component of the path prefix or the file referred to by
.Fa path
does not exist.
.It Bq Er ENOLINK
The
.Fa path
argument points to a remote machine and the link to that machine
is no longer active.
.It Bq Er ENOTDIR
A component of the path prefix of
.Fa path
is not a directory.
.El
.Pp
The
.Fn fstatvfs
function will fail if:
.Bl -tag -width Er
.It Bq Er EBADF
The
.Fa fildes
argument is not an open file descriptor.
.It Bq Er EFAULT
The
.Fa buf
argument points to an illegal address.
.It Bq Er EINTR
A signal was caught during the execution of the
.Fn fstatvfs
function.
.It Bq Er EIO
An I/O error occurred while reading the file system.
.El
.Sh USAGE
The
.Fn statvfs
and
.Fn fstatvfs
functions have transitional interfaces for 64-bit file offsets.
See
.Xr lf64 5 .
.Sh INTERFACE STABILITY
.Sy Standard
.Sh SEE ALSO
.Xr chmod 2 ,
.Xr chown 2 ,
.Xr creat 2 ,
.Xr dup 2 ,
.Xr fcntl 2 ,
.Xr link 2 ,
.Xr mknod 2 ,
.Xr open 2 ,
.Xr pipe 2 ,
.Xr read 2 ,
.Xr time 2 ,
.Xr unlink 2 ,
.Xr utime 2 ,
.Xr write 2 ,
.Xr attributes 5 ,
.Xr lf64 5 ,
.Xr standards 5
.Sh BUGS
The values returned for
.Va f_files , f_ffree
and
.Va f_favail
may not be valid for NFS mounted file systems.
