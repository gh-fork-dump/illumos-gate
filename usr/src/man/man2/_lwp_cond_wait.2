.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\"
.\" Copyright (c) 2001, Sun Microsystems, Inc. All Rights Reserved
.\"
.Dd September 12, 2020
.Dt _LWP_COND_WAIT 2
.Os
.Sh NAME
.Nm _lwp_cond_wait , _lwp_cond_timedwait , _lwp_cond_reltimedwait
.Nd wait on a condition variable
.Sh SYNOPSIS
.In sys/lwp.h
.Ft int
.Fo _lwp_cond_wait
.Fa "lwp_cond_t *cvp"
.Fa "lwp_mutex_t *mp"
.Fc
.Ft int
.Fo _lwp_cond_timedwait
.Fa "lwp_cond_t *cvp"
.Fa "lwp_mutex_t *mp"
.Fa "timestruc_t *abstime"
.Fc
.Ft int
.Fo _lwp_cond_reltimedwait
.Fa "lwp_cond_t *cvp"
.Fa "lwp_mutex_t *mp"
.Fa "timestruc_t *reltime"
.Fc
.Sh DESCRIPTION
These functions are used to wait for the occurrence of a condition represented
by an LWP condition variable.
LWP condition variables must be initialized to 0
before use.
.Pp
The
.Fn _lwp_cond_wait
function atomically releases the LWP mutex pointed
to by
.Fa mp
and causes the calling LWP to block on the LWP condition
variable pointed to by
.Fa cvp .
The blocked LWP may be awakened by
.Xr _lwp_cond_signal 2 , Xr _lwp_cond_broadcast 2
or when interrupted by
delivery of a signal.
Any change in value of a condition associated with the
condition variable cannot be inferred by the return of
.Fn _lwp_cond_wait
and any such condition must be re-evaluated.
.Pp
The
.Fn _lwp_cond_timedwait
function is similar to
.Fn _lwp_cond_wait ,
except that the calling LWP will not block past the time of day specified by
.Fa abstime .
If the time of day becomes greater than
.Fa abstime , Fn _lwp_cond_timedwait
returns with the error code
.Er ETIME .
.Pp
The
.Fn _lwp_cond_reltimedwait
function is similar to
.Fn _lwp_cond_wait ,
except that the calling LWP will not block past the relative time specified by
.Fa reltime .
If the time of day becomes greater than the starting time of day plus
.Fa reltime , Fn _lwp_cond_reltimedwait
returns with the error code
.Er ETIME .
.Pp
The
.Fn _lwp_cond_wait , Fn _lwp_cond_timedwait
and
.Fn _lwp_cond_reltimedwait
functions always return with the mutex locked and owned by the calling
lightweight process.
.Sh RETURN VALUES
Upon successful completion, the valueÂ 0 is returned;
otherwise an error value is returned.
.Pp
The
.Fn _lwp_cond_wait , Fn _lwp_cond_timedwait
and
.Fn _lwp_cond_reltimedwait
functions will fail if:
.Bl -tag -width Er
.It Bq Er EINVAL
The
.Fa cvp
argument points to an invalid LWP condition variable or the
.Fa mp
argument points to an invalid LWP mutex.
.It Bq Er EFAULT
The
.Fa mp , cvp
or
.Fa abstime
argument points to an illegal address.
.El
.Pp
The
.Fn _lwp_cond_wait , Fn _lwp_cond_timedwait
and
.Fn _lwp_cond_reltimedwait
functions may fail if:
.Bl -tag -width Er
.It Bq Er EINTR
The call was interrupted by a signal or
.Xr fork 2 .
.El
.Pp
The
.Fn _lwp_cond_timedwait
and
.Fn _lwp_cond_reltimedwait
functions may fail if:
.Bl -tag -width Er
.It Bq Er ETIME
The time specified in
.Fa abstime
or
.Fa reltime
has passed.
.El
.Sh EXAMPLES
The
.Fn _lwp_cond_wait
function is normally used in a loop testing some condition, as follows:
.Bd -literal -offset indent
lwp_mutex_t m;
lwp_cond_t cv;
int cond;
(void) _lwp_mutex_lock(&m);
while (cond == FALSE) {
	(void) _lwp_cond_wait(&cv, &m);
}
(void) _lwp_mutex_unlock(&m);
.Ed
.Pp
The
.Fn _lwp_cond_timedwait
function is also normally used in a loop testing some condition.
It uses an absolute timeout value as follows:
.Bd -literal -offset indent
timestruc_t to;
lwp_mutex_t m;
lwp_cond_t cv;
int cond, err;
(void) _lwp_mutex_lock(&m);
to.tv_sec = time(NULL) + TIMEOUT;
to.tv_nsec = 0;
while (cond == FALSE) {
	err = _lwp_cond_timedwait(&cv, &m, &to);
	if (err == ETIME) {
		/* timeout, do something */
		break;
	}
}
(void) _lwp_mutex_unlock(&m);
.Ed
.Pp
This example sets a bound on the total wait time even though the
.Fn _lwp_cond_timedwait
may return several times due to the condition being signalled or the wait being
interrupted.
.Pp
The
.Fn _lwp_cond_reltimedwait
function is also normally used in a loop testing some condition.
It uses a relative timeout value as follows:
.Bd -literal -offset indent
timestruc_t to;
lwp_mutex_t m;
lwp_cond_t cv;
int cond, err;
(void) _lwp_mutex_lock(&m);
while (cond == FALSE) {
	to.tv_sec = TIMEOUT;
	to.tv_nsec = 0;
	err = _lwp_cond_reltimedwait(&cv, &m, &to);
	if (err == ETIME) {
		/* timeout, do something */
		break;
	}
}
(void) _lwp_mutex_unlock(&m);
.Ed
.Sh SEE ALSO
.Xr _lwp_cond_broadcast 2 ,
.Xr _lwp_cond_signal 2 ,
.Xr _lwp_kill 2 ,
.Xr _lwp_mutex_lock 2 ,
.Xr fork 2 ,
.Xr kill 2
